{
  "address": "0x527123c9B17818E4f5a02aa303400d746230739f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "farmerToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardWrapper",
          "type": "address"
        }
      ],
      "name": "WrapperCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADAPTER_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "farmerToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardWrapper",
          "type": "address"
        }
      ],
      "name": "calculateWrapperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "calculatedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "farmerToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardWrapper",
          "type": "address"
        }
      ],
      "name": "createWrapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "farmerToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardWrapper",
          "type": "address"
        }
      ],
      "name": "getWrapperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "wrapperAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextReward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x479f3d0aee6d08e56ed8577aae2d517e57d3880bac512db7aed49a54a8e1adda",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x2E65c74c304703c7D6400A0084550eaB31f7E442",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2442168",
    "logsBloom": "0x
    "blockHash": "0x768d995062314f3110c6d015897baff707e2c884ae83011fea9d9ce2220cd4ef",
    "transactionHash": "0x479f3d0aee6d08e56ed8577aae2d517e57d3880bac512db7aed49a54a8e1adda",
    "logs": [],
    "blockNumber": 22216379,
    "cumulativeGasUsed": "2442168",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5630e9f2be32fc38307760daf36c506b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farmerToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardWrapper\",\"type\":\"address\"}],\"name\":\"WrapperCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADAPTER_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardWrapper\",\"type\":\"address\"}],\"name\":\"calculateWrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"calculatedAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardWrapper\",\"type\":\"address\"}],\"name\":\"createWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardWrapper\",\"type\":\"address\"}],\"name\":\"getWrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wrapperAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farming/YieldAdapterFactory.sol\":\"YieldAdapterFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0xdf8d7d1a119fc0d9f73a5c7a5d21bb0a4e0acb2a61e393c26334d397db628768\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0x7846aa81baa00557eba6215442eab916bc98f2e692fdc7b8523cf31122dc8e28\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc9e219f9060c261ab6d140f448ccdcb207ce9835f0d2868d2c5d4a93486d2208\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/AddressStringUtil.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nlibrary AddressStringUtil {\\n    // converts an address to the uppercase hex string, extracting only len bytes (up to 20, multiple of 2)\\n    function toAsciiString(address addr, uint len) pure internal returns (string memory) {\\n        require(len % 2 == 0 && len > 0 && len <= 40, \\\"AddressStringUtil: INVALID_LEN\\\");\\n\\n        bytes memory s = new bytes(len);\\n        uint addrNum = uint(addr);\\n        for (uint i = 0; i < len / 2; i++) {\\n            // shift right and truncate all but the least significant byte to extract the byte at position 19-i\\n            uint8 b = uint8(addrNum >> (8 * (19 - i)));\\n            // first hex character is the most significant 4 bits\\n            uint8 hi = b >> 4;\\n            // second hex character is the least significant 4 bits\\n            uint8 lo = b - (hi << 4);\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n        return string(s);\\n    }\\n\\n    // hi and lo are only 4 bits and between 0 and 16\\n    // this method converts those values to the unicode/ascii code point for the hex representation\\n    // uses upper case for the characters\\n    function char(uint8 b) pure private returns (byte c) {\\n        if (b < 10) {\\n            return byte(b + 0x30);\\n        } else {\\n            return byte(b + 0x37);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1bb0aa768111c1d4734a4962e653beacf8f830b943d0dc83a0a6ff214762b9b1\"},\"@uniswap/lib/contracts/libraries/SafeERC20Namer.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport './AddressStringUtil.sol';\\n\\n// produces token descriptors from inconsistent or absent ERC20 symbol implementations that can return string or bytes32\\n// this library will always produce a string symbol to represent the token\\nlibrary SafeERC20Namer {\\n    function bytes32ToString(bytes32 x) pure private returns (string memory) {\\n        bytes memory bytesString = new bytes(32);\\n        uint charCount = 0;\\n        for (uint j = 0; j < 32; j++) {\\n            byte char = x[j];\\n            if (char != 0) {\\n                bytesString[charCount] = char;\\n                charCount++;\\n            }\\n        }\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint j = 0; j < charCount; j++) {\\n            bytesStringTrimmed[j] = bytesString[j];\\n        }\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    // assumes the data is in position 2\\n    function parseStringData(bytes memory b) pure private returns (string memory) {\\n        uint charCount = 0;\\n        // first parse the charCount out of the data\\n        for (uint i = 32; i < 64; i++) {\\n            charCount <<= 8;\\n            charCount += uint8(b[i]);\\n        }\\n\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint i = 0; i < charCount; i++) {\\n            bytesStringTrimmed[i] = b[i + 64];\\n        }\\n\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    // uses a heuristic to produce a token name from the address\\n    // the heuristic returns the full hex of the address string in upper case\\n    function addressToName(address token) pure private returns (string memory) {\\n        return AddressStringUtil.toAsciiString(token, 40);\\n    }\\n\\n    // uses a heuristic to produce a token symbol from the address\\n    // the heuristic returns the first 6 hex of the address string in upper case\\n    function addressToSymbol(address token) pure private returns (string memory) {\\n        return AddressStringUtil.toAsciiString(token, 6);\\n    }\\n\\n    // calls an external view token contract method that returns a symbol or name, and parses the output into a string\\n    function callAndParseStringReturn(address token, bytes4 selector) view private returns (string memory) {\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(selector));\\n        // if not implemented, or returns empty data, return empty string\\n        if (!success || data.length == 0) {\\n            return \\\"\\\";\\n        }\\n        // bytes32 data always has length 32\\n        if (data.length == 32) {\\n            bytes32 decoded = abi.decode(data, (bytes32));\\n            return bytes32ToString(decoded);\\n        } else if (data.length > 64) {\\n            return abi.decode(data, (string));\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    // attempts to extract the token symbol. if it does not implement symbol, returns a symbol derived from the address\\n    function tokenSymbol(address token) internal view returns (string memory) {\\n        // 0x95d89b41 = bytes4(keccak256(\\\"symbol()\\\"))\\n        string memory symbol = callAndParseStringReturn(token, 0x95d89b41);\\n        if (bytes(symbol).length == 0) {\\n            // fallback to 6 uppercase hex of address\\n            return addressToSymbol(token);\\n        }\\n        return symbol;\\n    }\\n\\n    // attempts to extract the token name. if it does not implement name, returns a name derived from the address\\n    function tokenName(address token) internal view returns (string memory) {\\n        // 0x06fdde03 = bytes4(keccak256(\\\"name()\\\"))\\n        string memory name = callAndParseStringReturn(token, 0x06fdde03);\\n        if (bytes(name).length == 0) {\\n            // fallback to full hex of address\\n            return addressToName(token);\\n        }\\n        return name;\\n    }\\n}\\n\",\"keccak256\":\"0xc1be16d8f1d66356523a20a74ee345a12ce7870276fe1b5470229f59e6ba50be\"},\"contracts/InfiniteApprove.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract InfiniteApprove {\\n  uint256 internal constant INFINITY = uint256(-1);\\n\\n  function infiniteApprove(ERC20 _token, address spender, uint256 amount) internal {\\n    if (_token.allowance(address(this), spender) < amount) {\\n      _token.approve(spender, INFINITY);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x483feb35fe8854b113e1dd463ecc671c8ce0818701ab6096ffa1e5e0cbac11fe\",\"license\":\"MIT\"},\"contracts/farming/IFarmerToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.7.0;\\n\\ninterface IFarmerToken {\\n  function rewardTokens() external view returns (address[] memory);\\n  function rewardWrappers() external view returns (address[] memory);\\n\\n  function rewardBalance(address token, address user) external view returns (uint256);\\n  function getRewardAdapter(address rewardToken) external view returns (address);\\n\\n  function withdrawFrom(address token, address from, address wrapper, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0db3015e186b00f04454222952344187caae283b3cdd919f4d2ebf3a97876dbf\",\"license\":\"MIT\"},\"contracts/farming/IYieldAdapterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.7.0;\\n\\ninterface IYieldAdapterFactory {\\n  function nextToken() external view returns (address);\\n  function nextReward() external view returns (address);\\n\\n  function calculateWrapperAddress(address farmerToken, address rewardToken) external view returns (address calculatedAddress);\\n  function createWrapper(address farmerToken, address rewardToken) external;\\n  function getWrapperAddress(address farmerToken, address rewardToken) external returns (address wrapperAddress);\\n}\\n\",\"keccak256\":\"0x2d298a3b7ff9c5c2e3259c98a89f2a533dc13f6f6c260e8deb68923b038ca6d5\",\"license\":\"MIT\"},\"contracts/farming/YieldAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.5 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/SafeERC20Namer.sol\\\";\\nimport \\\"../tokens/Granularity.sol\\\";\\nimport \\\"../tokens/IWrapped777.sol\\\";\\nimport \\\"../InfiniteApprove.sol\\\";\\nimport \\\"./IFarmerToken.sol\\\";\\nimport \\\"./IYieldAdapterFactory.sol\\\";\\n\\ncontract YieldAdapter is Context, IERC777, IERC20, Granularity, InfiniteApprove {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n  IFarmerToken public immutable farmer;\\n  address public immutable token;\\n  IWrapped777 public immutable wrapper;\\n\\n  string internal _name;\\n  string internal _symbol;\\n\\n  mapping(address => mapping(address => bool)) private _operators;\\n\\n  // ERC20-allowances\\n  mapping (address => mapping (address => uint256)) private _allowances;\\n\\n\\n  // keccak256(\\\"ERC777TokensRecipient\\\")\\n  bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n  constructor() public {\\n    IYieldAdapterFactory factory = IYieldAdapterFactory(msg.sender);\\n    farmer = IFarmerToken(factory.nextToken());\\n    IWrapped777 _wrapper = IWrapped777(factory.nextReward());\\n    ERC20 _token = _wrapper.token();\\n    token = address(_token);\\n    wrapper = _wrapper;\\n\\n    _name = string(abi.encodePacked(SafeERC20Namer.tokenName(address(_token)), \\\"-777 Yield\\\"));\\n    _symbol = string(abi.encodePacked(SafeERC20Namer.tokenSymbol(address(_token)), \\\"777y\\\"));\\n\\n    setDecimals(_token.decimals());\\n\\n    // register interfaces\\n    _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n    _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n  }\\n\\n  /**\\n   * @dev See {IERC777-name}.\\n   */\\n  function name() public view override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {IERC777-symbol}.\\n   */\\n  function symbol() public view override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev See {ERC20-decimals}.\\n   *\\n   * Always returns 18, as per the\\n   * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n   */\\n  function decimals() public pure returns (uint8) {\\n    return 18;\\n  }\\n\\n  /**\\n   * @dev See {IERC777-granularity}.\\n   *\\n   * This implementation always returns `1`.\\n   */\\n  function granularity() public view override returns (uint256) {\\n    return getGranularity();\\n  }\\n\\n  /**\\n   * @dev See {IERC777-totalSupply}.\\n   */\\n  function totalSupply() public view override(IERC20, IERC777) virtual returns (uint256) {\\n    return IERC20(token).balanceOf(address(farmer));\\n  }\\n\\n  function balanceOf(address account) external view override(IERC20, IERC777) virtual returns (uint256) {\\n    return farmer.rewardBalance(token, account);\\n  }\\n\\n  /**\\n   * @dev See {IERC777-send}.\\n   *\\n   * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n   */\\n  function send(address recipient, uint256 amount, bytes memory data) public override  {\\n    _send(_msgSender(), recipient, amount, data, \\\"\\\", true);\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n   * interface if it is a contract.\\n   *\\n   * Also emits a {Sent} event.\\n   */\\n  function transfer(address recipient, uint256 amount) public override returns (bool) {\\n    require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n\\n    address from = _msgSender();\\n\\n    _move(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC777-burn}.\\n   *\\n   * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n   */\\n  function burn(uint256, bytes memory) public override {\\n    revert(\\\"Not supported\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC777-isOperatorFor}.\\n   */\\n  function isOperatorFor(\\n    address operator,\\n    address tokenHolder\\n  ) public view override returns (bool) {\\n    return operator == tokenHolder ||\\n      _operators[tokenHolder][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC777-authorizeOperator}.\\n   */\\n  function authorizeOperator(address operator) public override  {\\n    require(_msgSender() != operator, \\\"ERC777: authorizing self as operator\\\");\\n    _operators[_msgSender()][operator] = true;\\n\\n    emit AuthorizedOperator(operator, _msgSender());\\n  }\\n\\n  /**\\n   * @dev See {IERC777-revokeOperator}.\\n   */\\n  function revokeOperator(address operator) public override  {\\n    require(operator != _msgSender(), \\\"ERC777: revoking self as operator\\\");\\n    delete _operators[_msgSender()][operator];\\n\\n    emit RevokedOperator(operator, _msgSender());\\n  }\\n\\n  /**\\n   * @dev See {IERC777-defaultOperators}.\\n   */\\n  function defaultOperators() public view override returns (address[] memory) {}\\n\\n  /**\\n   * @dev See {IERC777-operatorSend}.\\n   *\\n   * Emits {Sent} and {IERC20-Transfer} events.\\n   */\\n  function operatorSend(\\n      address sender,\\n      address recipient,\\n      uint256 amount,\\n      bytes memory data,\\n      bytes memory operatorData\\n  ) public override {\\n    require(isOperatorFor(_msgSender(), sender), \\\"ERC777: caller is not an operator for holder\\\");\\n    _send(sender, recipient, amount, data, operatorData, true);\\n  }\\n\\n  /**\\n   * @dev See {IERC777-operatorBurn}.\\n   *\\n   * Emits {Burned} and {IERC20-Transfer} events.\\n   */\\n  function operatorBurn(address, uint256, bytes memory, bytes memory) public override {\\n    revert(\\\"Not supported\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   *\\n   * Note that operator and allowance concepts are orthogonal: operators may\\n   * not have allowance, and accounts with allowance may not be operators\\n   * themselves.\\n   */\\n  function allowance(address holder, address spender) public view override returns (uint256) {\\n    return _allowances[holder][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Note that accounts cannot have allowance issued by their operators.\\n   */\\n  function approve(address spender, uint256 value) public override returns (bool) {\\n    address holder = _msgSender();\\n    _approve(holder, spender, value);\\n    return true;\\n  }\\n\\n /**\\n  * @dev See {IERC20-transferFrom}.\\n  *\\n  * Note that operator and allowance concepts are orthogonal: operators cannot\\n  * call `transferFrom` (unless they have allowance), and accounts with\\n  * allowance cannot call `operatorSend` (unless they are operators).\\n  *\\n  * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\\n  */\\n  function transferFrom(address holder, address recipient, uint256 amount) public override returns (bool) {\\n    require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n    require(holder != address(0), \\\"ERC777: transfer from the zero address\\\");\\n\\n    address spender = _msgSender();\\n\\n    _move(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n    _approve(holder, spender, _allowances[holder][spender].sub(amount, \\\"ERC777: transfer amount exceeds allowance\\\"));\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Send tokens\\n   * @param from address token holder address\\n   * @param to address recipient address\\n   * @param amount uint256 amount of tokens to transfer\\n   * @param userData bytes extra information provided by the token holder (if any)\\n   * @param operatorData bytes extra information provided by the operator (if any)\\n   */\\n  function _send(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    bytes memory userData,\\n    bytes memory operatorData,\\n    bool /*requireReceptionAck*/\\n  ) internal {\\n    require(from != address(0), \\\"ERC777: send from the zero address\\\");\\n    require(to != address(0), \\\"ERC777: send to the zero address\\\");\\n\\n    address operator = _msgSender();\\n\\n    _move(operator, from, to, amount, userData, operatorData);\\n  }\\n\\n  function _move(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    bytes memory userData,\\n    bytes memory operatorData\\n  ) internal virtual {\\n    require(amount % getGranularity() == 0, \\\"ERC777: Invalid granularity\\\");\\n\\n    uint256 adjustedAmount = from777to20(amount);\\n    farmer.withdrawFrom(token, from, address(wrapper), adjustedAmount);\\n\\n    uint wrappedAmount = wrapper.gulp(to);\\n    require(wrappedAmount >= amount);\\n\\n    emit Sent(operator, from, to, amount, userData, operatorData);\\n    emit Transfer(from, to, amount);\\n  }\\n\\n  function _approve(address holder, address spender, uint256 value) internal {\\n    // TODO: restore this require statement if this function becomes internal, or is called at a new callsite. It is\\n    // currently unnecessary.\\n    //require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC777: approve to the zero address\\\");\\n\\n    _allowances[holder][spender] = value;\\n    emit Approval(holder, spender, value);\\n  }\\n}\\n\",\"keccak256\":\"0xfbc3db85b28825b7738ec7016ab67164953ec8e12c266f729cf39823e8fb5a49\",\"license\":\"MIT\"},\"contracts/farming/YieldAdapterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./YieldAdapter.sol\\\";\\nimport \\\"./IYieldAdapterFactory.sol\\\";\\n\\n\\ncontract YieldAdapterFactory is IYieldAdapterFactory {\\n  using Address for address;\\n\\n  address private _nextToken;\\n  address private _nextReward;\\n\\n  bytes32 public constant ADAPTER_HASH = keccak256(type(YieldAdapter).creationCode);\\n\\n  event WrapperCreated(address farmerToken, address rewardWrapper);\\n\\n  function calculateWrapperAddress(address farmerToken, address rewardWrapper) external view override returns (address calculatedAddress) {\\n    calculatedAddress = _calculateWrapperAddress(farmerToken, rewardWrapper);\\n  }\\n\\n  function _calculateWrapperAddress(address farmerToken, address rewardWrapper) private view returns (address calculatedAddress) {\\n    calculatedAddress = address(uint(keccak256(abi.encodePacked(\\n      byte(0xff),\\n      address(this),\\n      keccak256(abi.encodePacked(farmerToken, rewardWrapper)),\\n      ADAPTER_HASH\\n    ))));\\n  }\\n\\n  function createWrapper(address farmerToken, address rewardWrapper) external override {\\n    _createWrapper(farmerToken, rewardWrapper);\\n  }\\n\\n  function _createWrapper(address farmerToken, address rewardWrapper) private {\\n    _nextToken = farmerToken;\\n    _nextReward = rewardWrapper;\\n    new YieldAdapter{salt: keccak256(abi.encodePacked(farmerToken, rewardWrapper))}();\\n    _nextToken = address(0);\\n    _nextReward = address(0);\\n\\n    emit WrapperCreated(farmerToken, rewardWrapper);\\n  }\\n\\n  function getWrapperAddress(address farmerToken, address rewardWrapper) external override returns (address wrapperAddress) {\\n    wrapperAddress = _calculateWrapperAddress(farmerToken, rewardWrapper);\\n\\n    if(!wrapperAddress.isContract()) {\\n      _createWrapper(farmerToken, rewardWrapper);\\n      assert(wrapperAddress.isContract());\\n    }\\n  }\\n\\n  function nextToken() external override view returns (address) {\\n    return _nextToken;\\n  }\\n\\n  function nextReward() external override view returns (address) {\\n    return _nextReward;\\n  }\\n}\\n\",\"keccak256\":\"0x5e8b5a769adc4f4a26e0f432ff1dbf38ca8c051274ac655c0c9a3b7d6d12922a\",\"license\":\"MIT\"},\"contracts/tokens/Granularity.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.7.0;\\n\\ncontract Granularity {\\n  uint256 internal _decimals;\\n\\n  function setDecimals(uint decimals) internal {\\n    _decimals = decimals;\\n  }\\n\\n  function getGranularity() internal view returns (uint256) {\\n    return 10 ** (18 - _decimals);\\n  }\\n\\n  function from777to20(uint amount) internal view returns (uint256) {\\n    return amount / getGranularity();\\n  }\\n\\n  function from20to777(uint amount) internal view returns (uint256) {\\n    return amount * getGranularity();\\n  }\\n}\\n\",\"keccak256\":\"0x59ec254a11b53b5b6b2b7914daf8d9ee82cac27300c227a2fb894125a6ba8ee1\"},\"contracts/tokens/IWrapped777.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\n\\ninterface IWrapped777 is IERC777 {\\n  function token() external view returns (ERC20);\\n\\n  function wrap(uint256 amount) external returns (uint256);\\n  function wrapTo(uint256 amount, address recipient) external returns (uint256);\\n  function gulp(address recipient) external returns (uint256);\\n\\n  function unwrap(uint256 amount) external returns (uint256 unwrappedAmount);\\n  function unwrapTo(uint256 amount, address recipient) external returns (uint256 unwrappedAmount);\\n}\\n\",\"keccak256\":\"0xa9c16027288da13c83d0e438d6f91f9b8fa0d44dcf770a7f56e2dc6015dcb44f\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5545,
        "contract": "contracts/farming/YieldAdapterFactory.sol:YieldAdapterFactory",
        "label": "_nextToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5547,
        "contract": "contracts/farming/YieldAdapterFactory.sol:YieldAdapterFactory",
        "label": "_nextReward",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}
{
  "address": "0xE6F3D8Aa1E28220087393aB0f303F25315e771C5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__adapterFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wrapper",
          "type": "address"
        }
      ],
      "name": "WrapperCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WRAPPER_BYTECODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "rewards",
          "type": "address[]"
        }
      ],
      "name": "calculateWrapperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "calculatedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "rewards",
          "type": "address[]"
        }
      ],
      "name": "createWrapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "rewards",
          "type": "address[]"
        }
      ],
      "name": "getWrapperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "wrapperAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldAdapterFactoryAndRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xde572e195926ab373dd161eb62cefeb37b76964abf180b203b233f522fa4a912",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x2E65c74c304703c7D6400A0084550eaB31f7E442",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "5050884",
    "logsBloom": "0x
    "blockHash": "0x3bbdab10d0b0748bb4b1451e9b1dad9d13956384b5209baeebff18b0b062bc47",
    "transactionHash": "0xde572e195926ab373dd161eb62cefeb37b76964abf180b203b233f522fa4a912",
    "logs": [],
    "blockNumber": 22422762,
    "cumulativeGasUsed": "5082612",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8EC19A3d9f8F41b79efc6824be786F9e6E8CE7d6"
  ],
  "solcInputHash": "17ab2317f1c05b7fec7c306769bb6179",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__adapterFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"}],\"name\":\"WrapperCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WRAPPER_BYTECODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"}],\"name\":\"calculateWrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"calculatedAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"}],\"name\":\"createWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"}],\"name\":\"getWrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wrapperAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldAdapterFactoryAndRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farming/FarmerTokenFactory.sol\":\"FarmerTokenFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0xdf8d7d1a119fc0d9f73a5c7a5d21bb0a4e0acb2a61e393c26334d397db628768\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x92bf2cb99019349965d5a05c407edebcc8d02d75b8a663d8a6990024ccdea2c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0x7846aa81baa00557eba6215442eab916bc98f2e692fdc7b8523cf31122dc8e28\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc9e219f9060c261ab6d140f448ccdcb207ce9835f0d2868d2c5d4a93486d2208\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Sender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * {IERC777} Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n *  their own implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Sender {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe4be617d1e043920582d2ec0bc1fe3985a3a49cfedac80c0cf0b9ea5d31044b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/AddressStringUtil.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nlibrary AddressStringUtil {\\n    // converts an address to the uppercase hex string, extracting only len bytes (up to 20, multiple of 2)\\n    function toAsciiString(address addr, uint len) pure internal returns (string memory) {\\n        require(len % 2 == 0 && len > 0 && len <= 40, \\\"AddressStringUtil: INVALID_LEN\\\");\\n\\n        bytes memory s = new bytes(len);\\n        uint addrNum = uint(addr);\\n        for (uint i = 0; i < len / 2; i++) {\\n            // shift right and truncate all but the least significant byte to extract the byte at position 19-i\\n            uint8 b = uint8(addrNum >> (8 * (19 - i)));\\n            // first hex character is the most significant 4 bits\\n            uint8 hi = b >> 4;\\n            // second hex character is the least significant 4 bits\\n            uint8 lo = b - (hi << 4);\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n        return string(s);\\n    }\\n\\n    // hi and lo are only 4 bits and between 0 and 16\\n    // this method converts those values to the unicode/ascii code point for the hex representation\\n    // uses upper case for the characters\\n    function char(uint8 b) pure private returns (byte c) {\\n        if (b < 10) {\\n            return byte(b + 0x30);\\n        } else {\\n            return byte(b + 0x37);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1bb0aa768111c1d4734a4962e653beacf8f830b943d0dc83a0a6ff214762b9b1\"},\"@uniswap/lib/contracts/libraries/SafeERC20Namer.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport './AddressStringUtil.sol';\\n\\n// produces token descriptors from inconsistent or absent ERC20 symbol implementations that can return string or bytes32\\n// this library will always produce a string symbol to represent the token\\nlibrary SafeERC20Namer {\\n    function bytes32ToString(bytes32 x) pure private returns (string memory) {\\n        bytes memory bytesString = new bytes(32);\\n        uint charCount = 0;\\n        for (uint j = 0; j < 32; j++) {\\n            byte char = x[j];\\n            if (char != 0) {\\n                bytesString[charCount] = char;\\n                charCount++;\\n            }\\n        }\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint j = 0; j < charCount; j++) {\\n            bytesStringTrimmed[j] = bytesString[j];\\n        }\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    // assumes the data is in position 2\\n    function parseStringData(bytes memory b) pure private returns (string memory) {\\n        uint charCount = 0;\\n        // first parse the charCount out of the data\\n        for (uint i = 32; i < 64; i++) {\\n            charCount <<= 8;\\n            charCount += uint8(b[i]);\\n        }\\n\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint i = 0; i < charCount; i++) {\\n            bytesStringTrimmed[i] = b[i + 64];\\n        }\\n\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    // uses a heuristic to produce a token name from the address\\n    // the heuristic returns the full hex of the address string in upper case\\n    function addressToName(address token) pure private returns (string memory) {\\n        return AddressStringUtil.toAsciiString(token, 40);\\n    }\\n\\n    // uses a heuristic to produce a token symbol from the address\\n    // the heuristic returns the first 6 hex of the address string in upper case\\n    function addressToSymbol(address token) pure private returns (string memory) {\\n        return AddressStringUtil.toAsciiString(token, 6);\\n    }\\n\\n    // calls an external view token contract method that returns a symbol or name, and parses the output into a string\\n    function callAndParseStringReturn(address token, bytes4 selector) view private returns (string memory) {\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(selector));\\n        // if not implemented, or returns empty data, return empty string\\n        if (!success || data.length == 0) {\\n            return \\\"\\\";\\n        }\\n        // bytes32 data always has length 32\\n        if (data.length == 32) {\\n            bytes32 decoded = abi.decode(data, (bytes32));\\n            return bytes32ToString(decoded);\\n        } else if (data.length > 64) {\\n            return abi.decode(data, (string));\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    // attempts to extract the token symbol. if it does not implement symbol, returns a symbol derived from the address\\n    function tokenSymbol(address token) internal view returns (string memory) {\\n        // 0x95d89b41 = bytes4(keccak256(\\\"symbol()\\\"))\\n        string memory symbol = callAndParseStringReturn(token, 0x95d89b41);\\n        if (bytes(symbol).length == 0) {\\n            // fallback to 6 uppercase hex of address\\n            return addressToSymbol(token);\\n        }\\n        return symbol;\\n    }\\n\\n    // attempts to extract the token name. if it does not implement name, returns a name derived from the address\\n    function tokenName(address token) internal view returns (string memory) {\\n        // 0x06fdde03 = bytes4(keccak256(\\\"name()\\\"))\\n        string memory name = callAndParseStringReturn(token, 0x06fdde03);\\n        if (bytes(name).length == 0) {\\n            // fallback to full hex of address\\n            return addressToName(token);\\n        }\\n        return name;\\n    }\\n}\\n\",\"keccak256\":\"0xc1be16d8f1d66356523a20a74ee345a12ce7870276fe1b5470229f59e6ba50be\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\",\"keccak256\":\"0x0920a26df9837a073c6b24c4e2542d9409c173748e0c6728a1ae39ce5c368899\"},\"contracts/Receiver.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\\\";\\n\\nabstract contract Receiver is IERC777Recipient {\\n  IERC1820Registry constant internal ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n  constructor() internal {\\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777TokensRecipient\\\"), address(this));\\n  }\\n\\n  function _tokensReceived(IERC777 token, address from, uint256 amount, bytes memory data) internal virtual;\\n\\n  function _canReceive(address token) internal virtual {}\\n\\n  function tokensReceived(\\n    address /*operator*/,\\n    address from,\\n    address /*to*/,\\n    uint256 amount,\\n    bytes calldata userData,\\n    bytes calldata /*operatorData*/\\n  ) external override {\\n    _canReceive(msg.sender);\\n\\n    _tokensReceived(IERC777(msg.sender), from, amount, userData);\\n  }\\n}\\n\",\"keccak256\":\"0x1269ee8e3360faa6b252f330c1028b4a8d51ab1591ceb7b1cba6039b7c988904\"},\"contracts/farming/FarmerToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.5 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../tokens/AddressBook.sol\\\";\\nimport \\\"../tokens/Wrapped777.sol\\\";\\nimport \\\"./IFarmerToken.sol\\\";\\nimport \\\"./IFarmerTokenFactory.sol\\\";\\nimport \\\"./IYieldAdapterFactory.sol\\\";\\n\\ncontract FarmerToken is Wrapped777, IFarmerToken {\\n  using SafeMath for uint256;\\n  using SignedSafeMath for int256;\\n\\n  uint256 private constant SCALE = uint256(10) ** 8;\\n\\n  address[] private _rewardTokens;\\n  address[] private _rewardWrappers;\\n  mapping(address => uint256) private scaledRewardPerToken;\\n  mapping(address => uint256) private scaledRemainder;\\n  mapping(address => uint256) private totalRewardBalance;\\n\\n  mapping(address => mapping(address => int256)) private rewardOffset;\\n\\n  IYieldAdapterFactory private immutable adapterFactory;\\n\\n  constructor() public {\\n    address yieldAdapterFactory;\\n    address[] memory rewardWrappers;\\n    (yieldAdapterFactory, rewardWrappers) = IFarmerTokenFactory(msg.sender).yieldAdapterFactoryAndRewards();\\n\\n    IYieldAdapterFactory _adapterFactory = IYieldAdapterFactory(yieldAdapterFactory);\\n    adapterFactory = _adapterFactory;\\n\\n    address[] memory tmpRewardTokens = new address[](rewardWrappers.length);\\n    for (uint8 i = 0; i < rewardWrappers.length; i++) {\\n      address wrapper = rewardWrappers[i];\\n      address token = address(Wrapped777(wrapper).token());\\n      tmpRewardTokens[i] = token;\\n\\n      _adapterFactory.createWrapper(address(this), rewardWrappers[i]);\\n    }\\n\\n    _rewardTokens = tmpRewardTokens;\\n    _rewardWrappers = rewardWrappers;\\n\\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"Farmer777\\\"), address(this));\\n  }\\n\\n  /**\\n   * @return List of ERC20 token addresses handled by the contract\\n   */\\n  function rewardTokens() external view override returns (address[] memory) {\\n    return _rewardTokens;\\n  }\\n\\n  function underlyingTokens() external view override returns (address[] memory) {\\n    address[] memory tokens = new address[](_rewardTokens.length + 1);\\n    tokens[0] = address(token);\\n    for (uint8 i = 0; i < _rewardTokens.length; i++) {\\n      tokens[i + 1] = _rewardTokens[i];\\n    }\\n    return tokens;\\n  }\\n\\n  function balanceOfUnderlying(address _user, address _token) external view override returns (uint256) {\\n    return _token == address(token)\\n      ? from777to20(ERC777WithGranularity.balanceOf(_user))\\n      : scaledRewardBalance(_token, _user).div(SCALE);\\n  }\\n\\n  /**\\n   * @return List of ERC777 wrappers for the reward tokens\\n   */\\n  function rewardWrappers() external view override returns (address[] memory) {\\n    return _rewardWrappers;\\n  }\\n\\n  function getRewardAdapter(address rewardWrapper) external view override returns (address) {\\n    return adapterFactory.calculateWrapperAddress(address(this), rewardWrapper);\\n  }\\n\\n  function _mint(\\n    address account,\\n    uint256 amount,\\n    bytes memory userData,\\n    bytes memory operatorData\\n  ) internal override {\\n    preMint(amount);\\n\\n    ERC777WithGranularity._mint(account, amount, userData, operatorData);\\n\\n    for (uint i = 0; i < _rewardTokens.length; i++) {\\n      address token = _rewardTokens[i];\\n      int256 baseOffset = int256(amount.mul(scaledRewardPerToken[token]));\\n      rewardOffset[token][account] = rewardOffset[token][account].add(baseOffset);\\n    }\\n  }\\n\\n  /**\\n   * @dev Read the balance of a reward token and credit all token holders' reward balance.\\n   *\\n   * @param token Address of an ERC20 reward token contract\\n   */\\n  function harvest(address token) public {\\n    uint256 newTotal = IERC20(token).balanceOf(address(this));\\n    uint256 harvestedTokens = newTotal - totalRewardBalance[token];\\n    totalRewardBalance[token] = newTotal;\\n\\n    uint256 scaledReward = harvestedTokens.mul(SCALE).add(scaledRemainder[token]);\\n\\n    uint256 supply = totalSupply();\\n    scaledRewardPerToken[token] = scaledRewardPerToken[token].add(scaledReward.div(supply));\\n    scaledRemainder[token] = scaledReward.mod(supply);\\n  }\\n\\n  /**\\n   * @dev Unclaimed balance of a reward token, allocated to a token holder\\n   *\\n   * @param token Address of an ERC20 reward token contract\\n   * @param user Token holder\\n   */\\n  function rewardBalance(address token, address user) external view override returns (uint256) {\\n    return scaledRewardBalance(token, user).div(SCALE);\\n  }\\n\\n  function scaledRewardBalance(address token, address user) private view returns (uint256) {\\n    return uint256(int256(scaledRewardPerToken[token].mul(balanceOf(user))).sub(rewardOffset[token][user]));\\n  }\\n\\n  function _move(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    bytes memory userData,\\n    bytes memory operatorData\\n  ) internal override {\\n    uint256 startBalance = balanceOf(from);\\n\\n    for (uint i = 0; i < _rewardTokens.length; i++) {\\n      address token = _rewardTokens[i];\\n\\n      int256 scaledRewardToTransfer = int256(scaledRewardBalance(token, from).mul(amount).div(startBalance));\\n      int256 offset = scaledRewardToTransfer.sub(int256(amount.mul(scaledRewardPerToken[token])));\\n\\n      rewardOffset[token][from] = rewardOffset[token][from].add(offset);\\n      rewardOffset[token][to] = rewardOffset[token][to].sub(offset);\\n    }\\n\\n    ERC777WithGranularity._move(operator, from, to, amount, userData, operatorData);\\n  }\\n\\n  /**\\n   * @dev Withdraws reward tokens allocated to a token holder\\n   *\\n   * @param token Address of an ERC20 reward token contract\\n   * @param amount Amount of tokens to withdraw\\n   */\\n  function withdraw(address token, uint amount) external {\\n    _withdraw(token, msg.sender, msg.sender, amount);\\n  }\\n\\n  /**\\n   * @dev Allows a yieldAdapter to withdraw tokens on a user's behalf\\n   */\\n  function withdrawFrom(address token, address from, address wrapper, uint256 amount) external override {\\n    require(msg.sender == adapterFactory.calculateWrapperAddress(address(this), wrapper));\\n    _withdraw(token, from, wrapper, amount);\\n  }\\n\\n  function _withdraw(address token, address from, address to, uint amount) private {\\n    uint256 scaledAmount = amount.mul(SCALE);\\n    require(scaledAmount <= scaledRewardBalance(token, from)/*, \\\"Insuficent reward\\\"*/);\\n\\n    rewardOffset[token][from] = rewardOffset[token][from].add(int256(scaledAmount));\\n\\n    totalRewardBalance[token] = totalRewardBalance[token].sub(amount);\\n\\n    IERC20(token).transfer(to, amount);\\n  }\\n\\n  function _burn(\\n    address from,\\n    uint256 amount,\\n    bytes memory data,\\n    bytes memory operatorData\\n  ) internal override {\\n    preBurn(amount);\\n\\n    uint256 startingBalance = balanceOf(from);\\n    uint256 newSupply = totalSupply() - amount;\\n\\n    for (uint i = 0; i < _rewardTokens.length; i++) {\\n      address token = _rewardTokens[i];\\n\\n      if (newSupply > 0) {\\n        uint rewardToRedistribute = scaledRewardBalance(token, from).mul(amount).div(startingBalance);\\n        scaledRewardPerToken[token] = scaledRewardPerToken[token].add(rewardToRedistribute.div(newSupply));\\n      } else {\\n        scaledRewardPerToken[token] = 0;\\n        totalRewardBalance[token] = 0;\\n      }\\n    }\\n\\n    ERC777WithGranularity._burn(from, amount, data, operatorData);\\n  }\\n\\n  function preMint(uint256 amount) internal virtual {}\\n\\n  function preBurn(uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xbbe8a0030e42d56041bbffe55c8386751f6f52a2d2d79a8e671787ed146406a8\",\"license\":\"MIT\"},\"contracts/farming/FarmerTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./FarmerToken.sol\\\";\\nimport \\\"./IFarmerTokenFactory.sol\\\";\\n\\n\\ncontract FarmerTokenFactory is IFarmerTokenFactory {\\n  using Address for address;\\n\\n  address private _nextToken;\\n  address[] private _rewards;\\n  address private immutable _adapterFactory;\\n\\n  bytes32 public constant WRAPPER_BYTECODE_HASH = keccak256(type(FarmerToken).creationCode);\\n\\n  event WrapperCreated(address indexed token, address wrapper);\\n\\n  constructor(address __adapterFactory) public {\\n    _adapterFactory = __adapterFactory;\\n  }\\n\\n  function calculateWrapperAddress(address token, address[] memory rewards)\\n    public view returns (address calculatedAddress) {\\n    calculatedAddress = address(uint(keccak256(abi.encodePacked(\\n      byte(0xff),\\n      address(this),\\n      keccak256(abi.encodePacked(token, rewards)),\\n      WRAPPER_BYTECODE_HASH\\n    ))));\\n  }\\n\\n  function createWrapper(address token, address[] memory rewards) public {\\n    _nextToken = token;\\n    _rewards = rewards;\\n\\n    FarmerToken wrapper = new FarmerToken{salt: keccak256(abi.encodePacked(token, rewards))}();\\n\\n    _nextToken = address(0);\\n    _rewards = new address[](0);\\n\\n    emit WrapperCreated(token, address(wrapper));\\n  }\\n\\n  function getWrapperAddress(address token, address[] memory rewards)\\n    public returns (address wrapperAddress) {\\n    wrapperAddress = calculateWrapperAddress(token, rewards);\\n\\n    if(!wrapperAddress.isContract()) {\\n      createWrapper(token, rewards);\\n      assert(wrapperAddress.isContract());\\n    }\\n  }\\n\\n  function nextToken() external override view returns (address) {\\n    return _nextToken;\\n  }\\n\\n  function yieldAdapterFactoryAndRewards() external override view returns(address, address[] memory) {\\n    return (_adapterFactory, _rewards);\\n  }\\n}\\n\",\"keccak256\":\"0x72f838bbd1ff90d6a250716004c09872be7a8781d1e4d3bf5a4efe1e7438c622\",\"license\":\"MIT\"},\"contracts/farming/IFarmerToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.7.0;\\n\\ninterface IFarmerToken {\\n  function rewardTokens() external view returns (address[] memory);\\n  function rewardWrappers() external view returns (address[] memory);\\n\\n  function rewardBalance(address token, address user) external view returns (uint256);\\n  function getRewardAdapter(address rewardToken) external view returns (address);\\n\\n  function withdrawFrom(address token, address from, address wrapper, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0db3015e186b00f04454222952344187caae283b3cdd919f4d2ebf3a97876dbf\",\"license\":\"MIT\"},\"contracts/farming/IFarmerTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.7.0;\\n\\ninterface IFarmerTokenFactory {\\n  function nextToken() external view returns (address);\\n  function yieldAdapterFactoryAndRewards() external view returns(address, address[] memory);\\n}\\n\",\"keccak256\":\"0x41ad8129c140feaa58e9663b185122d20fc134a2ca9fa08dac754a619a32fe0a\",\"license\":\"MIT\"},\"contracts/farming/IYieldAdapterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.7.0;\\n\\ninterface IYieldAdapterFactory {\\n  function nextToken() external view returns (address);\\n  function nextReward() external view returns (address);\\n\\n  function calculateWrapperAddress(address farmerToken, address rewardToken) external view returns (address calculatedAddress);\\n  function createWrapper(address farmerToken, address rewardToken) external;\\n  function getWrapperAddress(address farmerToken, address rewardToken) external returns (address wrapperAddress);\\n}\\n\",\"keccak256\":\"0x2d298a3b7ff9c5c2e3259c98a89f2a533dc13f6f6c260e8deb68923b038ca6d5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC3126.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\n/// @title Defines a standard interface for viewing the addresses and balances of underlying tokens.\\ninterface IERC3126 {\\n  /// @notice Should return a list of addresses for tokens that may be custodied by this contract\\n  /// @return The list of token addresses.\\n  function underlyingTokens() external view returns (address[] memory);\\n\\n  /// @notice Returns the underlying amount of a token that a user holds\\n  /// @param user The user whose underlying balance should be calculated\\n  /// @param token The token whose balance we want.\\n  /// @return The underlying balance of the given token for the user.\\n  function balanceOfUnderlying(address user, address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x66a388b0df5844fd2ec9767daf2e7df02bd662452834b67bb3d2d679b648f06d\",\"license\":\"MIT\"},\"contracts/tokens/AddressBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IAddressBook.sol\\\";\\n\\ncontract AddressBook is Ownable, IAddressBook {\\n  IAddressBook public defaultFactory;\\n\\n  mapping(address => address) public entries;\\n\\n  event EntrySet(address token, address wrapper);\\n  event DefaultFactorySet(address factory);\\n\\n  constructor(IAddressBook _defaultFactory) public {\\n    defaultFactory = _defaultFactory;\\n    emit DefaultFactorySet(address(defaultFactory));\\n  }\\n\\n  function calculateWrapperAddress(address token) external view override returns (address calculatedAddress) {\\n    if (entries[token] != address(0)) {\\n      return entries[token];\\n    }\\n\\n    return defaultFactory.calculateWrapperAddress(token);\\n  }\\n\\n  function getWrapperAddress(address token) external override returns (address wrapperAddress) {\\n    if (entries[token] != address(0)) {\\n      return entries[token];\\n    }\\n\\n    return defaultFactory.getWrapperAddress(token);\\n  }\\n\\n  function setEntry(address token, address wrapper) external onlyOwner {\\n    entries[token] = wrapper;\\n    emit EntrySet(token, wrapper);\\n  }\\n\\n  function setDefaultFactory(address newFactory) external onlyOwner {\\n    defaultFactory = IAddressBook(newFactory);\\n    emit DefaultFactorySet(newFactory);\\n  }\\n}\\n\",\"keccak256\":\"0x4c0e0cc00723c142f8ad93705f51c7deb0432f9ee5a58cbcbfab1c8889c5b0d2\",\"license\":\"MIT\"},\"contracts/tokens/ERC777WithGranularity.sol\":{\"content\":\"\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Sender.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\\\";\\nimport \\\"./Granularity.sol\\\";\\n\\n/**\\n * @dev Copies the OpenZeppelin ERC777, but adds support for Granularity.\\n */\\ncontract ERC777WithGranularity is Context, IERC777, IERC20, Granularity {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string internal _name;\\n    string internal _symbol;\\n\\n    // We inline the result of the following hashes because Solidity doesn't resolve them at compile time.\\n    // See https://github.com/ethereum/solidity/issues/4024.\\n\\n    // keccak256(\\\"ERC777TokensSender\\\")\\n    bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH =\\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\\n\\n    // keccak256(\\\"ERC777TokensRecipient\\\")\\n    bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH =\\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\\n\\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    // mapping(address => bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address => mapping(address => bool)) private _operators;\\n    // mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    constructor(\\n        // string memory name,\\n        // string memory symbol,\\n        // address[] memory defaultOperators\\n    ) public {\\n        // _name = name;\\n        // _symbol = symbol;\\n\\n        // _defaultOperatorsArray = defaultOperators;\\n        // for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\\n        //     _defaultOperators[_defaultOperatorsArray[i]] = true;\\n        // }\\n\\n        // register interfaces\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC777-name}.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-symbol}.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-decimals}.\\n     *\\n     * Always returns 18, as per the\\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n     */\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-granularity}.\\n     *\\n     * This implementation always returns `1`.\\n     */\\n    function granularity() public view override returns (uint256) {\\n        return getGranularity();\\n    }\\n\\n    /**\\n     * @dev See {IERC777-totalSupply}.\\n     */\\n    function totalSupply() public view override(IERC20, IERC777) virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\\n     */\\n    function balanceOf(address tokenHolder) public view override(IERC20, IERC777) virtual returns (uint256) {\\n        return _balances[tokenHolder];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-send}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function send(address recipient, uint256 amount, bytes memory data) public override  {\\n        _send(_msgSender(), recipient, amount, data, \\\"\\\", true);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n     * interface if it is a contract.\\n     *\\n     * Also emits a {Sent} event.\\n     */\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        address from = _msgSender();\\n\\n        _callTokensToSend(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _callTokensReceived(from, from, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-burn}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function burn(uint256 amount, bytes memory data) public override  {\\n        _burn(_msgSender(), amount, data, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC777-isOperatorFor}.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        address tokenHolder\\n    ) public view override returns (bool) {\\n        return operator == tokenHolder ||\\n            // (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\\n            _operators[tokenHolder][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-authorizeOperator}.\\n     */\\n    function authorizeOperator(address operator) public override  {\\n        require(_msgSender() != operator, \\\"SELF-OPER\\\");\\n\\n        // if (_defaultOperators[operator]) {\\n        //     delete _revokedDefaultOperators[_msgSender()][operator];\\n        // } else {\\n            _operators[_msgSender()][operator] = true;\\n        // }\\n\\n        emit AuthorizedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-revokeOperator}.\\n     */\\n    function revokeOperator(address operator) public override  {\\n        require(operator != _msgSender(), \\\"SELF-OPER\\\");\\n\\n        // if (_defaultOperators[operator]) {\\n        //     _revokedDefaultOperators[_msgSender()][operator] = true;\\n        // } else {\\n            delete _operators[_msgSender()][operator];\\n        // }\\n\\n        emit RevokedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-defaultOperators}.\\n     */\\n    function defaultOperators() public view override returns (address[] memory operators) {\\n        // return _defaultOperatorsArray;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorSend}.\\n     *\\n     * Emits {Sent} and {IERC20-Transfer} events.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n    public override\\n    {\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777 NO-OPER\\\");\\n        _send(sender, recipient, amount, data, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorBurn}.\\n     *\\n     * Emits {Burned} and {IERC20-Transfer} events.\\n     */\\n    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public override {\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777 NO-OPER\\\");\\n        _burn(account, amount, data, operatorData);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators may\\n     * not have allowance, and accounts with allowance may not be operators\\n     * themselves.\\n     */\\n    function allowance(address holder, address spender) public view override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function approve(address spender, uint256 value) public override returns (bool) {\\n        address holder = _msgSender();\\n        _approve(holder, spender, value);\\n        return true;\\n    }\\n\\n   /**\\n    * @dev See {IERC20-transferFrom}.\\n    *\\n    * Note that operator and allowance concepts are orthogonal: operators cannot\\n    * call `transferFrom` (unless they have allowance), and accounts with\\n    * allowance cannot call `operatorSend` (unless they are operators).\\n    *\\n    * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\\n    */\\n    function transferFrom(address holder, address recipient, uint256 amount) public override returns (bool) {\\n        address spender = _msgSender();\\n\\n        _callTokensToSend(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n        _approve(holder, spender, _allowances[holder][spender].sub(amount, \\\"ERC777: OVER-ALLOW\\\"));\\n\\n        _callTokensReceived(spender, holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n    internal virtual\\n    {\\n        require(account != address(0), \\\"ERC777: MINT-ZERO\\\");\\n        require(amount % getGranularity() == 0, \\\"ERC777: BAD-GRAN\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, amount);\\n\\n        // Update state variables\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, false);\\n\\n        emit Minted(operator, account, amount, userData, operatorData);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Send tokens\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _send(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        internal\\n    {\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\n\\n        _move(operator, from, to, amount, userData, operatorData);\\n\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    /**\\n     * @dev Burn tokens\\n     * @param from address token holder address\\n     * @param amount uint256 amount of tokens to burn\\n     * @param data bytes extra information provided by the token holder\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n        internal virtual\\n    {\\n        require(from != address(0), \\\"ERC777: BURN-ZERO\\\");\\n        require(amount % getGranularity() == 0, \\\"ERC777: BAD-GRAN\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), amount);\\n\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\n\\n        // Update state variables\\n        _balances[from] = _balances[from].sub(amount, \\\"ERC777: BURN-EXCESS\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n\\n        emit Burned(operator, from, amount, data, operatorData);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function _move(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        internal virtual\\n    {\\n        require(from != address(0), \\\"ERC777: SEND-ZERO\\\");\\n        require(to != address(0), \\\"ERC777: SEND-ZERO\\\");\\n        require(amount % getGranularity() == 0, \\\"ERC777: BAD-GRAN\\\");\\n        _beforeTokenTransfer(operator, from, to, amount);\\n\\n        _balances[from] = _balances[from].sub(amount, \\\"ERC777: SEND-EXCESS\\\");\\n        _balances[to] = _balances[to].add(amount);\\n\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    function _approve(address holder, address spender, uint256 value) internal {\\n        // TODO: restore this require statement if this function becomes internal, or is called at a new callsite. It is\\n        // currently unnecessary.\\n        //require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n\\n        _allowances[holder][spender] = value;\\n        emit Approval(holder, spender, value);\\n    }\\n\\n    /**\\n     * @dev Call from.tokensToSend() if the interface is registered\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        private\\n    {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\\n     * tokensReceived() was not registered for the recipient\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        private\\n    {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\n        } else if (requireReceptionAck) {\\n            require(!to.isContract(), \\\"NOT ERC777TokensRecipient\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes\\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - when `from` is zero, `tokenId` will be minted for `to`.\\n     * - when `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address operator, address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca1e3de825745eda6d1e54a4b4b08c009863865935620eb4f34957af8b243390\"},\"contracts/tokens/Granularity.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.7.0;\\n\\ncontract Granularity {\\n  uint256 internal _decimals;\\n\\n  function setDecimals(uint decimals) internal {\\n    _decimals = decimals;\\n  }\\n\\n  function getGranularity() internal view returns (uint256) {\\n    return 10 ** (18 - _decimals);\\n  }\\n\\n  function from777to20(uint amount) internal view returns (uint256) {\\n    return amount / getGranularity();\\n  }\\n\\n  function from20to777(uint amount) internal view returns (uint256) {\\n    return amount * getGranularity();\\n  }\\n}\\n\",\"keccak256\":\"0x59ec254a11b53b5b6b2b7914daf8d9ee82cac27300c227a2fb894125a6ba8ee1\"},\"contracts/tokens/IAddressBook.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.7.0;\\n\\ninterface IAddressBook {\\n  function getWrapperAddress(address token) external returns (address wrapperAddress);\\n\\n  function calculateWrapperAddress(address token) external view returns (address calculatedAddress);\\n}\\n\",\"keccak256\":\"0xd6b7b879318d680b3c3cf35d26dc8701ba2dc3f2595d7e690349ef4cbaf77800\"},\"contracts/tokens/IPermit.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.7.0;\\n\\ninterface IPermit {\\n  // ERC-2612 permit\\n  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n  // Dai Permit\\n  function permit(address holder, address spender, uint256 nonce, uint256 expiry,\\n                  bool allowed, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0x1585af7d08b374bc0d5e8c7fb767107720e89e2dec2251e7bd59c9c6eed021ba\"},\"contracts/tokens/IWrapped777.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\n\\ninterface IWrapped777 is IERC777 {\\n  function token() external view returns (ERC20);\\n\\n  function wrap(uint256 amount) external returns (uint256);\\n  function wrapTo(uint256 amount, address recipient) external returns (uint256);\\n  function gulp(address recipient) external returns (uint256);\\n\\n  function unwrap(uint256 amount) external returns (uint256 unwrappedAmount);\\n  function unwrapTo(uint256 amount, address recipient) external returns (uint256 unwrappedAmount);\\n}\\n\",\"keccak256\":\"0xa9c16027288da13c83d0e438d6f91f9b8fa0d44dcf770a7f56e2dc6015dcb44f\"},\"contracts/tokens/IWrapperFactory.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.7.0;\\n\\ninterface IWrapperFactory {\\n  function nextToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x26b1f8f7a64441ed362f7d3111461593fdf6298a9ca50d423f7c0a2d5686b767\"},\"contracts/tokens/Wrapped777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/SafeERC20Namer.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../interfaces/IERC3126.sol\\\";\\nimport \\\"../Receiver.sol\\\";\\nimport \\\"./ERC777WithGranularity.sol\\\";\\nimport \\\"./IWrapperFactory.sol\\\";\\nimport \\\"./IWrapped777.sol\\\";\\nimport \\\"./IPermit.sol\\\";\\n\\ncontract Wrapped777 is ERC777WithGranularity, Receiver, IWrapped777, IERC3126 {\\n  using SafeMath for uint256;\\n\\n  string public constant WRAPPER_VERSION = \\\"0.2.0\\\";\\n\\n  ERC20 public immutable override token;\\n\\n  event FlashMint(address indexed target, uint256 amount);\\n\\n  ////////// For permit:\\n  bytes32 public immutable DOMAIN_SEPARATOR;\\n  // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n  bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n  mapping(address => uint) public nonces;\\n\\n  constructor() public {\\n    address _token = IWrapperFactory(msg.sender).nextToken();\\n    token = ERC20(_token);\\n\\n    _name = string(abi.encodePacked(SafeERC20Namer.tokenName(_token), \\\"-777\\\"));\\n    _symbol = string(abi.encodePacked(SafeERC20Namer.tokenSymbol(_token), \\\"777\\\"));\\n\\n    setDecimals(ERC20(_token).decimals());\\n\\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"Wrapped777\\\"), address(this));\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n        keccak256(bytes(_name)),\\n        keccak256(bytes('1')),\\n        chainId(),\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  function underlyingTokens() external view virtual override returns (address[] memory) {\\n    address[] memory tokens = new address[](1);\\n    tokens[0] = address(token);\\n    return tokens;\\n  }\\n\\n  function balanceOfUnderlying(address _user, address _token) external view virtual override returns (uint256) {\\n    return _token == address(token) ? from777to20(ERC777WithGranularity.balanceOf(_user)) : 0;\\n  }\\n\\n  function totalSupply() public view override(ERC777WithGranularity, IERC777) returns (uint256) {\\n    return ERC777WithGranularity.totalSupply();\\n  }\\n\\n  function balanceOf(address tokenHolder) public view override(ERC777WithGranularity, IERC777) returns (uint256) {\\n    return ERC777WithGranularity.balanceOf(tokenHolder);\\n  }\\n\\n  /**\\n   * @dev Wraps ERC-20 tokens from the caller and sends wrapped tokens to the caller\\n   *\\n   * @param amount Number of tokens to wrap\\n   * @return Amount of wrapper tokens minted (same as the input amount if the token has 18 decimals)\\n   */\\n  function wrap(uint256 amount) external override returns (uint256) {\\n    address sender = _msgSender();\\n    return _wrap(sender, amount);\\n  }\\n\\n  /**\\n   * @dev Same as wrap(), but approves the token transfer using a ERC2612 permit signature\\n   *\\n   * @param value Number of tokens to wrap\\n   * @return Amount of wrapper tokens minted (same as the input amount if the token has 18 decimals)\\n   */\\n  function wrapWithPermit(uint value, uint deadline, uint256 nonce, uint8 v, bytes32 r, bytes32 s) external returns (uint256) {\\n    address sender = _msgSender();\\n    try IPermit(address(token)).permit(sender, address(this), value, deadline, v, r, s) {\\n    } catch {\\n      // Dai\\n      IPermit(address(token)).permit(sender, address(this), nonce, deadline, true /* allowed */, v, r, s);\\n    }\\n\\n    return _wrap(sender, value);\\n  }\\n\\n  function _wrap(address sender, uint256 amount) private returns (uint256 outputAmount) {\\n    TransferHelper.safeTransferFrom(address(token), sender, address(this), amount);\\n\\n    outputAmount = from20to777(amount);\\n    _mint(sender, outputAmount, \\\"\\\", \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same as wrap(), but allows setting a recipient address\\n   *\\n   * @param amount Number of tokens to wrap\\n   * @param recipient Address to receive tokens\\n   * @return outputAmount Amount of wrapper tokens minted (same as the input amount if the token has 18 decimals)\\n   */\\n  function wrapTo(uint256 amount, address recipient) external override returns (uint256 outputAmount) {\\n    address sender = _msgSender();\\n    TransferHelper.safeTransferFrom(address(token), sender, address(this), amount);\\n\\n    outputAmount = from20to777(amount);\\n    _mint(recipient, outputAmount, \\\"\\\", \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same as wrap(), but allows setting a recipient address\\n   *\\n   * @param amount Number of tokens to wrap\\n   * @param recipient Address to receive tokens\\n   * @return amount Amount of wrapper tokens minted (same as the input amount if the token has 18 decimals)\\n   */\\n  function gulp(address recipient) external override returns (uint256 amount) {\\n    amount = from20to777(token.balanceOf(address(this))).sub(ERC777WithGranularity.totalSupply());\\n    _mint(recipient, amount, \\\"\\\", \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Unwraps tokens from the sender, returns them the inner ERC-20\\n   *\\n   * @param amount Number of tokens to unwrap\\n   * @return unwrappedAmount Amount of unwrapped tokens (same as the input amount if the token has 18 decimals)\\n   */\\n  function unwrap(uint256 amount) external override returns (uint256 unwrappedAmount) {\\n    address sender = _msgSender();\\n    return _unwrap(amount, sender, sender);\\n  }\\n\\n\\n  /**\\n   * @dev Same as unwrap(), but sends unwrapped tokens to separate address\\n   *\\n   * @param amount Number of tokens to unwrap\\n   * @param recipient Address to receive the tokens\\n   * @return unwrappedAmount Amount of unwrapped tokens (same as the input amount if the token has 18 decimals)\\n   */\\n  function unwrapTo(uint256 amount, address recipient) external override returns (uint256 unwrappedAmount) {\\n    return _unwrap(amount, _msgSender(), recipient);\\n  }\\n\\n  function _unwrap(uint256 amount, address from, address recipient) private returns (uint256 unwrappedAmount) {\\n    _burn(from, amount, \\\"\\\", \\\"\\\");\\n\\n    unwrappedAmount = from777to20(amount);\\n    TransferHelper.safeTransfer(address(token), recipient, unwrappedAmount);\\n  }\\n\\n  function _tokensReceived(IERC777 _token, address from, uint256 amount, bytes memory) internal override {\\n    if (address(_token) == address(this)) {\\n      tryTokenUpgrade(address(_token), from, amount);\\n    } else {\\n      _unwrap(amount, address(this), from);\\n    }\\n  }\\n\\n  /**\\n   * @dev Mints an unbounded amount of wrapper tokens to the target. Tokens must be repaid by the\\n   * end of the transaction, or it will revert.\\n   *\\n   * @param target Address to receive the tokens (must be a ERC777Recipient)\\n   * @param amount Number of tokens to mint\\n   * @param data Arbitrary data to pass to the receive hook\\n   */\\n  function flashMint(address target, uint256 amount, bytes calldata data) external {\\n    _mint(target, amount, data, '');\\n    _burn(target, amount, data, '');\\n\\n    emit FlashMint(target, amount);\\n  }\\n\\n  function tryTokenUpgrade(address oldWrapper, address sender, uint256 amount) private {\\n    if (address(Wrapped777(oldWrapper).token()) != address(token)) {\\n      revert(\\\"INVALID\\\");\\n    }\\n\\n    uint256 startingBalance = token.balanceOf(address(this));\\n\\n    TransferHelper.safeTransfer(oldWrapper, oldWrapper, amount);\\n\\n    uint256 endBalance = token.balanceOf(address(this));\\n\\n    uint256 numUpgradedTokens = from20to777(endBalance.sub(startingBalance));\\n    require(numUpgradedTokens > 0, \\\"NO-UPGRADE\\\");\\n\\n    _mint(sender, numUpgradedTokens, \\\"\\\", \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev ERC2612 permit\\n   */\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n    require(deadline >= block.timestamp, 'EXPIRED');\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        '\\\\x19\\\\x01',\\n        DOMAIN_SEPARATOR,\\n        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n      )\\n    );\\n    address recoveredAddress = ecrecover(digest, v, r, s);\\n    require(recoveredAddress != address(0) && recoveredAddress == owner, 'Permit INVALID_SIG');\\n    _approve(owner, spender, value);\\n  }\\n\\n  function chainId() private pure returns (uint _chainId) {\\n    assembly {\\n      _chainId := chainid()\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xdcb7ffaa8c6b85fb4c25165837eef3b0d48f37b3c2ef5f393b9695e9b2d7b47a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051615ac6380380615ac68339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b0316615a5f610067600039806103d95250615a5f6000f3fe60806040523480156200001157600080fd5b50600436106200006a5760003560e01c80631d101777146200006f578063287878f1146200008b5780632c05e45814620001605780638491830114620001d05780639499ac541462000289578063b3e32ad71462000293575b600080fd5b620000796200034e565b60408051918252519081900360200190f35b6200014460048036036040811015620000a357600080fd5b6001600160a01b038235169190810190604081016020820135640100000000811115620000cf57600080fd5b820183602082011115620000e257600080fd5b803590602001918460208302840111640100000000831117156200010557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506200037d945050505050565b604080516001600160a01b039092168252519081900360200190f35b6200016a620003d3565b60405180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015620001bb578181015183820152602001620001a1565b50505050905001935050505060405180910390f35b6200014460048036036040811015620001e857600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156200021457600080fd5b8201836020820111156200022757600080fd5b803590602001918460208302840111640100000000831117156200024a57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062000460945050505050565b6200014462000558565b6200034c60048036036040811015620002ab57600080fd5b6001600160a01b038235169190810190604081016020820135640100000000811115620002d757600080fd5b820183602082011115620002ea57600080fd5b803590602001918460208302840111640100000000831117156200030d57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062000567945050505050565b005b6040516200035f60208201620006b1565b6020820181038252601f19601f820116604052508051906020012081565b60006200038b838362000460565b9050620003a1816001600160a01b0316620006ab565b620003cd57620003b2838362000567565b620003c6816001600160a01b0316620006ab565b620003cd57fe5b92915050565b600060607f00000000000000000000000000000000000000000000000000000000000000006001808054806020026020016040519081016040528092919081815260200182805480156200045157602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000432575b50505050509050915091509091565b600060ff60f81b30848460405160200180836001600160a01b031660601b8152601401828051906020019060200280838360005b83811015620004ae57818101518382015260200162000494565b50505050905001925050506040516020818303038152906040528051906020012060405180602001620004e190620006b1565b6020820181038252601f19601f820116604052508051906020012060405160200180856001600160f81b0319168152600101846001600160a01b031660601b81526014018381526020018281526020019450505050506040516020818303038152906040528051906020012060001c905092915050565b6000546001600160a01b031690565b600080546001600160a01b0319166001600160a01b038416179055805162000597906001906020840190620006bf565b506000828260405160200180836001600160a01b031660601b8152601401828051906020019060200280838360005b83811015620005e0578181015183820152602001620005c6565b5050505090500192505050604051602081830303815290604052805190602001206040516200060f90620006b1565b8190604051809103906000f590508015801562000630573d6000803e3d6000fd5b50600080546001600160a01b03191681556040805191825260208201908190529051919250620006649160019190620006bf565b50604080516001600160a01b0383811682529151918516917feca658fb45a042c9a15f37be8099dbc152e104331b942dc253680509f9727d079181900360200190a2505050565b3b151590565b6152df806200074b83390190565b82805482825590600052602060002090810192821562000717579160200282015b828111156200071757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620006e0565b506200072592915062000729565b5090565b5b80821115620007255780546001600160a01b03191681556001016200072a56fe60e06040523480156200001157600080fd5b50604080516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce2177054602483015260448201529051600080516020620052bf833981519152916329965a1d91606480830192600092919082900301818387803b1580156200008d57600080fd5b505af1158015620000a2573d6000803e3d6000fd5b5050604080516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a602483015260448201529051600080516020620052bf83398151915293506329965a1d9250606480830192600092919082900301818387803b1580156200012157600080fd5b505af115801562000136573d6000803e3d6000fd5b5050604080516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b602483015260448201529051600080516020620052bf83398151915293506329965a1d9250606480830192600092919082900301818387803b158015620001b557600080fd5b505af1158015620001ca573d6000803e3d6000fd5b505050506000336001600160a01b0316639499ac546040518163ffffffff1660e01b815260040160206040518083038186803b1580156200020a57600080fd5b505afa1580156200021f573d6000803e3d6000fd5b505050506040513d60208110156200023657600080fd5b5051606081901b6001600160601b031916608052905062000263816200096b602090811b62001f6317901c565b6040516020018082805190602001908083835b60208310620002975780518252601f19909201916020918201910162000276565b51815160209384036101000a6000190180199092169116179052632d37373760e01b9190930190815260408051808303601b19018152600490920190528051620002eb955060039450920191905062000f38565b506200030281620009aa60201b62001f941760201c565b6040516020018082805190602001908083835b60208310620003365780518252601f19909201916020918201910162000315565b51815160209384036101000a60001901801990921691161790526237373760e81b9190930190815260408051808303601c1901815260039092019052805162000389955060049450920191905062000f38565b50620003ff816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620003c857600080fd5b505afa158015620003dd573d6000803e3d6000fd5b505050506040513d6020811015620003f457600080fd5b505160ff16620009d8565b604080516329965a1d60e01b815230600482018190527f25d236b07c82ae6ff3fc3a505a958b70ece0b81ba97eb926f710865e5b69a2cd602483015260448201529051600080516020620052bf833981519152916329965a1d91606480830192600092919082900301818387803b1580156200047a57600080fd5b505af11580156200048f573d6000803e3d6000fd5b505050507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60036040518082805460018160011615610100020316600290048015620005155780601f10620004f257610100808354040283529182019162000515565b820191906000526020600020905b81548152906001019060200180831162000500575b50506040805191829003822082820190915260018252603160f81b60209092019190915291507fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6905062000568620009dd565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b03168152602001955050505050506040516020818303038152906040528051906020012060a081815250505060006060336001600160a01b0316632c05e4586040518163ffffffff1660e01b815260040160006040518083038186803b158015620005fa57600080fd5b505afa1580156200060f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160409081528110156200063957600080fd5b8151602083018051604051929492938301929190846401000000008211156200066157600080fd5b9083019060208201858111156200067757600080fd5b82518660208202830111640100000000821117156200069557600080fd5b82525081516020918201928201910280838360005b83811015620006c4578181015183820152602001620006aa565b505050509190910160405250505050606082811b6001600160601b03191660c052815192945090925083916001600160401b03811180156200070557600080fd5b5060405190808252806020026020018201604052801562000730578160200160208202803683370190505b50905060005b83518160ff161015620008a0576000848260ff16815181106200075557fe5b602002602001015190506000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200079b57600080fd5b505afa158015620007b0573d6000803e3d6000fd5b505050506040513d6020811015620007c757600080fd5b505184519091508190859060ff8616908110620007e057fe5b60200260200101906001600160a01b031690816001600160a01b031681525050846001600160a01b031663db426e2d30888660ff16815181106200082057fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b1580156200087857600080fd5b505af11580156200088d573d6000803e3d6000fd5b5050600190940193506200073692505050565b508051620008b690600990602084019062000fbd565b508251620008cc90600a90602086019062000fbd565b50604080516329965a1d60e01b815230600482018190527f71a86b72b6364f469fa6d4a1d52d0b4bac87d31788cc6601258e8eb3f51dc953602483015260448201529051600080516020620052bf833981519152916329965a1d91606480830192600092919082900301818387803b1580156200094857600080fd5b505af11580156200095d573d6000803e3d6000fd5b50505050505050506200105b565b60608062000981836306fdde0360e01b620009e1565b9050805160001415620009a257620009998362000c21565b915050620009a5565b90505b919050565b606080620009c0836395d89b4160e01b620009e1565b9050805160001415620009a257620009998362000c3b565b600055565b4690565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b031985161781529151815160609360009385936001600160a01b03891693919290918291908083835b6020831062000a4f5780518252601f19909201916020918201910162000a2e565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811462000ab1576040519150601f19603f3d011682016040523d82523d6000602084013e62000ab6565b606091505b509150915081158062000ac857508051155b1562000ae857604051806020016040528060008152509250505062000c1b565b80516020141562000b2557600081806020019051602081101562000b0b57600080fd5b5051905062000b1a8162000c55565b935050505062000c1b565b60408151111562000c065780806020019051602081101562000b4657600080fd5b810190808051604051939291908464010000000082111562000b6757600080fd5b90830190602082018581111562000b7d57600080fd5b825164010000000081118282018810171562000b9857600080fd5b82525081516020918201929091019080838360005b8381101562000bc757818101518382015260200162000bad565b50505050905090810190601f16801562000bf55780820380516001836020036101000a031916815260200191505b506040525050509250505062000c1b565b60405180602001604052806000815250925050505b92915050565b6060620009a282602862000d9e60201b62001fbd1760201c565b6060620009a282600662000d9e60201b62001fbd1760201c565b6040805160208082528183019092526060918291906020820181803683370190505090506000805b602081101562000cfb57600085826020811062000c9657fe5b1a60f81b90507fff0000000000000000000000000000000000000000000000000000000000000081161562000cf1578084848151811062000cd357fe5b60200101906001600160f81b031916908160001a9053506001909201915b5060010162000c7d565b506060816001600160401b038111801562000d1557600080fd5b506040519080825280601f01601f19166020018201604052801562000d41576020820181803683370190505b50905060005b8281101562000d955783818151811062000d5d57fe5b602001015160f81c60f81b82828151811062000d7557fe5b60200101906001600160f81b031916908160001a90535060010162000d47565b50949350505050565b60606002820615801562000db25750600082115b801562000dc0575060288211155b62000e12576040805162461bcd60e51b815260206004820152601e60248201527f41646472657373537472696e675574696c3a20494e56414c49445f4c454e0000604482015290519081900360640190fd5b6060826001600160401b038111801562000e2b57600080fd5b506040519080825280601f01601f19166020018201604052801562000e57576020820181803683370190505b5090506001600160a01b03841660005b6002850481101562000f0357600860138290030282901c600f600482901c1660f08216820362000e978262000f0d565b86856002028151811062000ea757fe5b60200101906001600160f81b031916908160001a90535062000ec98162000f0d565b86856002026001018151811062000edc57fe5b60200101906001600160f81b031916908160001a905350506001909201915062000e679050565b5090949350505050565b6000600a8260ff16101562000f2a57506030810160f81b620009a5565b506037810160f81b620009a5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000f7b57805160ff191683800117855562000fab565b8280016001018555821562000fab579182015b8281111562000fab57825182559160200191906001019062000f8e565b5062000fb992915062001023565b5090565b82805482825590600052602060002090810192821562001015579160200282015b828111156200101557825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000fde565b5062000fb99291506200103a565b5b8082111562000fb9576000815560010162001024565b5b8082111562000fb95780546001600160a01b03191681556001016200103b565b60805160601c60a05160c05160601c6141f0620010cf6000398061100b528061118d5250806112fb5280611bd1525080610f74528061126d52806114ed52806115a0528061163e52806119d95280611ec05280612eb95280612f1d528061322552806132fb52806133a352506141f06000f3fe608060405234801561001057600080fd5b50600436106102525760003560e01c80637ecebe0011610146578063d505accf116100c3578063ed9a5f5111610087578063ed9a5f5114610ac0578063f3fef3a314610ac8578063fad8b32a14610af4578063fc0c546a14610b1a578063fc673c4f14610b22578063fe9d930314610c6057610252565b8063d505accf146109d9578063d95b637114610a2a578063dd62ed3e14610a58578063de0e9a3e14610a86578063ea598cb014610aa357610252565b8063a9059cbb1161010a578063a9059cbb14610967578063aca2efc714610993578063bbe3493e146109c1578063bd27dc9f146109c9578063c2b18aa0146109d157610252565b80637ecebe00146108345780638c28cbe81461085a578063959b8c3f1461088057806395d89b41146108a65780639bd9bbc6146108ae57610252565b806326599850116101d4578063556f0dc711610198578063556f0dc7146106535780635dbd60591461065b57806362ad1b831461068757806370a08231146107d0578063796ab980146107f657610252565b8063265998501461057657806330adf81f146105a2578063313ce567146105aa5780633644e515146105c85780633ea21465146105d057610252565b806318160ddd1161021b57806318160ddd1461047a5780631be655e81461049457806321cde2b6146104c257806323b872dd14610504578063264413181461053a57610252565b806223de291461025757806306e485381461033f57806306fdde0314610397578063095ea7b3146104145780630e5c011e14610454575b600080fd5b61033d600480360360c081101561026d57600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a081016080820135600160201b8111156102af57600080fd5b8201836020820111156102c157600080fd5b803590602001918460018302840111600160201b831117156102e257600080fd5b919390929091602081019035600160201b8111156102ff57600080fd5b82018360208201111561031157600080fd5b803590602001918460018302840111600160201b8311171561033257600080fd5b509092509050610d0b565b005b610347610d60565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561038357818101518382015260200161036b565b505050509050019250505060405180910390f35b61039f610d65565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103d95781810151838201526020016103c1565b50505050905090810190601f1680156104065780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104406004803603604081101561042a57600080fd5b506001600160a01b038135169060200135610dfb565b604080519115158252519081900360200190f35b61033d6004803603602081101561046a57600080fd5b50356001600160a01b0316610e1f565b610482610f61565b60408051918252519081900360200190f35b610482600480360360408110156104aa57600080fd5b506001600160a01b0381358116916020013516610f70565b6104e8600480360360208110156104d857600080fd5b50356001600160a01b0316610fe0565b604080516001600160a01b039092168252519081900360200190f35b6104406004803603606081101561051a57600080fd5b506001600160a01b03813581169160208101359091169060400135611085565b61033d6004803603608081101561055057600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013561118b565b6104826004803603604081101561058c57600080fd5b50803590602001356001600160a01b031661125b565b6104826112d0565b6105b26112f4565b6040805160ff9092168252519081900360200190f35b6104826112f9565b61033d600480360360608110156105e657600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561061557600080fd5b82018360208201111561062757600080fd5b803590602001918460018302840111600160201b8311171561064857600080fd5b50909250905061131d565b610482611400565b6104826004803603604081101561067157600080fd5b50803590602001356001600160a01b031661140a565b61033d600480360360a081101561069d57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156106d757600080fd5b8201836020820111156106e957600080fd5b803590602001918460018302840111600160201b8311171561070a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561075c57600080fd5b82018360208201111561076e57600080fd5b803590602001918460018302840111600160201b8311171561078f57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061141e945050505050565b610482600480360360208110156107e657600080fd5b50356001600160a01b0316611487565b610482600480360360c081101561080c57600080fd5b5080359060208101359060408101359060ff6060820135169060808101359060a00135611492565b6104826004803603602081101561084a57600080fd5b50356001600160a01b031661161a565b6104826004803603602081101561087057600080fd5b50356001600160a01b031661162c565b61033d6004803603602081101561089657600080fd5b50356001600160a01b031661170c565b61039f6117f6565b61033d600480360360608110156108c457600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156108f357600080fd5b82018360208201111561090557600080fd5b803590602001918460018302840111600160201b8311171561092657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611857945050505050565b6104406004803603604081101561097d57600080fd5b506001600160a01b038135169060200135611881565b610482600480360360408110156109a957600080fd5b506001600160a01b0381358116916020013516611914565b610347611928565b610347611989565b610347611a9b565b61033d600480360360e08110156109ef57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611afb565b61044060048036036040811015610a4057600080fd5b506001600160a01b0381358116916020013516611d05565b61048260048036036040811015610a6e57600080fd5b506001600160a01b0381358116916020013516611d52565b61048260048036036020811015610a9c57600080fd5b5035611d7d565b61048260048036036020811015610ab957600080fd5b5035611d95565b61039f611dac565b61033d60048036036040811015610ade57600080fd5b506001600160a01b038135169060200135611dcd565b61033d60048036036020811015610b0a57600080fd5b50356001600160a01b0316611ddd565b6104e8611ebe565b61033d60048036036080811015610b3857600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b811115610b6757600080fd5b820183602082011115610b7957600080fd5b803590602001918460018302840111600160201b83111715610b9a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115610bec57600080fd5b820183602082011115610bfe57600080fd5b803590602001918460018302840111600160201b83111715610c1f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611ee2945050505050565b61033d60048036036040811015610c7657600080fd5b81359190810190604081016020820135600160201b811115610c9757600080fd5b820183602082011115610ca957600080fd5b803590602001918460018302840111600160201b83111715610cca57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611f41945050505050565b610d1433612120565b610d5633888787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061212392505050565b5050505050505050565b606090565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610df15780601f10610dc657610100808354040283529160200191610df1565b820191906000526020600020905b815481529060010190602001808311610dd457829003601f168201915b5050505050905090565b600080610e0661214f565b9050610e13818585612153565b60019150505b92915050565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e6e57600080fd5b505afa158015610e82573d6000803e3d6000fd5b505050506040513d6020811015610e9857600080fd5b50516001600160a01b0383166000908152600d60209081526040808320805490859055600c909252822054929350830391610ee190610edb846305f5e1006121b5565b9061220e565b90506000610eed610f61565b9050610f1b610efc8383612268565b6001600160a01b0387166000908152600b60205260409020549061220e565b6001600160a01b0386166000908152600b6020526040902055610f3e82826122aa565b6001600160a01b039095166000908152600c602052604090209490945550505050565b6000610f6b6122ec565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614610fc857610fc36305f5e100610fbd84866122f2565b90612268565b610fd9565b610fd9610fd48461234f565b61236a565b9392505050565b6040805163743ad7b560e01b81523060048201526001600160a01b03838116602483015291516000927f0000000000000000000000000000000000000000000000000000000000000000169163743ad7b5916044808301926020929190829003018186803b15801561105157600080fd5b505afa158015611065573d6000803e3d6000fd5b505050506040513d602081101561107b57600080fd5b505190505b919050565b60008061109061214f565b90506110be818686866040518060200160405280600081525060405180602001604052806000815250612383565b6110ea8186868660405180602001604052806000815250604051806020016040528060008152506125b0565b60408051808201825260128152714552433737373a204f5645522d414c4c4f5760701b6020808301919091526001600160a01b03808916600090815260078352848120918616815291529190912054611152918791849161114d919088906126ee565b612153565b6111808186868660405180602001604052806000815250604051806020016040528060008152506000612785565b506001949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663743ad7b530846040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561120957600080fd5b505afa15801561121d573d6000803e3d6000fd5b505050506040513d602081101561123357600080fd5b50516001600160a01b0316331461124957600080fd5b61125584848484612a16565b50505050565b60008061126661214f565b90506112947f0000000000000000000000000000000000000000000000000000000000000000823087612b3c565b61129d84612c99565b91506112c983836040518060200160405280600081525060405180602001604052806000815250612cab565b5092915050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601290565b7f000000000000000000000000000000000000000000000000000000000000000081565b61136c848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408051602081019091529081529250612cab915050565b6113bb848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408051602081019091529081529250612d76915050565b6040805184815290516001600160a01b038616917f5b9ea35ccc2de5176fed8512b7b27b62fd5c98bce089f76ef67287ffa759db9d919081900360200190a250505050565b6000610f6b612e71565b6000610fd98361141861214f565b84612e7d565b61142f61142961214f565b86611d05565b611471576040805162461bcd60e51b815260206004820152600e60248201526d22a9219b9b9b90272796a7a822a960911b604482015290519081900360640190fd5b61148085858585856001612edf565b5050505050565b6000610e198261234f565b60008061149d61214f565b6040805163d505accf60e01b81526001600160a01b038381166004830152306024830152604482018c9052606482018b905260ff8916608483015260a4820188905260c4820187905291519293507f00000000000000000000000000000000000000000000000000000000000000009091169163d505accf9160e48082019260009290919082900301818387803b15801561153757600080fd5b505af1925050508015611548575060015b61160457604080516323f2ebc360e21b81526001600160a01b03838116600483015230602483015260448201899052606482018a90526001608483015260ff881660a483015260c4820187905260e4820186905291517f000000000000000000000000000000000000000000000000000000000000000090921691638fcbaf0c916101048082019260009290919082900301818387803b1580156115eb57600080fd5b505af11580156115ff573d6000803e3d6000fd5b505050505b61160e8189612f16565b98975050505050505050565b60086020526000908152604090205481565b60006116e06116396122ec565b6116da7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116a957600080fd5b505afa1580156116bd573d6000803e3d6000fd5b505050506040513d60208110156116d357600080fd5b5051612c99565b90612f79565b905061108082826040518060200160405280600081525060405180602001604052806000815250612cab565b806001600160a01b031661171e61214f565b6001600160a01b03161415611766576040805162461bcd60e51b815260206004820152600960248201526829a2a62316a7a822a960b91b604482015290519081900360640190fd5b60016006600061177461214f565b6001600160a01b03908116825260208083019390935260409182016000908120918616815292529020805460ff19169115159190911790556117b461214f565b6001600160a01b0316816001600160a01b03167ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f960405160405180910390a350565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610df15780601f10610dc657610100808354040283529160200191610df1565b61187c61186261214f565b848484604051806020016040528060008152506001612edf565b505050565b60008061188c61214f565b90506118ba818286866040518060200160405280600081525060405180602001604052806000815250612383565b6118e68182868660405180602001604052806000815250604051806020016040528060008152506125b0565b610e138182868660405180602001604052806000815250604051806020016040528060008152506000612785565b6000610fd96305f5e100610fbd85856122f2565b6060600a805480602002602001604051908101604052809291908181526020018280548015610df157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611962575050505050905090565b600954606090819060010167ffffffffffffffff811180156119aa57600080fd5b506040519080825280602002602001820160405280156119d4578160200160208202803683370190505b5090507f000000000000000000000000000000000000000000000000000000000000000081600081518110611a0557fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b60095460ff82161015611a955760098160ff1681548110611a4557fe5b9060005260206000200160009054906101000a90046001600160a01b0316828260010160ff1681518110611a7557fe5b6001600160a01b0390921660209283029190910190910152600101611a28565b50905090565b60606009805480602002602001604051908101604052809291908181526020018280548015610df1576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611962575050505050905090565b42841015611b3a576040805162461bcd60e51b81526020600482015260076024820152661156141254915160ca1b604482015290519081900360640190fd5b6001600160a01b0380881660008181526008602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958c166060860152608085018b905260a085019590955260c08085018a90528151808603909101815260e08501825280519083012061190160f01b6101008601527f00000000000000000000000000000000000000000000000000000000000000006101028601526101228086019190915281518086039091018152610142850180835281519184019190912090849052610162850180835281905260ff89166101828601526101a285018890526101c285018790529051909492936101e28082019392601f1981019281900390910190855afa158015611c73573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611ca95750886001600160a01b0316816001600160a01b0316145b611cef576040805162461bcd60e51b81526020600482015260126024820152715065726d697420494e56414c49445f53494760701b604482015290519081900360640190fd5b611cfa898989612153565b505050505050505050565b6000816001600160a01b0316836001600160a01b03161480610fd95750506001600160a01b0390811660009081526006602090815260408083209490931682529290925290205460ff1690565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b600080611d8861214f565b9050610fd9838283612e7d565b600080611da061214f565b9050610fd98184612f16565b604051806040016040528060058152602001640302e322e360dc1b81525081565b611dd982333384612a16565b5050565b611de561214f565b6001600160a01b0316816001600160a01b03161415611e37576040805162461bcd60e51b815260206004820152600960248201526829a2a62316a7a822a960b91b604482015290519081900360640190fd5b60066000611e4361214f565b6001600160a01b03908116825260208083019390935260409182016000908120918516815292529020805460ff19169055611e7c61214f565b6001600160a01b0316816001600160a01b03167f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa160405160405180910390a350565b7f000000000000000000000000000000000000000000000000000000000000000081565b611ef3611eed61214f565b85611d05565b611f35576040805162461bcd60e51b815260206004820152600e60248201526d22a9219b9b9b90272796a7a822a960911b604482015290519081900360640190fd5b61125584848484612d76565b611dd9611f4c61214f565b838360405180602001604052806000815250612d76565b606080611f77836306fdde0360e01b612fbb565b9050805160001415610e1957611f8c836131e1565b915050611080565b606080611fa8836395d89b4160e01b612fbb565b9050805160001415610e1957611f8c836131ee565b606060028206158015611fd05750600082115b8015611fdd575060288211155b61202e576040805162461bcd60e51b815260206004820152601e60248201527f41646472657373537472696e675574696c3a20494e56414c49445f4c454e0000604482015290519081900360640190fd5b60608267ffffffffffffffff8111801561204757600080fd5b506040519080825280601f01601f191660200182016040528015612072576020820181803683370190505b5090506001600160a01b03841660005b6002850481101561211657600860138290030282901c600f600482901c1660f0821682036120af826131fb565b8685600202815181106120be57fe5b60200101906001600160f81b031916908160001a9053506120de816131fb565b8685600202600101815181106120f057fe5b60200101906001600160f81b031916908160001a90535050600190920191506120829050565b5090949350505050565b50565b6001600160a01b0384163014156121445761213f848484613223565b611255565b611480823085612e7d565b3390565b6001600160a01b03808416600081815260076020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000826121c457506000610e19565b828202828482816121d157fe5b0414610fd95760405162461bcd60e51b81526004018080602001828103825260218152602001806141526021913960400191505060405180910390fd5b600082820183811015610fd9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610fd983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506134be565b6000610fd983836040518060400160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250613523565b60025490565b6001600160a01b038083166000908152600e60209081526040808320938516835292905290812054610fd99061234961232a85611487565b6001600160a01b0387166000908152600b6020526040902054906121b5565b90613585565b6001600160a01b031660009081526001602052604090205490565b6000612374612e71565b828161237c57fe5b0492915050565b6040805163555ddc6560e11b81526001600160a01b03871660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89560248201529051600091731820a4b7618bde71dce8cdc73aab6c95905fad249163aabbb8ca91604480820192602092909190829003018186803b15801561240757600080fd5b505afa15801561241b573d6000803e3d6000fd5b505050506040513d602081101561243157600080fd5b505190506001600160a01b038116156125a757806001600160a01b03166375ab97828888888888886040518763ffffffff1660e01b815260040180876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156124dc5781810151838201526020016124c4565b50505050905090810190601f1680156125095780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561253c578181015183820152602001612524565b50505050905090810190601f1680156125695780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b15801561258e57600080fd5b505af11580156125a2573d6000803e3d6000fd5b505050505b50505050505050565b60006125bb86611487565b905060005b6009548110156126df576000600982815481106125d957fe5b60009182526020822001546001600160a01b0316915061260784610fbd89612601868e6122f2565b906121b5565b6001600160a01b0383166000908152600b60205260408120549192509061263a90612633908a906121b5565b8390613585565b6001600160a01b038085166000908152600e60209081526040808320938f168352929052205490915061266d90826135ea565b6001600160a01b038481166000908152600e602090815260408083208f8516845290915280822093909355908b16815220546126a99082613585565b6001600160a01b039384166000908152600e60209081526040808320968d168352959052939093209290925550506001016125c0565b506125a787878787878761364f565b6000818484111561277d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561274257818101518382015260200161272a565b50505050905090810190601f16801561276f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6040805163555ddc6560e11b81526001600160a01b03871660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248201529051600091731820a4b7618bde71dce8cdc73aab6c95905fad249163aabbb8ca91604480820192602092909190829003018186803b15801561280957600080fd5b505afa15801561281d573d6000803e3d6000fd5b505050506040513d602081101561283357600080fd5b505190506001600160a01b038116156129ac57806001600160a01b03166223de298989898989896040518763ffffffff1660e01b815260040180876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156128dd5781810151838201526020016128c5565b50505050905090810190601f16801561290a5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561293d578181015183820152602001612925565b50505050905090810190601f16801561296a5780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b15801561298f57600080fd5b505af11580156129a3573d6000803e3d6000fd5b50505050610d56565b8115610d56576129c4866001600160a01b0316613971565b15610d56576040805162461bcd60e51b815260206004820152601960248201527f4e4f5420455243373737546f6b656e73526563697069656e7400000000000000604482015290519081900360640190fd5b6000612a26826305f5e1006121b5565b9050612a3285856122f2565b811115612a3e57600080fd5b6001600160a01b038086166000908152600e6020908152604080832093881683529290522054612a6e90826135ea565b6001600160a01b038087166000818152600e60209081526040808320948a16835293815283822094909455908152600d909252902054612aae9083612f79565b6001600160a01b038087166000818152600d6020908152604080832095909555845163a9059cbb60e01b81529388166004850152602484018790529351919363a9059cbb936044808201949293918390030190829087803b158015612b1257600080fd5b505af1158015612b26573d6000803e3d6000fd5b505050506040513d60208110156125a757600080fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938a169392918291908083835b60208310612bc15780518252601f199092019160209182019101612ba2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612c23576040519150601f19603f3d011682016040523d82523d6000602084013e612c28565b606091505b5091509150818015612c56575080511580612c565750808060200190516020811015612c5357600080fd5b50515b612c915760405162461bcd60e51b81526004018080602001828103825260248152602001806141976024913960400191505060405180910390fd5b505050505050565b6000612ca3612e71565b909102919050565b612cb483612120565b612cc084848484613977565b60005b60095481101561148057600060098281548110612cdc57fe5b60009182526020808320909101546001600160a01b0316808352600b9091526040822054909250612d0e9087906121b5565b6001600160a01b038084166000908152600e60209081526040808320938c1683529290522054909150612d4190826135ea565b6001600160a01b039283166000908152600e60209081526040808320958b168352949052929092209190915550600101612cc3565b612d7f83612120565b6000612d8a85611487565b9050600084612d97610f61565b03905060005b600954811015612e6457600060098281548110612db657fe5b6000918252602090912001546001600160a01b031690508215612e34576000612de785610fbd8a612601868e6122f2565b9050612e15612df68286612268565b6001600160a01b0384166000908152600b60205260409020549061220e565b6001600160a01b0383166000908152600b602052604090205550612e5b565b6001600160a01b0381166000908152600b60209081526040808320839055600d9091528120555b50600101612d9d565b50612c9186868686613bf8565b600054601203600a0a90565b6000612ea983856040518060200160405280600081525060405180602001604052806000815250612d76565b612eb28461236a565b9050610fd97f00000000000000000000000000000000000000000000000000000000000000008383613ea6565b6000612ee961214f565b9050612ef9818888888888612383565b612f078188888888886125b0565b6125a781888888888888612785565b6000612f447f0000000000000000000000000000000000000000000000000000000000000000843085612b3c565b612f4d82612c99565b9050610e1983826040518060200160405280600081525060405180602001604052806000815250612cab565b6000610fd983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506126ee565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b031985161781529151815160609360009385936001600160a01b03891693919290918291908083835b602083106130275780518252601f199092019160209182019101613008565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114613087576040519150601f19603f3d011682016040523d82523d6000602084013e61308c565b606091505b509150915081158061309d57508051155b156130bb576040518060200160405280600081525092505050610e19565b8051602014156130f35760008180602001905160208110156130dc57600080fd5b505190506130e981614009565b9350505050610e19565b6040815111156131c95780806020019051602081101561311257600080fd5b8101908080516040519392919084600160201b82111561313157600080fd5b90830190602082018581111561314657600080fd5b8251600160201b81118282018810171561315f57600080fd5b82525081516020918201929091019080838360005b8381101561318c578181015183820152602001613174565b50505050905090810190601f1680156131b95780820380516001836020036101000a031916815260200191505b5060405250505092505050610e19565b50506040805160208101909152600081529392505050565b6060610e19826028611fbd565b6060610e19826006611fbd565b6000600a8260ff16101561321657506030810160f81b611080565b506037810160f81b611080565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561328657600080fd5b505afa15801561329a573d6000803e3d6000fd5b505050506040513d60208110156132b057600080fd5b50516001600160a01b0316146132f7576040805162461bcd60e51b81526020600482015260076024820152661253959053125160ca1b604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561336657600080fd5b505afa15801561337a573d6000803e3d6000fd5b505050506040513d602081101561339057600080fd5b5051905061339f848084613ea6565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561340e57600080fd5b505afa158015613422573d6000803e3d6000fd5b505050506040513d602081101561343857600080fd5b50519050600061345061344b8385612f79565b612c99565b905060008111613494576040805162461bcd60e51b815260206004820152600a6024820152694e4f2d5550475241444560b01b604482015290519081900360640190fd5b612c9185826040518060200160405280600081525060405180602001604052806000815250612cab565b6000818361350d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561274257818101518382015260200161272a565b50600083858161351957fe5b0495945050505050565b600081836135725760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561274257818101518382015260200161272a565b5082848161357c57fe5b06949350505050565b600081830381831280159061359a5750838113155b806135af57506000831280156135af57508381135b610fd95760405162461bcd60e51b81526004018080602001828103825260248152602001806141736024913960400191505060405180910390fd5b60008282018183128015906135ff5750838112155b80613614575060008312801561361457508381125b610fd95760405162461bcd60e51b81526004018080602001828103825260218152602001806141316021913960400191505060405180910390fd5b6001600160a01b03851661369e576040805162461bcd60e51b81526020600482015260116024820152704552433737373a2053454e442d5a45524f60781b604482015290519081900360640190fd5b6001600160a01b0384166136ed576040805162461bcd60e51b81526020600482015260116024820152704552433737373a2053454e442d5a45524f60781b604482015290519081900360640190fd5b6136f5612e71565b83816136fd57fe5b0615613743576040805162461bcd60e51b815260206004820152601060248201526f22a9219b9b9b9d102120a216a3a920a760811b604482015290519081900360640190fd5b61374f86868686611255565b60408051808201825260138152724552433737373a2053454e442d45584345535360681b6020808301919091526001600160a01b0388166000908152600190915291909120546137a09185906126ee565b6001600160a01b0380871660009081526001602052604080822093909355908616815220546137cf908461220e565b60016000866001600160a01b03166001600160a01b0316815260200190815260200160002081905550836001600160a01b0316856001600160a01b0316876001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987868686604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015613881578181015183820152602001613869565b50505050905090810190601f1680156138ae5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156138e15781810151838201526020016138c9565b50505050905090810190601f16801561390e5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a4836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3505050505050565b3b151590565b6001600160a01b0384166139c6576040805162461bcd60e51b81526020600482015260116024820152704552433737373a204d494e542d5a45524f60781b604482015290519081900360640190fd5b6139ce612e71565b83816139d657fe5b0615613a1c576040805162461bcd60e51b815260206004820152601060248201526f22a9219b9b9b9d102120a216a3a920a760811b604482015290519081900360640190fd5b6000613a2661214f565b9050613a358160008787611255565b600254613a42908561220e565b6002556001600160a01b038516600090815260016020526040902054613a68908561220e565b6001600160a01b038616600090815260016020526040812091909155613a949082908787878784612785565b846001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d868686604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015613b13578181015183820152602001613afb565b50505050905090810190601f168015613b405780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015613b73578181015183820152602001613b5b565b50505050905090810190601f168015613ba05780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a36040805185815290516001600160a01b038716916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050505050565b6001600160a01b038416613c47576040805162461bcd60e51b81526020600482015260116024820152704552433737373a204255524e2d5a45524f60781b604482015290519081900360640190fd5b613c4f612e71565b8381613c5757fe5b0615613c9d576040805162461bcd60e51b815260206004820152601060248201526f22a9219b9b9b9d102120a216a3a920a760811b604482015290519081900360640190fd5b6000613ca761214f565b9050613cb68186600087611255565b613cc581866000878787612383565b60408051808201825260138152724552433737373a204255524e2d45584345535360681b6020808301919091526001600160a01b038816600090815260019091529190912054613d169186906126ee565b6001600160a01b038616600090815260016020526040902055600254613d3c9085612f79565b600281905550846001600160a01b0316816001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098868686604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015613dc1578181015183820152602001613da9565b50505050905090810190601f168015613dee5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015613e21578181015183820152602001613e09565b50505050905090810190601f168015613e4e5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a36040805185815290516000916001600160a01b038816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b60208310613f235780518252601f199092019160209182019101613f04565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613f85576040519150601f19603f3d011682016040523d82523d6000602084013e613f8a565b606091505b5091509150818015613fb8575080511580613fb85750808060200190516020811015613fb557600080fd5b50515b611480576040805162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b6040805160208082528183019092526060918291906020820181803683370190505090506000805b602081101561409257600085826020811061404857fe5b1a60f81b90506001600160f81b0319811615614089578084848151811061406b57fe5b60200101906001600160f81b031916908160001a9053506001909201915b50600101614031565b5060608167ffffffffffffffff811180156140ac57600080fd5b506040519080825280601f01601f1916602001820160405280156140d7576020820181803683370190505b50905060005b82811015614127578381815181106140f157fe5b602001015160f81c60f81b82828151811061410857fe5b60200101906001600160f81b031916908160001a9053506001016140dd565b5094935050505056fe5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f775472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a26469706673582212209636c8a6e0c017a81862d852f49656f6dff3b4dc6da785a8f9e2aef200b41c8664736f6c634300060c00330000000000000000000000001820a4b7618bde71dce8cdc73aab6c95905fad24a2646970667358221220b86e0a4c06f809e9daae2ab027c61431b4dc2527350a86f77f548279358807b564736f6c634300060c0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200006a5760003560e01c80631d101777146200006f578063287878f1146200008b5780632c05e45814620001605780638491830114620001d05780639499ac541462000289578063b3e32ad71462000293575b600080fd5b620000796200034e565b60408051918252519081900360200190f35b6200014460048036036040811015620000a357600080fd5b6001600160a01b038235169190810190604081016020820135640100000000811115620000cf57600080fd5b820183602082011115620000e257600080fd5b803590602001918460208302840111640100000000831117156200010557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506200037d945050505050565b604080516001600160a01b039092168252519081900360200190f35b6200016a620003d3565b60405180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015620001bb578181015183820152602001620001a1565b50505050905001935050505060405180910390f35b6200014460048036036040811015620001e857600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156200021457600080fd5b8201836020820111156200022757600080fd5b803590602001918460208302840111640100000000831117156200024a57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062000460945050505050565b6200014462000558565b6200034c60048036036040811015620002ab57600080fd5b6001600160a01b038235169190810190604081016020820135640100000000811115620002d757600080fd5b820183602082011115620002ea57600080fd5b803590602001918460208302840111640100000000831117156200030d57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062000567945050505050565b005b6040516200035f60208201620006b1565b6020820181038252601f19601f820116604052508051906020012081565b60006200038b838362000460565b9050620003a1816001600160a01b0316620006ab565b620003cd57620003b2838362000567565b620003c6816001600160a01b0316620006ab565b620003cd57fe5b92915050565b600060607f00000000000000000000000000000000000000000000000000000000000000006001808054806020026020016040519081016040528092919081815260200182805480156200045157602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000432575b50505050509050915091509091565b600060ff60f81b30848460405160200180836001600160a01b031660601b8152601401828051906020019060200280838360005b83811015620004ae57818101518382015260200162000494565b50505050905001925050506040516020818303038152906040528051906020012060405180602001620004e190620006b1565b6020820181038252601f19601f820116604052508051906020012060405160200180856001600160f81b0319168152600101846001600160a01b031660601b81526014018381526020018281526020019450505050506040516020818303038152906040528051906020012060001c905092915050565b6000546001600160a01b031690565b600080546001600160a01b0319166001600160a01b038416179055805162000597906001906020840190620006bf565b506000828260405160200180836001600160a01b031660601b8152601401828051906020019060200280838360005b83811015620005e0578181015183820152602001620005c6565b5050505090500192505050604051602081830303815290604052805190602001206040516200060f90620006b1565b8190604051809103906000f590508015801562000630573d6000803e3d6000fd5b50600080546001600160a01b03191681556040805191825260208201908190529051919250620006649160019190620006bf565b50604080516001600160a01b0383811682529151918516917feca658fb45a042c9a15f37be8099dbc152e104331b942dc253680509f9727d079181900360200190a2505050565b3b151590565b6152df806200074b83390190565b82805482825590600052602060002090810192821562000717579160200282015b828111156200071757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620006e0565b506200072592915062000729565b5090565b5b80821115620007255780546001600160a01b03191681556001016200072a56fe60e06040523480156200001157600080fd5b50604080516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce2177054602483015260448201529051600080516020620052bf833981519152916329965a1d91606480830192600092919082900301818387803b1580156200008d57600080fd5b505af1158015620000a2573d6000803e3d6000fd5b5050604080516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a602483015260448201529051600080516020620052bf83398151915293506329965a1d9250606480830192600092919082900301818387803b1580156200012157600080fd5b505af115801562000136573d6000803e3d6000fd5b5050604080516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b602483015260448201529051600080516020620052bf83398151915293506329965a1d9250606480830192600092919082900301818387803b158015620001b557600080fd5b505af1158015620001ca573d6000803e3d6000fd5b505050506000336001600160a01b0316639499ac546040518163ffffffff1660e01b815260040160206040518083038186803b1580156200020a57600080fd5b505afa1580156200021f573d6000803e3d6000fd5b505050506040513d60208110156200023657600080fd5b5051606081901b6001600160601b031916608052905062000263816200096b602090811b62001f6317901c565b6040516020018082805190602001908083835b60208310620002975780518252601f19909201916020918201910162000276565b51815160209384036101000a6000190180199092169116179052632d37373760e01b9190930190815260408051808303601b19018152600490920190528051620002eb955060039450920191905062000f38565b506200030281620009aa60201b62001f941760201c565b6040516020018082805190602001908083835b60208310620003365780518252601f19909201916020918201910162000315565b51815160209384036101000a60001901801990921691161790526237373760e81b9190930190815260408051808303601c1901815260039092019052805162000389955060049450920191905062000f38565b50620003ff816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620003c857600080fd5b505afa158015620003dd573d6000803e3d6000fd5b505050506040513d6020811015620003f457600080fd5b505160ff16620009d8565b604080516329965a1d60e01b815230600482018190527f25d236b07c82ae6ff3fc3a505a958b70ece0b81ba97eb926f710865e5b69a2cd602483015260448201529051600080516020620052bf833981519152916329965a1d91606480830192600092919082900301818387803b1580156200047a57600080fd5b505af11580156200048f573d6000803e3d6000fd5b505050507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60036040518082805460018160011615610100020316600290048015620005155780601f10620004f257610100808354040283529182019162000515565b820191906000526020600020905b81548152906001019060200180831162000500575b50506040805191829003822082820190915260018252603160f81b60209092019190915291507fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6905062000568620009dd565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b03168152602001955050505050506040516020818303038152906040528051906020012060a081815250505060006060336001600160a01b0316632c05e4586040518163ffffffff1660e01b815260040160006040518083038186803b158015620005fa57600080fd5b505afa1580156200060f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160409081528110156200063957600080fd5b8151602083018051604051929492938301929190846401000000008211156200066157600080fd5b9083019060208201858111156200067757600080fd5b82518660208202830111640100000000821117156200069557600080fd5b82525081516020918201928201910280838360005b83811015620006c4578181015183820152602001620006aa565b505050509190910160405250505050606082811b6001600160601b03191660c052815192945090925083916001600160401b03811180156200070557600080fd5b5060405190808252806020026020018201604052801562000730578160200160208202803683370190505b50905060005b83518160ff161015620008a0576000848260ff16815181106200075557fe5b602002602001015190506000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200079b57600080fd5b505afa158015620007b0573d6000803e3d6000fd5b505050506040513d6020811015620007c757600080fd5b505184519091508190859060ff8616908110620007e057fe5b60200260200101906001600160a01b031690816001600160a01b031681525050846001600160a01b031663db426e2d30888660ff16815181106200082057fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b1580156200087857600080fd5b505af11580156200088d573d6000803e3d6000fd5b5050600190940193506200073692505050565b508051620008b690600990602084019062000fbd565b508251620008cc90600a90602086019062000fbd565b50604080516329965a1d60e01b815230600482018190527f71a86b72b6364f469fa6d4a1d52d0b4bac87d31788cc6601258e8eb3f51dc953602483015260448201529051600080516020620052bf833981519152916329965a1d91606480830192600092919082900301818387803b1580156200094857600080fd5b505af11580156200095d573d6000803e3d6000fd5b50505050505050506200105b565b60608062000981836306fdde0360e01b620009e1565b9050805160001415620009a257620009998362000c21565b915050620009a5565b90505b919050565b606080620009c0836395d89b4160e01b620009e1565b9050805160001415620009a257620009998362000c3b565b600055565b4690565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b031985161781529151815160609360009385936001600160a01b03891693919290918291908083835b6020831062000a4f5780518252601f19909201916020918201910162000a2e565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811462000ab1576040519150601f19603f3d011682016040523d82523d6000602084013e62000ab6565b606091505b509150915081158062000ac857508051155b1562000ae857604051806020016040528060008152509250505062000c1b565b80516020141562000b2557600081806020019051602081101562000b0b57600080fd5b5051905062000b1a8162000c55565b935050505062000c1b565b60408151111562000c065780806020019051602081101562000b4657600080fd5b810190808051604051939291908464010000000082111562000b6757600080fd5b90830190602082018581111562000b7d57600080fd5b825164010000000081118282018810171562000b9857600080fd5b82525081516020918201929091019080838360005b8381101562000bc757818101518382015260200162000bad565b50505050905090810190601f16801562000bf55780820380516001836020036101000a031916815260200191505b506040525050509250505062000c1b565b60405180602001604052806000815250925050505b92915050565b6060620009a282602862000d9e60201b62001fbd1760201c565b6060620009a282600662000d9e60201b62001fbd1760201c565b6040805160208082528183019092526060918291906020820181803683370190505090506000805b602081101562000cfb57600085826020811062000c9657fe5b1a60f81b90507fff0000000000000000000000000000000000000000000000000000000000000081161562000cf1578084848151811062000cd357fe5b60200101906001600160f81b031916908160001a9053506001909201915b5060010162000c7d565b506060816001600160401b038111801562000d1557600080fd5b506040519080825280601f01601f19166020018201604052801562000d41576020820181803683370190505b50905060005b8281101562000d955783818151811062000d5d57fe5b602001015160f81c60f81b82828151811062000d7557fe5b60200101906001600160f81b031916908160001a90535060010162000d47565b50949350505050565b60606002820615801562000db25750600082115b801562000dc0575060288211155b62000e12576040805162461bcd60e51b815260206004820152601e60248201527f41646472657373537472696e675574696c3a20494e56414c49445f4c454e0000604482015290519081900360640190fd5b6060826001600160401b038111801562000e2b57600080fd5b506040519080825280601f01601f19166020018201604052801562000e57576020820181803683370190505b5090506001600160a01b03841660005b6002850481101562000f0357600860138290030282901c600f600482901c1660f08216820362000e978262000f0d565b86856002028151811062000ea757fe5b60200101906001600160f81b031916908160001a90535062000ec98162000f0d565b86856002026001018151811062000edc57fe5b60200101906001600160f81b031916908160001a905350506001909201915062000e679050565b5090949350505050565b6000600a8260ff16101562000f2a57506030810160f81b620009a5565b506037810160f81b620009a5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000f7b57805160ff191683800117855562000fab565b8280016001018555821562000fab579182015b8281111562000fab57825182559160200191906001019062000f8e565b5062000fb992915062001023565b5090565b82805482825590600052602060002090810192821562001015579160200282015b828111156200101557825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000fde565b5062000fb99291506200103a565b5b8082111562000fb9576000815560010162001024565b5b8082111562000fb95780546001600160a01b03191681556001016200103b565b60805160601c60a05160c05160601c6141f0620010cf6000398061100b528061118d5250806112fb5280611bd1525080610f74528061126d52806114ed52806115a0528061163e52806119d95280611ec05280612eb95280612f1d528061322552806132fb52806133a352506141f06000f3fe608060405234801561001057600080fd5b50600436106102525760003560e01c80637ecebe0011610146578063d505accf116100c3578063ed9a5f5111610087578063ed9a5f5114610ac0578063f3fef3a314610ac8578063fad8b32a14610af4578063fc0c546a14610b1a578063fc673c4f14610b22578063fe9d930314610c6057610252565b8063d505accf146109d9578063d95b637114610a2a578063dd62ed3e14610a58578063de0e9a3e14610a86578063ea598cb014610aa357610252565b8063a9059cbb1161010a578063a9059cbb14610967578063aca2efc714610993578063bbe3493e146109c1578063bd27dc9f146109c9578063c2b18aa0146109d157610252565b80637ecebe00146108345780638c28cbe81461085a578063959b8c3f1461088057806395d89b41146108a65780639bd9bbc6146108ae57610252565b806326599850116101d4578063556f0dc711610198578063556f0dc7146106535780635dbd60591461065b57806362ad1b831461068757806370a08231146107d0578063796ab980146107f657610252565b8063265998501461057657806330adf81f146105a2578063313ce567146105aa5780633644e515146105c85780633ea21465146105d057610252565b806318160ddd1161021b57806318160ddd1461047a5780631be655e81461049457806321cde2b6146104c257806323b872dd14610504578063264413181461053a57610252565b806223de291461025757806306e485381461033f57806306fdde0314610397578063095ea7b3146104145780630e5c011e14610454575b600080fd5b61033d600480360360c081101561026d57600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a081016080820135600160201b8111156102af57600080fd5b8201836020820111156102c157600080fd5b803590602001918460018302840111600160201b831117156102e257600080fd5b919390929091602081019035600160201b8111156102ff57600080fd5b82018360208201111561031157600080fd5b803590602001918460018302840111600160201b8311171561033257600080fd5b509092509050610d0b565b005b610347610d60565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561038357818101518382015260200161036b565b505050509050019250505060405180910390f35b61039f610d65565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103d95781810151838201526020016103c1565b50505050905090810190601f1680156104065780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104406004803603604081101561042a57600080fd5b506001600160a01b038135169060200135610dfb565b604080519115158252519081900360200190f35b61033d6004803603602081101561046a57600080fd5b50356001600160a01b0316610e1f565b610482610f61565b60408051918252519081900360200190f35b610482600480360360408110156104aa57600080fd5b506001600160a01b0381358116916020013516610f70565b6104e8600480360360208110156104d857600080fd5b50356001600160a01b0316610fe0565b604080516001600160a01b039092168252519081900360200190f35b6104406004803603606081101561051a57600080fd5b506001600160a01b03813581169160208101359091169060400135611085565b61033d6004803603608081101561055057600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013561118b565b6104826004803603604081101561058c57600080fd5b50803590602001356001600160a01b031661125b565b6104826112d0565b6105b26112f4565b6040805160ff9092168252519081900360200190f35b6104826112f9565b61033d600480360360608110156105e657600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561061557600080fd5b82018360208201111561062757600080fd5b803590602001918460018302840111600160201b8311171561064857600080fd5b50909250905061131d565b610482611400565b6104826004803603604081101561067157600080fd5b50803590602001356001600160a01b031661140a565b61033d600480360360a081101561069d57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156106d757600080fd5b8201836020820111156106e957600080fd5b803590602001918460018302840111600160201b8311171561070a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561075c57600080fd5b82018360208201111561076e57600080fd5b803590602001918460018302840111600160201b8311171561078f57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061141e945050505050565b610482600480360360208110156107e657600080fd5b50356001600160a01b0316611487565b610482600480360360c081101561080c57600080fd5b5080359060208101359060408101359060ff6060820135169060808101359060a00135611492565b6104826004803603602081101561084a57600080fd5b50356001600160a01b031661161a565b6104826004803603602081101561087057600080fd5b50356001600160a01b031661162c565b61033d6004803603602081101561089657600080fd5b50356001600160a01b031661170c565b61039f6117f6565b61033d600480360360608110156108c457600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156108f357600080fd5b82018360208201111561090557600080fd5b803590602001918460018302840111600160201b8311171561092657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611857945050505050565b6104406004803603604081101561097d57600080fd5b506001600160a01b038135169060200135611881565b610482600480360360408110156109a957600080fd5b506001600160a01b0381358116916020013516611914565b610347611928565b610347611989565b610347611a9b565b61033d600480360360e08110156109ef57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611afb565b61044060048036036040811015610a4057600080fd5b506001600160a01b0381358116916020013516611d05565b61048260048036036040811015610a6e57600080fd5b506001600160a01b0381358116916020013516611d52565b61048260048036036020811015610a9c57600080fd5b5035611d7d565b61048260048036036020811015610ab957600080fd5b5035611d95565b61039f611dac565b61033d60048036036040811015610ade57600080fd5b506001600160a01b038135169060200135611dcd565b61033d60048036036020811015610b0a57600080fd5b50356001600160a01b0316611ddd565b6104e8611ebe565b61033d60048036036080811015610b3857600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b811115610b6757600080fd5b820183602082011115610b7957600080fd5b803590602001918460018302840111600160201b83111715610b9a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115610bec57600080fd5b820183602082011115610bfe57600080fd5b803590602001918460018302840111600160201b83111715610c1f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611ee2945050505050565b61033d60048036036040811015610c7657600080fd5b81359190810190604081016020820135600160201b811115610c9757600080fd5b820183602082011115610ca957600080fd5b803590602001918460018302840111600160201b83111715610cca57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611f41945050505050565b610d1433612120565b610d5633888787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061212392505050565b5050505050505050565b606090565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610df15780601f10610dc657610100808354040283529160200191610df1565b820191906000526020600020905b815481529060010190602001808311610dd457829003601f168201915b5050505050905090565b600080610e0661214f565b9050610e13818585612153565b60019150505b92915050565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e6e57600080fd5b505afa158015610e82573d6000803e3d6000fd5b505050506040513d6020811015610e9857600080fd5b50516001600160a01b0383166000908152600d60209081526040808320805490859055600c909252822054929350830391610ee190610edb846305f5e1006121b5565b9061220e565b90506000610eed610f61565b9050610f1b610efc8383612268565b6001600160a01b0387166000908152600b60205260409020549061220e565b6001600160a01b0386166000908152600b6020526040902055610f3e82826122aa565b6001600160a01b039095166000908152600c602052604090209490945550505050565b6000610f6b6122ec565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614610fc857610fc36305f5e100610fbd84866122f2565b90612268565b610fd9565b610fd9610fd48461234f565b61236a565b9392505050565b6040805163743ad7b560e01b81523060048201526001600160a01b03838116602483015291516000927f0000000000000000000000000000000000000000000000000000000000000000169163743ad7b5916044808301926020929190829003018186803b15801561105157600080fd5b505afa158015611065573d6000803e3d6000fd5b505050506040513d602081101561107b57600080fd5b505190505b919050565b60008061109061214f565b90506110be818686866040518060200160405280600081525060405180602001604052806000815250612383565b6110ea8186868660405180602001604052806000815250604051806020016040528060008152506125b0565b60408051808201825260128152714552433737373a204f5645522d414c4c4f5760701b6020808301919091526001600160a01b03808916600090815260078352848120918616815291529190912054611152918791849161114d919088906126ee565b612153565b6111808186868660405180602001604052806000815250604051806020016040528060008152506000612785565b506001949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663743ad7b530846040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561120957600080fd5b505afa15801561121d573d6000803e3d6000fd5b505050506040513d602081101561123357600080fd5b50516001600160a01b0316331461124957600080fd5b61125584848484612a16565b50505050565b60008061126661214f565b90506112947f0000000000000000000000000000000000000000000000000000000000000000823087612b3c565b61129d84612c99565b91506112c983836040518060200160405280600081525060405180602001604052806000815250612cab565b5092915050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601290565b7f000000000000000000000000000000000000000000000000000000000000000081565b61136c848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408051602081019091529081529250612cab915050565b6113bb848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408051602081019091529081529250612d76915050565b6040805184815290516001600160a01b038616917f5b9ea35ccc2de5176fed8512b7b27b62fd5c98bce089f76ef67287ffa759db9d919081900360200190a250505050565b6000610f6b612e71565b6000610fd98361141861214f565b84612e7d565b61142f61142961214f565b86611d05565b611471576040805162461bcd60e51b815260206004820152600e60248201526d22a9219b9b9b90272796a7a822a960911b604482015290519081900360640190fd5b61148085858585856001612edf565b5050505050565b6000610e198261234f565b60008061149d61214f565b6040805163d505accf60e01b81526001600160a01b038381166004830152306024830152604482018c9052606482018b905260ff8916608483015260a4820188905260c4820187905291519293507f00000000000000000000000000000000000000000000000000000000000000009091169163d505accf9160e48082019260009290919082900301818387803b15801561153757600080fd5b505af1925050508015611548575060015b61160457604080516323f2ebc360e21b81526001600160a01b03838116600483015230602483015260448201899052606482018a90526001608483015260ff881660a483015260c4820187905260e4820186905291517f000000000000000000000000000000000000000000000000000000000000000090921691638fcbaf0c916101048082019260009290919082900301818387803b1580156115eb57600080fd5b505af11580156115ff573d6000803e3d6000fd5b505050505b61160e8189612f16565b98975050505050505050565b60086020526000908152604090205481565b60006116e06116396122ec565b6116da7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116a957600080fd5b505afa1580156116bd573d6000803e3d6000fd5b505050506040513d60208110156116d357600080fd5b5051612c99565b90612f79565b905061108082826040518060200160405280600081525060405180602001604052806000815250612cab565b806001600160a01b031661171e61214f565b6001600160a01b03161415611766576040805162461bcd60e51b815260206004820152600960248201526829a2a62316a7a822a960b91b604482015290519081900360640190fd5b60016006600061177461214f565b6001600160a01b03908116825260208083019390935260409182016000908120918616815292529020805460ff19169115159190911790556117b461214f565b6001600160a01b0316816001600160a01b03167ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f960405160405180910390a350565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610df15780601f10610dc657610100808354040283529160200191610df1565b61187c61186261214f565b848484604051806020016040528060008152506001612edf565b505050565b60008061188c61214f565b90506118ba818286866040518060200160405280600081525060405180602001604052806000815250612383565b6118e68182868660405180602001604052806000815250604051806020016040528060008152506125b0565b610e138182868660405180602001604052806000815250604051806020016040528060008152506000612785565b6000610fd96305f5e100610fbd85856122f2565b6060600a805480602002602001604051908101604052809291908181526020018280548015610df157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611962575050505050905090565b600954606090819060010167ffffffffffffffff811180156119aa57600080fd5b506040519080825280602002602001820160405280156119d4578160200160208202803683370190505b5090507f000000000000000000000000000000000000000000000000000000000000000081600081518110611a0557fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b60095460ff82161015611a955760098160ff1681548110611a4557fe5b9060005260206000200160009054906101000a90046001600160a01b0316828260010160ff1681518110611a7557fe5b6001600160a01b0390921660209283029190910190910152600101611a28565b50905090565b60606009805480602002602001604051908101604052809291908181526020018280548015610df1576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611962575050505050905090565b42841015611b3a576040805162461bcd60e51b81526020600482015260076024820152661156141254915160ca1b604482015290519081900360640190fd5b6001600160a01b0380881660008181526008602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958c166060860152608085018b905260a085019590955260c08085018a90528151808603909101815260e08501825280519083012061190160f01b6101008601527f00000000000000000000000000000000000000000000000000000000000000006101028601526101228086019190915281518086039091018152610142850180835281519184019190912090849052610162850180835281905260ff89166101828601526101a285018890526101c285018790529051909492936101e28082019392601f1981019281900390910190855afa158015611c73573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611ca95750886001600160a01b0316816001600160a01b0316145b611cef576040805162461bcd60e51b81526020600482015260126024820152715065726d697420494e56414c49445f53494760701b604482015290519081900360640190fd5b611cfa898989612153565b505050505050505050565b6000816001600160a01b0316836001600160a01b03161480610fd95750506001600160a01b0390811660009081526006602090815260408083209490931682529290925290205460ff1690565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b600080611d8861214f565b9050610fd9838283612e7d565b600080611da061214f565b9050610fd98184612f16565b604051806040016040528060058152602001640302e322e360dc1b81525081565b611dd982333384612a16565b5050565b611de561214f565b6001600160a01b0316816001600160a01b03161415611e37576040805162461bcd60e51b815260206004820152600960248201526829a2a62316a7a822a960b91b604482015290519081900360640190fd5b60066000611e4361214f565b6001600160a01b03908116825260208083019390935260409182016000908120918516815292529020805460ff19169055611e7c61214f565b6001600160a01b0316816001600160a01b03167f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa160405160405180910390a350565b7f000000000000000000000000000000000000000000000000000000000000000081565b611ef3611eed61214f565b85611d05565b611f35576040805162461bcd60e51b815260206004820152600e60248201526d22a9219b9b9b90272796a7a822a960911b604482015290519081900360640190fd5b61125584848484612d76565b611dd9611f4c61214f565b838360405180602001604052806000815250612d76565b606080611f77836306fdde0360e01b612fbb565b9050805160001415610e1957611f8c836131e1565b915050611080565b606080611fa8836395d89b4160e01b612fbb565b9050805160001415610e1957611f8c836131ee565b606060028206158015611fd05750600082115b8015611fdd575060288211155b61202e576040805162461bcd60e51b815260206004820152601e60248201527f41646472657373537472696e675574696c3a20494e56414c49445f4c454e0000604482015290519081900360640190fd5b60608267ffffffffffffffff8111801561204757600080fd5b506040519080825280601f01601f191660200182016040528015612072576020820181803683370190505b5090506001600160a01b03841660005b6002850481101561211657600860138290030282901c600f600482901c1660f0821682036120af826131fb565b8685600202815181106120be57fe5b60200101906001600160f81b031916908160001a9053506120de816131fb565b8685600202600101815181106120f057fe5b60200101906001600160f81b031916908160001a90535050600190920191506120829050565b5090949350505050565b50565b6001600160a01b0384163014156121445761213f848484613223565b611255565b611480823085612e7d565b3390565b6001600160a01b03808416600081815260076020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000826121c457506000610e19565b828202828482816121d157fe5b0414610fd95760405162461bcd60e51b81526004018080602001828103825260218152602001806141526021913960400191505060405180910390fd5b600082820183811015610fd9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610fd983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506134be565b6000610fd983836040518060400160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250613523565b60025490565b6001600160a01b038083166000908152600e60209081526040808320938516835292905290812054610fd99061234961232a85611487565b6001600160a01b0387166000908152600b6020526040902054906121b5565b90613585565b6001600160a01b031660009081526001602052604090205490565b6000612374612e71565b828161237c57fe5b0492915050565b6040805163555ddc6560e11b81526001600160a01b03871660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89560248201529051600091731820a4b7618bde71dce8cdc73aab6c95905fad249163aabbb8ca91604480820192602092909190829003018186803b15801561240757600080fd5b505afa15801561241b573d6000803e3d6000fd5b505050506040513d602081101561243157600080fd5b505190506001600160a01b038116156125a757806001600160a01b03166375ab97828888888888886040518763ffffffff1660e01b815260040180876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156124dc5781810151838201526020016124c4565b50505050905090810190601f1680156125095780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561253c578181015183820152602001612524565b50505050905090810190601f1680156125695780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b15801561258e57600080fd5b505af11580156125a2573d6000803e3d6000fd5b505050505b50505050505050565b60006125bb86611487565b905060005b6009548110156126df576000600982815481106125d957fe5b60009182526020822001546001600160a01b0316915061260784610fbd89612601868e6122f2565b906121b5565b6001600160a01b0383166000908152600b60205260408120549192509061263a90612633908a906121b5565b8390613585565b6001600160a01b038085166000908152600e60209081526040808320938f168352929052205490915061266d90826135ea565b6001600160a01b038481166000908152600e602090815260408083208f8516845290915280822093909355908b16815220546126a99082613585565b6001600160a01b039384166000908152600e60209081526040808320968d168352959052939093209290925550506001016125c0565b506125a787878787878761364f565b6000818484111561277d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561274257818101518382015260200161272a565b50505050905090810190601f16801561276f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6040805163555ddc6560e11b81526001600160a01b03871660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248201529051600091731820a4b7618bde71dce8cdc73aab6c95905fad249163aabbb8ca91604480820192602092909190829003018186803b15801561280957600080fd5b505afa15801561281d573d6000803e3d6000fd5b505050506040513d602081101561283357600080fd5b505190506001600160a01b038116156129ac57806001600160a01b03166223de298989898989896040518763ffffffff1660e01b815260040180876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156128dd5781810151838201526020016128c5565b50505050905090810190601f16801561290a5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561293d578181015183820152602001612925565b50505050905090810190601f16801561296a5780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b15801561298f57600080fd5b505af11580156129a3573d6000803e3d6000fd5b50505050610d56565b8115610d56576129c4866001600160a01b0316613971565b15610d56576040805162461bcd60e51b815260206004820152601960248201527f4e4f5420455243373737546f6b656e73526563697069656e7400000000000000604482015290519081900360640190fd5b6000612a26826305f5e1006121b5565b9050612a3285856122f2565b811115612a3e57600080fd5b6001600160a01b038086166000908152600e6020908152604080832093881683529290522054612a6e90826135ea565b6001600160a01b038087166000818152600e60209081526040808320948a16835293815283822094909455908152600d909252902054612aae9083612f79565b6001600160a01b038087166000818152600d6020908152604080832095909555845163a9059cbb60e01b81529388166004850152602484018790529351919363a9059cbb936044808201949293918390030190829087803b158015612b1257600080fd5b505af1158015612b26573d6000803e3d6000fd5b505050506040513d60208110156125a757600080fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938a169392918291908083835b60208310612bc15780518252601f199092019160209182019101612ba2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612c23576040519150601f19603f3d011682016040523d82523d6000602084013e612c28565b606091505b5091509150818015612c56575080511580612c565750808060200190516020811015612c5357600080fd5b50515b612c915760405162461bcd60e51b81526004018080602001828103825260248152602001806141976024913960400191505060405180910390fd5b505050505050565b6000612ca3612e71565b909102919050565b612cb483612120565b612cc084848484613977565b60005b60095481101561148057600060098281548110612cdc57fe5b60009182526020808320909101546001600160a01b0316808352600b9091526040822054909250612d0e9087906121b5565b6001600160a01b038084166000908152600e60209081526040808320938c1683529290522054909150612d4190826135ea565b6001600160a01b039283166000908152600e60209081526040808320958b168352949052929092209190915550600101612cc3565b612d7f83612120565b6000612d8a85611487565b9050600084612d97610f61565b03905060005b600954811015612e6457600060098281548110612db657fe5b6000918252602090912001546001600160a01b031690508215612e34576000612de785610fbd8a612601868e6122f2565b9050612e15612df68286612268565b6001600160a01b0384166000908152600b60205260409020549061220e565b6001600160a01b0383166000908152600b602052604090205550612e5b565b6001600160a01b0381166000908152600b60209081526040808320839055600d9091528120555b50600101612d9d565b50612c9186868686613bf8565b600054601203600a0a90565b6000612ea983856040518060200160405280600081525060405180602001604052806000815250612d76565b612eb28461236a565b9050610fd97f00000000000000000000000000000000000000000000000000000000000000008383613ea6565b6000612ee961214f565b9050612ef9818888888888612383565b612f078188888888886125b0565b6125a781888888888888612785565b6000612f447f0000000000000000000000000000000000000000000000000000000000000000843085612b3c565b612f4d82612c99565b9050610e1983826040518060200160405280600081525060405180602001604052806000815250612cab565b6000610fd983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506126ee565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b031985161781529151815160609360009385936001600160a01b03891693919290918291908083835b602083106130275780518252601f199092019160209182019101613008565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114613087576040519150601f19603f3d011682016040523d82523d6000602084013e61308c565b606091505b509150915081158061309d57508051155b156130bb576040518060200160405280600081525092505050610e19565b8051602014156130f35760008180602001905160208110156130dc57600080fd5b505190506130e981614009565b9350505050610e19565b6040815111156131c95780806020019051602081101561311257600080fd5b8101908080516040519392919084600160201b82111561313157600080fd5b90830190602082018581111561314657600080fd5b8251600160201b81118282018810171561315f57600080fd5b82525081516020918201929091019080838360005b8381101561318c578181015183820152602001613174565b50505050905090810190601f1680156131b95780820380516001836020036101000a031916815260200191505b5060405250505092505050610e19565b50506040805160208101909152600081529392505050565b6060610e19826028611fbd565b6060610e19826006611fbd565b6000600a8260ff16101561321657506030810160f81b611080565b506037810160f81b611080565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561328657600080fd5b505afa15801561329a573d6000803e3d6000fd5b505050506040513d60208110156132b057600080fd5b50516001600160a01b0316146132f7576040805162461bcd60e51b81526020600482015260076024820152661253959053125160ca1b604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561336657600080fd5b505afa15801561337a573d6000803e3d6000fd5b505050506040513d602081101561339057600080fd5b5051905061339f848084613ea6565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561340e57600080fd5b505afa158015613422573d6000803e3d6000fd5b505050506040513d602081101561343857600080fd5b50519050600061345061344b8385612f79565b612c99565b905060008111613494576040805162461bcd60e51b815260206004820152600a6024820152694e4f2d5550475241444560b01b604482015290519081900360640190fd5b612c9185826040518060200160405280600081525060405180602001604052806000815250612cab565b6000818361350d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561274257818101518382015260200161272a565b50600083858161351957fe5b0495945050505050565b600081836135725760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561274257818101518382015260200161272a565b5082848161357c57fe5b06949350505050565b600081830381831280159061359a5750838113155b806135af57506000831280156135af57508381135b610fd95760405162461bcd60e51b81526004018080602001828103825260248152602001806141736024913960400191505060405180910390fd5b60008282018183128015906135ff5750838112155b80613614575060008312801561361457508381125b610fd95760405162461bcd60e51b81526004018080602001828103825260218152602001806141316021913960400191505060405180910390fd5b6001600160a01b03851661369e576040805162461bcd60e51b81526020600482015260116024820152704552433737373a2053454e442d5a45524f60781b604482015290519081900360640190fd5b6001600160a01b0384166136ed576040805162461bcd60e51b81526020600482015260116024820152704552433737373a2053454e442d5a45524f60781b604482015290519081900360640190fd5b6136f5612e71565b83816136fd57fe5b0615613743576040805162461bcd60e51b815260206004820152601060248201526f22a9219b9b9b9d102120a216a3a920a760811b604482015290519081900360640190fd5b61374f86868686611255565b60408051808201825260138152724552433737373a2053454e442d45584345535360681b6020808301919091526001600160a01b0388166000908152600190915291909120546137a09185906126ee565b6001600160a01b0380871660009081526001602052604080822093909355908616815220546137cf908461220e565b60016000866001600160a01b03166001600160a01b0316815260200190815260200160002081905550836001600160a01b0316856001600160a01b0316876001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987868686604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015613881578181015183820152602001613869565b50505050905090810190601f1680156138ae5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156138e15781810151838201526020016138c9565b50505050905090810190601f16801561390e5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a4836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3505050505050565b3b151590565b6001600160a01b0384166139c6576040805162461bcd60e51b81526020600482015260116024820152704552433737373a204d494e542d5a45524f60781b604482015290519081900360640190fd5b6139ce612e71565b83816139d657fe5b0615613a1c576040805162461bcd60e51b815260206004820152601060248201526f22a9219b9b9b9d102120a216a3a920a760811b604482015290519081900360640190fd5b6000613a2661214f565b9050613a358160008787611255565b600254613a42908561220e565b6002556001600160a01b038516600090815260016020526040902054613a68908561220e565b6001600160a01b038616600090815260016020526040812091909155613a949082908787878784612785565b846001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d868686604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015613b13578181015183820152602001613afb565b50505050905090810190601f168015613b405780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015613b73578181015183820152602001613b5b565b50505050905090810190601f168015613ba05780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a36040805185815290516001600160a01b038716916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050505050565b6001600160a01b038416613c47576040805162461bcd60e51b81526020600482015260116024820152704552433737373a204255524e2d5a45524f60781b604482015290519081900360640190fd5b613c4f612e71565b8381613c5757fe5b0615613c9d576040805162461bcd60e51b815260206004820152601060248201526f22a9219b9b9b9d102120a216a3a920a760811b604482015290519081900360640190fd5b6000613ca761214f565b9050613cb68186600087611255565b613cc581866000878787612383565b60408051808201825260138152724552433737373a204255524e2d45584345535360681b6020808301919091526001600160a01b038816600090815260019091529190912054613d169186906126ee565b6001600160a01b038616600090815260016020526040902055600254613d3c9085612f79565b600281905550846001600160a01b0316816001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098868686604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015613dc1578181015183820152602001613da9565b50505050905090810190601f168015613dee5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015613e21578181015183820152602001613e09565b50505050905090810190601f168015613e4e5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a36040805185815290516000916001600160a01b038816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b60208310613f235780518252601f199092019160209182019101613f04565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613f85576040519150601f19603f3d011682016040523d82523d6000602084013e613f8a565b606091505b5091509150818015613fb8575080511580613fb85750808060200190516020811015613fb557600080fd5b50515b611480576040805162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b6040805160208082528183019092526060918291906020820181803683370190505090506000805b602081101561409257600085826020811061404857fe5b1a60f81b90506001600160f81b0319811615614089578084848151811061406b57fe5b60200101906001600160f81b031916908160001a9053506001909201915b50600101614031565b5060608167ffffffffffffffff811180156140ac57600080fd5b506040519080825280601f01601f1916602001820160405280156140d7576020820181803683370190505b50905060005b82811015614127578381815181106140f157fe5b602001015160f81c60f81b82828151811061410857fe5b60200101906001600160f81b031916908160001a9053506001016140dd565b5094935050505056fe5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f775472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a26469706673582212209636c8a6e0c017a81862d852f49656f6dff3b4dc6da785a8f9e2aef200b41c8664736f6c634300060c00330000000000000000000000001820a4b7618bde71dce8cdc73aab6c95905fad24a2646970667358221220b86e0a4c06f809e9daae2ab027c61431b4dc2527350a86f77f548279358807b564736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4858,
        "contract": "contracts/farming/FarmerTokenFactory.sol:FarmerTokenFactory",
        "label": "_nextToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4861,
        "contract": "contracts/farming/FarmerTokenFactory.sol:FarmerTokenFactory",
        "label": "_rewards",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x256E8486d445b66b67c4aeE7b55dD502ed6A9e43",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolWrapper",
          "type": "address"
        }
      ],
      "name": "AdapterCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "POOL_ADAPTER_BYTECODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolWrapper",
          "type": "address"
        }
      ],
      "name": "calculateAdapterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "calculatedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolWrapper",
          "type": "address"
        }
      ],
      "name": "createAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolWrapper",
          "type": "address"
        }
      ],
      "name": "getAdapterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "wrapperAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x82bc6cdd4e8f2c05065e10dcad805be6bf529f9fb7c67e53a550bd040ae0fd7e",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x2E65c74c304703c7D6400A0084550eaB31f7E442",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1602404",
    "logsBloom": "0x
    "blockHash": "0xc8431baf14fdf1f2626cae410fe0e0e611fa5fdf4740147c7a74e7e001afc55d",
    "transactionHash": "0x82bc6cdd4e8f2c05065e10dcad805be6bf529f9fb7c67e53a550bd040ae0fd7e",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 22278953,
        "transactionHash": "0x82bc6cdd4e8f2c05065e10dcad805be6bf529f9fb7c67e53a550bd040ae0fd7e",
        "address": "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24",
        "topics": [
          "0x93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153",
          "0x000000000000000000000000256e8486d445b66b67c4aee7b55dd502ed6a9e43",
          "0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b",
          "0x000000000000000000000000256e8486d445b66b67c4aee7b55dd502ed6a9e43"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xc8431baf14fdf1f2626cae410fe0e0e611fa5fdf4740147c7a74e7e001afc55d"
      }
    ],
    "blockNumber": 22278953,
    "cumulativeGasUsed": "1627779",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
  ],
  "solcInputHash": "f8e8bb3d68a03bedfebe384b804318ef",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolWrapper\",\"type\":\"address\"}],\"name\":\"AdapterCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL_ADAPTER_BYTECODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolWrapper\",\"type\":\"address\"}],\"name\":\"calculateAdapterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"calculatedAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolWrapper\",\"type\":\"address\"}],\"name\":\"createAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolWrapper\",\"type\":\"address\"}],\"name\":\"getAdapterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wrapperAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocols/uniswap/UniswapPoolAdapterFactory.sol\":\"UniswapPoolAdapterFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0xdf8d7d1a119fc0d9f73a5c7a5d21bb0a4e0acb2a61e393c26334d397db628768\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0x7846aa81baa00557eba6215442eab916bc98f2e692fdc7b8523cf31122dc8e28\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc9e219f9060c261ab6d140f448ccdcb207ce9835f0d2868d2c5d4a93486d2208\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Sender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * {IERC777} Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n *  their own implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Sender {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe4be617d1e043920582d2ec0bc1fe3985a3a49cfedac80c0cf0b9ea5d31044b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/AddressStringUtil.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nlibrary AddressStringUtil {\\n    // converts an address to the uppercase hex string, extracting only len bytes (up to 20, multiple of 2)\\n    function toAsciiString(address addr, uint len) pure internal returns (string memory) {\\n        require(len % 2 == 0 && len > 0 && len <= 40, \\\"AddressStringUtil: INVALID_LEN\\\");\\n\\n        bytes memory s = new bytes(len);\\n        uint addrNum = uint(addr);\\n        for (uint i = 0; i < len / 2; i++) {\\n            // shift right and truncate all but the least significant byte to extract the byte at position 19-i\\n            uint8 b = uint8(addrNum >> (8 * (19 - i)));\\n            // first hex character is the most significant 4 bits\\n            uint8 hi = b >> 4;\\n            // second hex character is the least significant 4 bits\\n            uint8 lo = b - (hi << 4);\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n        return string(s);\\n    }\\n\\n    // hi and lo are only 4 bits and between 0 and 16\\n    // this method converts those values to the unicode/ascii code point for the hex representation\\n    // uses upper case for the characters\\n    function char(uint8 b) pure private returns (byte c) {\\n        if (b < 10) {\\n            return byte(b + 0x30);\\n        } else {\\n            return byte(b + 0x37);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1bb0aa768111c1d4734a4962e653beacf8f830b943d0dc83a0a6ff214762b9b1\"},\"@uniswap/lib/contracts/libraries/SafeERC20Namer.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport './AddressStringUtil.sol';\\n\\n// produces token descriptors from inconsistent or absent ERC20 symbol implementations that can return string or bytes32\\n// this library will always produce a string symbol to represent the token\\nlibrary SafeERC20Namer {\\n    function bytes32ToString(bytes32 x) pure private returns (string memory) {\\n        bytes memory bytesString = new bytes(32);\\n        uint charCount = 0;\\n        for (uint j = 0; j < 32; j++) {\\n            byte char = x[j];\\n            if (char != 0) {\\n                bytesString[charCount] = char;\\n                charCount++;\\n            }\\n        }\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint j = 0; j < charCount; j++) {\\n            bytesStringTrimmed[j] = bytesString[j];\\n        }\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    // assumes the data is in position 2\\n    function parseStringData(bytes memory b) pure private returns (string memory) {\\n        uint charCount = 0;\\n        // first parse the charCount out of the data\\n        for (uint i = 32; i < 64; i++) {\\n            charCount <<= 8;\\n            charCount += uint8(b[i]);\\n        }\\n\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint i = 0; i < charCount; i++) {\\n            bytesStringTrimmed[i] = b[i + 64];\\n        }\\n\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    // uses a heuristic to produce a token name from the address\\n    // the heuristic returns the full hex of the address string in upper case\\n    function addressToName(address token) pure private returns (string memory) {\\n        return AddressStringUtil.toAsciiString(token, 40);\\n    }\\n\\n    // uses a heuristic to produce a token symbol from the address\\n    // the heuristic returns the first 6 hex of the address string in upper case\\n    function addressToSymbol(address token) pure private returns (string memory) {\\n        return AddressStringUtil.toAsciiString(token, 6);\\n    }\\n\\n    // calls an external view token contract method that returns a symbol or name, and parses the output into a string\\n    function callAndParseStringReturn(address token, bytes4 selector) view private returns (string memory) {\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(selector));\\n        // if not implemented, or returns empty data, return empty string\\n        if (!success || data.length == 0) {\\n            return \\\"\\\";\\n        }\\n        // bytes32 data always has length 32\\n        if (data.length == 32) {\\n            bytes32 decoded = abi.decode(data, (bytes32));\\n            return bytes32ToString(decoded);\\n        } else if (data.length > 64) {\\n            return abi.decode(data, (string));\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    // attempts to extract the token symbol. if it does not implement symbol, returns a symbol derived from the address\\n    function tokenSymbol(address token) internal view returns (string memory) {\\n        // 0x95d89b41 = bytes4(keccak256(\\\"symbol()\\\"))\\n        string memory symbol = callAndParseStringReturn(token, 0x95d89b41);\\n        if (bytes(symbol).length == 0) {\\n            // fallback to 6 uppercase hex of address\\n            return addressToSymbol(token);\\n        }\\n        return symbol;\\n    }\\n\\n    // attempts to extract the token name. if it does not implement name, returns a name derived from the address\\n    function tokenName(address token) internal view returns (string memory) {\\n        // 0x06fdde03 = bytes4(keccak256(\\\"name()\\\"))\\n        string memory name = callAndParseStringReturn(token, 0x06fdde03);\\n        if (bytes(name).length == 0) {\\n            // fallback to full hex of address\\n            return addressToName(token);\\n        }\\n        return name;\\n    }\\n}\\n\",\"keccak256\":\"0xc1be16d8f1d66356523a20a74ee345a12ce7870276fe1b5470229f59e6ba50be\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\",\"keccak256\":\"0x0920a26df9837a073c6b24c4e2542d9409c173748e0c6728a1ae39ce5c368899\"},\"contracts/InfiniteApprove.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract InfiniteApprove {\\n  uint256 internal constant INFINITY = uint256(-1);\\n\\n  function infiniteApprove(ERC20 _token, address spender, uint256 amount) internal {\\n    if (_token.allowance(address(this), spender) < amount) {\\n      _token.approve(spender, INFINITY);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x483feb35fe8854b113e1dd463ecc671c8ce0818701ab6096ffa1e5e0cbac11fe\",\"license\":\"MIT\"},\"contracts/Receiver.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\\\";\\n\\nabstract contract Receiver is IERC777Recipient {\\n  IERC1820Registry constant internal ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n  constructor() internal {\\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777TokensRecipient\\\"), address(this));\\n  }\\n\\n  function _tokensReceived(IERC777 token, address from, uint256 amount, bytes memory data) internal virtual;\\n\\n  function _canReceive(address token) internal virtual {}\\n\\n  function tokensReceived(\\n    address /*operator*/,\\n    address from,\\n    address /*to*/,\\n    uint256 amount,\\n    bytes calldata userData,\\n    bytes calldata /*operatorData*/\\n  ) external override {\\n    _canReceive(msg.sender);\\n\\n    _tokensReceived(IERC777(msg.sender), from, amount, userData);\\n  }\\n}\\n\",\"keccak256\":\"0x1269ee8e3360faa6b252f330c1028b4a8d51ab1591ceb7b1cba6039b7c988904\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n  function deposit() external payable;\\n\\n  function withdraw(uint wad) external;\\n}\\n\",\"keccak256\":\"0x607680732136c15b22907f939ba9a2f88fdb7008167da836ca86ad0a83ad6115\",\"license\":\"MIT\"},\"contracts/protocols/uniswap/IUniswapAdapterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"./interfaces/IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapAdapterFactory {\\n  function nextToken() external view returns (address);\\n\\n  function uniswapRouter() external view returns (IUniswapV2Router01);\\n}\\n\",\"keccak256\":\"0x8a15d4cb5b8ad796d23e364ca55b6d76808afd5e8dd50ae9c46bec80ec6b899e\",\"license\":\"MIT\"},\"contracts/protocols/uniswap/UniswapPoolAdapter.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../../tokens/Wrapped777.sol\\\";\\nimport \\\"../../Receiver.sol\\\";\\nimport \\\"../../InfiniteApprove.sol\\\";\\nimport \\\"../../interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router01.sol\\\";\\nimport \\\"./IUniswapAdapterFactory.sol\\\";\\n\\n\\ncontract UniswapPoolAdapter is Receiver, InfiniteApprove {\\n  using SafeMath for uint256;\\n\\n  Wrapped777 public immutable wrapper;\\n  IUniswapV2Pair public immutable pool;\\n\\n  ERC20 public immutable token0;\\n  ERC20 public immutable token1;\\n\\n  address private immutable weth;\\n\\n  constructor() public {\\n    IUniswapAdapterFactory factory = IUniswapAdapterFactory(msg.sender);\\n    Wrapped777 _wrapper = Wrapped777(factory.nextToken());\\n    wrapper = _wrapper;\\n\\n    IUniswapV2Pair _pool = IUniswapV2Pair(address(_wrapper.token()));\\n    pool = _pool;\\n\\n    token0 = _pool.token0();\\n    token1 = _pool.token1();\\n\\n    weth = factory.uniswapRouter().WETH();\\n  }\\n\\n  receive() external payable {\\n    if (address(token0) != weth && address(token1) != weth) {\\n      revert('NoETH');\\n    }\\n\\n    IWETH(weth).deposit{ value: msg.value }();\\n\\n    swapHalfAddLiquidityAndReturn(weth, msg.value, msg.sender);\\n  }\\n\\n  function _tokensReceived(IERC777 _token, address from, uint256 amount, bytes memory /*data*/) internal override {\\n    Wrapped777 inputWrapper = Wrapped777(address(_token));\\n    ERC20 unwrappedInput = inputWrapper.token();\\n\\n    uint unwrappedBalance = inputWrapper.unwrap(amount);\\n\\n    if (address(unwrappedInput) == address(token0) || address(unwrappedInput) == address(token1)) {\\n      // Swap half of the token so it can add liquidity\\n      swapHalfAddLiquidityAndReturn(address(unwrappedInput), unwrappedBalance, from);\\n    } else if (address(unwrappedInput) == address(pool)) {\\n      // If receiving an LP token wrapper, remove liquidity and send the tokens to the sender\\n      // Note: this sends the unwrapped tokens\\n      pool.burn(from);\\n    } else {\\n      revert(\\\"Invalid\\\");\\n    }\\n  }\\n\\n  function swapHalfAddLiquidityAndReturn(address token, uint256 amount, address recipient) private {\\n    (uint256 outputAmount, uint256 keepAmount) = swapHalf(token, amount);\\n\\n    (uint256 amount0, uint256 amount1) = token == address(token0)\\n      ? (keepAmount, outputAmount)\\n      : (outputAmount, keepAmount);\\n\\n    uint256 poolTokens = addLiquidity(amount0, amount1);\\n    wrapAndReturn(recipient, poolTokens);\\n  }\\n\\n  function swapHalf(address input, uint256 amount) private returns (uint256 outputAmount, uint256 keepAmount) {\\n    (uint256 res0, uint256 res1, ) = pool.getReserves();\\n\\n    uint256 swapReserve = input == address(token0) ? res0 : res1;\\n    uint256 outReserve = input == address(token0) ? res1 : res0;\\n\\n    uint256 swapAmount = calculateSwapInAmount(swapReserve, amount);\\n    keepAmount = amount - swapAmount;\\n    ERC20(input).transfer(address(pool), swapAmount);\\n\\n    outputAmount = getAmountOut(swapAmount, swapReserve, outReserve);\\n    (uint amount0Out, uint amount1Out) = input == address(token0)\\n      ? (uint(0), outputAmount)\\n      : (outputAmount, uint(0));\\n    pool.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n  }\\n\\n  function addLiquidity(uint256 amount0, uint256 amount1) private returns (uint256 poolTokens) {\\n    token0.transfer(address(pool), amount0);\\n    token1.transfer(address(pool), amount1);\\n    poolTokens = pool.mint(address(this));\\n  }\\n\\n  function wrapAndReturn(address recipient, uint256 amount) private {\\n    infiniteApprove(wrapper.token(), address(wrapper), amount);\\n    wrapper.wrapTo(amount, recipient);\\n  }\\n\\n  function calculateSwapInAmount(uint256 reserveIn, uint256 userIn) public pure returns (uint256 amount) {\\n    amount = sqrt(reserveIn.mul(userIn.mul(3988000) + reserveIn.mul(3988009))).sub(reserveIn.mul(1997)) / 1994;\\n\\n    if (amount == 0) {\\n      amount = userIn / 2;\\n    }\\n  }\\n\\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n    uint amountInWithFee = amountIn.mul(997);\\n    uint numerator = amountInWithFee.mul(reserveOut);\\n    uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n    amountOut = numerator / denominator;\\n  }\\n\\n  function sqrt(uint256 y) internal pure returns (uint256 z) {\\n    if (y > 3) {\\n      z = y;\\n      uint256 x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n    // else z = 0\\n  }\\n}\\n\",\"keccak256\":\"0x385dd00f59709991a815bf1761bfb2e698c0f45498044e02b54c7c83442ce290\"},\"contracts/protocols/uniswap/UniswapPoolAdapterFactory.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"../../tokens/Wrapped777.sol\\\";\\nimport \\\"../../Receiver.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router01.sol\\\";\\nimport \\\"./IUniswapAdapterFactory.sol\\\";\\nimport \\\"./UniswapPoolAdapter.sol\\\";\\n\\ncontract UniswapPoolAdapterFactory is Receiver, IUniswapAdapterFactory {\\n  using Address for address;\\n\\n  bytes32 public constant POOL_ADAPTER_BYTECODE_HASH = keccak256(type(UniswapPoolAdapter).creationCode);\\n\\n  address private _nextToken;\\n  address private immutable _router;\\n\\n  event AdapterCreated(address poolWrapper);\\n\\n  constructor(address __router) public {\\n    _router = __router;\\n  }\\n\\n  function calculateAdapterAddress(address poolWrapper) public view returns (address calculatedAddress) {\\n    calculatedAddress = address(uint(keccak256(abi.encodePacked(\\n      byte(0xff),\\n      address(this),\\n      bytes32(uint(poolWrapper)),\\n      POOL_ADAPTER_BYTECODE_HASH\\n    ))));\\n  }\\n\\n  function createAdapter(address poolWrapper) public {\\n    _nextToken = poolWrapper;\\n    new UniswapPoolAdapter{salt: bytes32(uint(poolWrapper))}();\\n    _nextToken = address(0);\\n\\n    emit AdapterCreated(poolWrapper);\\n  }\\n\\n  function getAdapterAddress(address poolWrapper) public returns (address wrapperAddress) {\\n    wrapperAddress = calculateAdapterAddress(poolWrapper);\\n\\n    if(!wrapperAddress.isContract()) {\\n      createAdapter(poolWrapper);\\n      assert(wrapperAddress.isContract());\\n    }\\n  }\\n\\n  function nextToken() external override view returns (address) {\\n    return _nextToken;\\n  }\\n\\n  function uniswapRouter() external override view returns (IUniswapV2Router01) {\\n    return IUniswapV2Router01(_router);\\n  }\\n\\n  function _tokensReceived(IERC777, address, uint256, bytes memory) internal override {\\n    revert('Receiving tokens not allowed');\\n  }\\n}\\n\",\"keccak256\":\"0xc0cec3c7cf2a34768e35044515126811a12a1061276489dc5124ef4c15687fc2\"},\"contracts/protocols/uniswap/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    // function feeTo() external view returns (address);\\n    // function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    // function allPairs(uint) external view returns (address pair);\\n    // function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    // function setFeeTo(address) external;\\n    // function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x87cd56205830c95499864d034cdb0aae508f494d18dc72e3c06c531079f9db19\"},\"contracts/protocols/uniswap/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (ERC20);\\n    function token1() external view returns (ERC20);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x2df72bb645f5475187c1e2de07bd5b5961cb896ff98ecfca4f161ee75cac7ad1\"},\"contracts/protocols/uniswap/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Factory.sol';\\n// import './IUniswapV2Library.sol';\\n\\ninterface IUniswapV2Router01 /*is IUniswapV2Library*/ {\\n    function WETH() external view returns (address);\\n    function factory() external view returns (IUniswapV2Factory);\\n\\n    // function addLiquidity(\\n    //     address tokenA,\\n    //     address tokenB,\\n    //     uint amountADesired,\\n    //     uint amountBDesired,\\n    //     uint amountAMin,\\n    //     uint amountBMin,\\n    //     address to,\\n    //     uint deadline\\n    // ) external returns (uint amountA, uint amountB, uint liquidity);\\n    // function addLiquidityETH(\\n    //     address token,\\n    //     uint amountTokenDesired,\\n    //     uint amountTokenMin,\\n    //     uint amountETHMin,\\n    //     address to,\\n    //     uint deadline\\n    // ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    // function removeLiquidity(\\n    //     address tokenA,\\n    //     address tokenB,\\n    //     uint liquidity,\\n    //     uint amountAMin,\\n    //     uint amountBMin,\\n    //     address to,\\n    //     uint deadline\\n    // ) external returns (uint amountA, uint amountB);\\n    // function removeLiquidityETH(\\n    //     address token,\\n    //     uint liquidity,\\n    //     uint amountTokenMin,\\n    //     uint amountETHMin,\\n    //     address to,\\n    //     uint deadline\\n    // ) external returns (uint amountToken, uint amountETH);\\n    // function removeLiquidityWithPermit(\\n    //     address tokenA,\\n    //     address tokenB,\\n    //     uint liquidity,\\n    //     uint amountAMin,\\n    //     uint amountBMin,\\n    //     address to,\\n    //     uint deadline,\\n    //     bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    // ) external returns (uint amountA, uint amountB);\\n    // function removeLiquidityETHWithPermit(\\n    //     address token,\\n    //     uint liquidity,\\n    //     uint amountTokenMin,\\n    //     uint amountETHMin,\\n    //     address to,\\n    //     uint deadline,\\n    //     bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    // ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    // function swapTokensForExactTokens(\\n    //     uint amountOut,\\n    //     uint amountInMax,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint deadline\\n    // ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    // function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    //     external\\n    //     returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    // function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    //     external\\n    //     payable\\n    //     returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xa6394a85c98e39a5cdae7aa128a730562552762e6f08dc272658adb85b42e57e\"},\"contracts/tokens/ERC777WithGranularity.sol\":{\"content\":\"\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Sender.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\\\";\\nimport \\\"./Granularity.sol\\\";\\n\\n/**\\n * @dev Copies the OpenZeppelin ERC777, but adds support for Granularity.\\n */\\ncontract ERC777WithGranularity is Context, IERC777, IERC20, Granularity {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string internal _name;\\n    string internal _symbol;\\n\\n    // We inline the result of the following hashes because Solidity doesn't resolve them at compile time.\\n    // See https://github.com/ethereum/solidity/issues/4024.\\n\\n    // keccak256(\\\"ERC777TokensSender\\\")\\n    bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH =\\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\\n\\n    // keccak256(\\\"ERC777TokensRecipient\\\")\\n    bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH =\\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\\n\\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    // mapping(address => bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address => mapping(address => bool)) private _operators;\\n    // mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    constructor(\\n        // string memory name,\\n        // string memory symbol,\\n        // address[] memory defaultOperators\\n    ) public {\\n        // _name = name;\\n        // _symbol = symbol;\\n\\n        // _defaultOperatorsArray = defaultOperators;\\n        // for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\\n        //     _defaultOperators[_defaultOperatorsArray[i]] = true;\\n        // }\\n\\n        // register interfaces\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC777-name}.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-symbol}.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-decimals}.\\n     *\\n     * Always returns 18, as per the\\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n     */\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-granularity}.\\n     *\\n     * This implementation always returns `1`.\\n     */\\n    function granularity() public view override returns (uint256) {\\n        return getGranularity();\\n    }\\n\\n    /**\\n     * @dev See {IERC777-totalSupply}.\\n     */\\n    function totalSupply() public view override(IERC20, IERC777) virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\\n     */\\n    function balanceOf(address tokenHolder) public view override(IERC20, IERC777) virtual returns (uint256) {\\n        return _balances[tokenHolder];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-send}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function send(address recipient, uint256 amount, bytes memory data) public override  {\\n        _send(_msgSender(), recipient, amount, data, \\\"\\\", true);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n     * interface if it is a contract.\\n     *\\n     * Also emits a {Sent} event.\\n     */\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        address from = _msgSender();\\n\\n        _callTokensToSend(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _callTokensReceived(from, from, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-burn}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function burn(uint256 amount, bytes memory data) public override  {\\n        _burn(_msgSender(), amount, data, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC777-isOperatorFor}.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        address tokenHolder\\n    ) public view override returns (bool) {\\n        return operator == tokenHolder ||\\n            // (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\\n            _operators[tokenHolder][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-authorizeOperator}.\\n     */\\n    function authorizeOperator(address operator) public override  {\\n        require(_msgSender() != operator, \\\"SELF-OPER\\\");\\n\\n        // if (_defaultOperators[operator]) {\\n        //     delete _revokedDefaultOperators[_msgSender()][operator];\\n        // } else {\\n            _operators[_msgSender()][operator] = true;\\n        // }\\n\\n        emit AuthorizedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-revokeOperator}.\\n     */\\n    function revokeOperator(address operator) public override  {\\n        require(operator != _msgSender(), \\\"SELF-OPER\\\");\\n\\n        // if (_defaultOperators[operator]) {\\n        //     _revokedDefaultOperators[_msgSender()][operator] = true;\\n        // } else {\\n            delete _operators[_msgSender()][operator];\\n        // }\\n\\n        emit RevokedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-defaultOperators}.\\n     */\\n    function defaultOperators() public view override returns (address[] memory operators) {\\n        // return _defaultOperatorsArray;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorSend}.\\n     *\\n     * Emits {Sent} and {IERC20-Transfer} events.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n    public override\\n    {\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777 NO-OPER\\\");\\n        _send(sender, recipient, amount, data, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorBurn}.\\n     *\\n     * Emits {Burned} and {IERC20-Transfer} events.\\n     */\\n    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public override {\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777 NO-OPER\\\");\\n        _burn(account, amount, data, operatorData);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators may\\n     * not have allowance, and accounts with allowance may not be operators\\n     * themselves.\\n     */\\n    function allowance(address holder, address spender) public view override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function approve(address spender, uint256 value) public override returns (bool) {\\n        address holder = _msgSender();\\n        _approve(holder, spender, value);\\n        return true;\\n    }\\n\\n   /**\\n    * @dev See {IERC20-transferFrom}.\\n    *\\n    * Note that operator and allowance concepts are orthogonal: operators cannot\\n    * call `transferFrom` (unless they have allowance), and accounts with\\n    * allowance cannot call `operatorSend` (unless they are operators).\\n    *\\n    * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\\n    */\\n    function transferFrom(address holder, address recipient, uint256 amount) public override returns (bool) {\\n        address spender = _msgSender();\\n\\n        _callTokensToSend(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n        _approve(holder, spender, _allowances[holder][spender].sub(amount, \\\"ERC777: OVER-ALLOW\\\"));\\n\\n        _callTokensReceived(spender, holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n    internal virtual\\n    {\\n        require(account != address(0), \\\"ERC777: MINT-ZERO\\\");\\n        require(amount % getGranularity() == 0, \\\"ERC777: BAD-GRAN\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, amount);\\n\\n        // Update state variables\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, false);\\n\\n        emit Minted(operator, account, amount, userData, operatorData);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Send tokens\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _send(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        internal\\n    {\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\n\\n        _move(operator, from, to, amount, userData, operatorData);\\n\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    /**\\n     * @dev Burn tokens\\n     * @param from address token holder address\\n     * @param amount uint256 amount of tokens to burn\\n     * @param data bytes extra information provided by the token holder\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n        internal virtual\\n    {\\n        require(from != address(0), \\\"ERC777: BURN-ZERO\\\");\\n        require(amount % getGranularity() == 0, \\\"ERC777: BAD-GRAN\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), amount);\\n\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\n\\n        // Update state variables\\n        _balances[from] = _balances[from].sub(amount, \\\"ERC777: BURN-EXCESS\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n\\n        emit Burned(operator, from, amount, data, operatorData);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function _move(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        internal virtual\\n    {\\n        require(from != address(0), \\\"ERC777: SEND-ZERO\\\");\\n        require(to != address(0), \\\"ERC777: SEND-ZERO\\\");\\n        require(amount % getGranularity() == 0, \\\"ERC777: BAD-GRAN\\\");\\n        _beforeTokenTransfer(operator, from, to, amount);\\n\\n        _balances[from] = _balances[from].sub(amount, \\\"ERC777: SEND-EXCESS\\\");\\n        _balances[to] = _balances[to].add(amount);\\n\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    function _approve(address holder, address spender, uint256 value) internal {\\n        // TODO: restore this require statement if this function becomes internal, or is called at a new callsite. It is\\n        // currently unnecessary.\\n        //require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n\\n        _allowances[holder][spender] = value;\\n        emit Approval(holder, spender, value);\\n    }\\n\\n    /**\\n     * @dev Call from.tokensToSend() if the interface is registered\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        private\\n    {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\\n     * tokensReceived() was not registered for the recipient\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        private\\n    {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\n        } else if (requireReceptionAck) {\\n            require(!to.isContract(), \\\"NOT ERC777TokensRecipient\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes\\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - when `from` is zero, `tokenId` will be minted for `to`.\\n     * - when `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address operator, address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca1e3de825745eda6d1e54a4b4b08c009863865935620eb4f34957af8b243390\"},\"contracts/tokens/Granularity.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.7.0;\\n\\ncontract Granularity {\\n  uint256 internal _decimals;\\n\\n  function setDecimals(uint decimals) internal {\\n    _decimals = decimals;\\n  }\\n\\n  function getGranularity() internal view returns (uint256) {\\n    return 10 ** (18 - _decimals);\\n  }\\n\\n  function from777to20(uint amount) internal view returns (uint256) {\\n    return amount / getGranularity();\\n  }\\n\\n  function from20to777(uint amount) internal view returns (uint256) {\\n    return amount * getGranularity();\\n  }\\n}\\n\",\"keccak256\":\"0x59ec254a11b53b5b6b2b7914daf8d9ee82cac27300c227a2fb894125a6ba8ee1\"},\"contracts/tokens/IPermit.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.7.0;\\n\\ninterface IPermit {\\n  // ERC-2612 permit\\n  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n  // Dai Permit\\n  function permit(address holder, address spender, uint256 nonce, uint256 expiry,\\n                  bool allowed, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0x1585af7d08b374bc0d5e8c7fb767107720e89e2dec2251e7bd59c9c6eed021ba\"},\"contracts/tokens/IWrapped777.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\n\\ninterface IWrapped777 is IERC777 {\\n  function token() external view returns (ERC20);\\n\\n  function wrap(uint256 amount) external returns (uint256);\\n  function wrapTo(uint256 amount, address recipient) external returns (uint256);\\n  function gulp(address recipient) external returns (uint256);\\n\\n  function unwrap(uint256 amount) external returns (uint256 unwrappedAmount);\\n  function unwrapTo(uint256 amount, address recipient) external returns (uint256 unwrappedAmount);\\n}\\n\",\"keccak256\":\"0xa9c16027288da13c83d0e438d6f91f9b8fa0d44dcf770a7f56e2dc6015dcb44f\"},\"contracts/tokens/IWrapperFactory.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.7.0;\\n\\ninterface IWrapperFactory {\\n  function nextToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x26b1f8f7a64441ed362f7d3111461593fdf6298a9ca50d423f7c0a2d5686b767\"},\"contracts/tokens/Wrapped777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/SafeERC20Namer.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../Receiver.sol\\\";\\nimport \\\"./ERC777WithGranularity.sol\\\";\\nimport \\\"./IWrapperFactory.sol\\\";\\nimport \\\"./IWrapped777.sol\\\";\\nimport \\\"./IPermit.sol\\\";\\n\\ncontract Wrapped777 is ERC777WithGranularity, Receiver, IWrapped777 {\\n  using SafeMath for uint256;\\n\\n  string public constant WRAPPER_VERSION = \\\"0.2.0\\\";\\n\\n  ERC20 public immutable override token;\\n\\n  event FlashMint(address indexed target, uint256 amount);\\n\\n  ////////// For permit:\\n  bytes32 public immutable DOMAIN_SEPARATOR;\\n  // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n  bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n  mapping(address => uint) public nonces;\\n\\n  constructor() public {\\n    address _token = IWrapperFactory(msg.sender).nextToken();\\n    token = ERC20(_token);\\n\\n    _name = string(abi.encodePacked(SafeERC20Namer.tokenName(_token), \\\"-777\\\"));\\n    _symbol = string(abi.encodePacked(SafeERC20Namer.tokenSymbol(_token), \\\"777\\\"));\\n\\n    setDecimals(ERC20(_token).decimals());\\n\\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"Wrapped777\\\"), address(this));\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n        keccak256(bytes(_name)),\\n        keccak256(bytes('1')),\\n        chainId(),\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  function totalSupply() public view override(ERC777WithGranularity, IERC777) returns (uint256) {\\n    return ERC777WithGranularity.totalSupply();\\n  }\\n\\n  function balanceOf(address tokenHolder) public view override(ERC777WithGranularity, IERC777) returns (uint256) {\\n    return ERC777WithGranularity.balanceOf(tokenHolder);\\n  }\\n\\n  /**\\n   * @dev Wraps ERC-20 tokens from the caller and sends wrapped tokens to the caller\\n   *\\n   * @param amount Number of tokens to wrap\\n   * @return Amount of wrapper tokens minted (same as the input amount if the token has 18 decimals)\\n   */\\n  function wrap(uint256 amount) external override returns (uint256) {\\n    address sender = _msgSender();\\n    return _wrap(sender, amount);\\n  }\\n\\n  /**\\n   * @dev Same as wrap(), but approves the token transfer using a ERC2612 permit signature\\n   *\\n   * @param value Number of tokens to wrap\\n   * @return Amount of wrapper tokens minted (same as the input amount if the token has 18 decimals)\\n   */\\n  function wrapWithPermit(uint value, uint deadline, uint256 nonce, uint8 v, bytes32 r, bytes32 s) external returns (uint256) {\\n    address sender = _msgSender();\\n    try IPermit(address(token)).permit(sender, address(this), value, deadline, v, r, s) {\\n    } catch {\\n      // Dai\\n      IPermit(address(token)).permit(sender, address(this), nonce, deadline, true /* allowed */, v, r, s);\\n    }\\n\\n    return _wrap(sender, value);\\n  }\\n\\n  function _wrap(address sender, uint256 amount) private returns (uint256 outputAmount) {\\n    TransferHelper.safeTransferFrom(address(token), sender, address(this), amount);\\n\\n    outputAmount = from20to777(amount);\\n    _mint(sender, outputAmount, \\\"\\\", \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same as wrap(), but allows setting a recipient address\\n   *\\n   * @param amount Number of tokens to wrap\\n   * @param recipient Address to receive tokens\\n   * @return outputAmount Amount of wrapper tokens minted (same as the input amount if the token has 18 decimals)\\n   */\\n  function wrapTo(uint256 amount, address recipient) external override returns (uint256 outputAmount) {\\n    address sender = _msgSender();\\n    TransferHelper.safeTransferFrom(address(token), sender, address(this), amount);\\n\\n    outputAmount = from20to777(amount);\\n    _mint(recipient, outputAmount, \\\"\\\", \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same as wrap(), but allows setting a recipient address\\n   *\\n   * @param amount Number of tokens to wrap\\n   * @param recipient Address to receive tokens\\n   * @return amount Amount of wrapper tokens minted (same as the input amount if the token has 18 decimals)\\n   */\\n  function gulp(address recipient) external override returns (uint256 amount) {\\n    amount = from20to777(token.balanceOf(address(this))).sub(ERC777WithGranularity.totalSupply());\\n    _mint(recipient, amount, \\\"\\\", \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Unwraps tokens from the sender, returns them the inner ERC-20\\n   *\\n   * @param amount Number of tokens to unwrap\\n   * @return unwrappedAmount Amount of unwrapped tokens (same as the input amount if the token has 18 decimals)\\n   */\\n  function unwrap(uint256 amount) external override returns (uint256 unwrappedAmount) {\\n    address sender = _msgSender();\\n    return _unwrap(amount, sender, sender);\\n  }\\n\\n\\n  /**\\n   * @dev Same as unwrap(), but sends unwrapped tokens to separate address\\n   *\\n   * @param amount Number of tokens to unwrap\\n   * @param recipient Address to receive the tokens\\n   * @return unwrappedAmount Amount of unwrapped tokens (same as the input amount if the token has 18 decimals)\\n   */\\n  function unwrapTo(uint256 amount, address recipient) external override returns (uint256 unwrappedAmount) {\\n    return _unwrap(amount, _msgSender(), recipient);\\n  }\\n\\n  function _unwrap(uint256 amount, address from, address recipient) private returns (uint256 unwrappedAmount) {\\n    _burn(from, amount, \\\"\\\", \\\"\\\");\\n\\n    unwrappedAmount = from777to20(amount);\\n    TransferHelper.safeTransfer(address(token), recipient, unwrappedAmount);\\n  }\\n\\n  function _tokensReceived(IERC777 _token, address from, uint256 amount, bytes memory) internal override {\\n    if (address(_token) != address(this)) {\\n      tryTokenUpgrade(address(_token), from, amount);\\n      return;\\n    }\\n\\n    _burn(address(this), amount, \\\"\\\", \\\"\\\");\\n\\n    uint256 adjustedAmount = from777to20(amount);\\n    TransferHelper.safeTransfer(address(token), from, adjustedAmount);\\n  }\\n\\n  /**\\n   * @dev Mints an unbounded amount of wrapper tokens to the target. Tokens must be repaid by the\\n   * end of the transaction, or it will revert.\\n   *\\n   * @param target Address to receive the tokens (must be a ERC777Recipient)\\n   * @param amount Number of tokens to mint\\n   * @param data Arbitrary data to pass to the receive hook\\n   */\\n  function flashMint(address target, uint256 amount, bytes calldata data) external {\\n    _mint(target, amount, data, '');\\n    _burn(target, amount, data, '');\\n\\n    emit FlashMint(target, amount);\\n  }\\n\\n  function tryTokenUpgrade(address oldWrapper, address sender, uint256 amount) private {\\n    if (address(Wrapped777(oldWrapper).token()) != address(token)) {\\n      revert(\\\"INVALID\\\");\\n    }\\n\\n    uint256 startingBalance = token.balanceOf(address(this));\\n\\n    TransferHelper.safeTransfer(oldWrapper, oldWrapper, amount);\\n\\n    uint256 endBalance = token.balanceOf(address(this));\\n\\n    uint256 numUpgradedTokens = from20to777(endBalance.sub(startingBalance));\\n    require(numUpgradedTokens > 0, \\\"NO-UPGRADE\\\");\\n\\n    _mint(sender, numUpgradedTokens, \\\"\\\", \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev ERC2612 permit\\n   */\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n    require(deadline >= block.timestamp, 'EXPIRED');\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        '\\\\x19\\\\x01',\\n        DOMAIN_SEPARATOR,\\n        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n      )\\n    );\\n    address recoveredAddress = ecrecover(digest, v, r, s);\\n    require(recoveredAddress != address(0) && recoveredAddress == owner, 'Permit INVALID_SIG');\\n    _approve(owner, spender, value);\\n  }\\n\\n  function chainId() private pure returns (uint _chainId) {\\n    assembly {\\n      _chainId := chainid()\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x87bc9058ec37219a73267488db1458879e907894c0a29c49f6fad9c092b78771\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611ca3380380611ca38339818101604052602081101561003357600080fd5b5051604080516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b602483015260448201529051731820a4b7618bde71dce8cdc73aab6c95905fad24916329965a1d91606480830192600092919082900301818387803b1580156100b457600080fd5b505af11580156100c8573d6000803e3d6000fd5b50505050606081901b6001600160601b0319166080526001600160a01b0316611ba56100fe6000398061031b5250611ba56000f3fe608060405234801561001057600080fd5b506004361061007c5760003560e01c80639240033a1161005b5780639240033a146101b75780639499ac54146101d1578063acf461f9146101d9578063dfbaee2e146101ff5761007c565b806223de29146100815780636f6654471461016d578063735de9f7146101af575b600080fd5b61016b600480360360c081101561009757600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a0810160808201356401000000008111156100da57600080fd5b8201836020820111156100ec57600080fd5b8035906020019184600183028401116401000000008311171561010e57600080fd5b91939092909160208101903564010000000081111561012c57600080fd5b82018360208201111561013e57600080fd5b8035906020019184600183028401116401000000008311171561016057600080fd5b509092509050610225565b005b6101936004803603602081101561018357600080fd5b50356001600160a01b031661027a565b604080516001600160a01b039092168252519081900360200190f35b610193610319565b6101bf61033d565b60408051918252519081900360200190f35b61019361036a565b61016b600480360360208110156101ef57600080fd5b50356001600160a01b0316610379565b6101936004803603602081101561021557600080fd5b50356001600160a01b0316610414565b61022e3361045d565b61027033888787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061046092505050565b5050505050505050565b6040516000906001600160f81b03199030906001600160a01b038516906102a3602082016104b3565b6020820181038252601f19601f820116604052508051906020012060405160200180856001600160f81b0319168152600101846001600160a01b031660601b81526014018381526020018281526020019450505050506040516020818303038152906040528051906020012060001c9050919050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60405161034c602082016104b3565b6020820181038252601f19601f820116604052508051906020012081565b6000546001600160a01b031690565b600080546001600160a01b0319166001600160a01b0383169081179091556040516103a3906104b3565b8190604051809103906000f59050801580156103c3573d6000803e3d6000fd5b5050600080546001600160a01b0319169055604080516001600160a01b038316815290517f26bdcb646ad71620005047421fb0169ac41ef04913ddf770ad9d6625555a4ffc9181900360200190a150565b600061041f8261027a565b9050610433816001600160a01b03166104ad565b6104585761044082610379565b610452816001600160a01b03166104ad565b61045857fe5b919050565b50565b6040805162461bcd60e51b815260206004820152601c60248201527f526563656976696e6720746f6b656e73206e6f7420616c6c6f77656400000000604482015290519081900360640190fd5b3b151590565b6116af806104c18339019056fe6101206040523480156200001257600080fd5b50604080516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b602483015260448201529051731820a4b7618bde71dce8cdc73aab6c95905fad24916329965a1d91606480830192600092919082900301818387803b1580156200009357600080fd5b505af1158015620000a8573d6000803e3d6000fd5b5050505060003390506000816001600160a01b0316639499ac546040518163ffffffff1660e01b815260040160206040518083038186803b158015620000ed57600080fd5b505afa15801562000102573d6000803e3d6000fd5b505050506040513d60208110156200011957600080fd5b50516001600160601b0319606082901b1660805260408051637e062a3560e11b815290519192506000916001600160a01b0384169163fc0c546a916004808301926020929190829003018186803b1580156200017457600080fd5b505afa15801562000189573d6000803e3d6000fd5b505050506040513d6020811015620001a057600080fd5b50516001600160601b0319606082901b1660a05260408051630dfe168160e01b815290519192506001600160a01b03831691630dfe168191600480820192602092909190829003018186803b158015620001f957600080fd5b505afa1580156200020e573d6000803e3d6000fd5b505050506040513d60208110156200022557600080fd5b505160601b6001600160601b03191660c0526040805163d21220a760e01b815290516001600160a01b0383169163d21220a7916004808301926020929190829003018186803b1580156200027857600080fd5b505afa1580156200028d573d6000803e3d6000fd5b505050506040513d6020811015620002a457600080fd5b505160601b6001600160601b03191660e0526040805163735de9f760e01b815290516001600160a01b0385169163735de9f7916004808301926020929190829003018186803b158015620002f757600080fd5b505afa1580156200030c573d6000803e3d6000fd5b505050506040513d60208110156200032357600080fd5b5051604080516315ab88c960e31b815290516001600160a01b039092169163ad5c464891600480820192602092909190829003018186803b1580156200036857600080fd5b505afa1580156200037d573d6000803e3d6000fd5b505050506040513d60208110156200039457600080fd5b50516001600160601b031960609190911b166101005250505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c61123f6200047060003980605f528060bc528061014d52806101c452508060e6528061053252806109ba5280610d45525080608952806103b0528061046452806106015280610641528061074b52806108b05280610d0f525080610488528061055c52806106a652806107e152806108df52806109895280610a515280610d905280610dca52508061050e5280610ad15280610b565280610b7d525061123f6000f3fe6080604052600436106100585760003560e01c806223de29146101f15780630dfe1681146102e857806316f0115b146103195780638d7e41a81461032e578063ac210cc714610370578063d21220a714610385576101ec565b366101ec577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161415801561011157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614155b1561014b576040805162461bcd60e51b815260206004820152600560248201526409cde8aa8960db1b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156101a657600080fd5b505af11580156101ba573d6000803e3d6000fd5b50505050506101ea7f0000000000000000000000000000000000000000000000000000000000000000343361039a565b005b600080fd5b3480156101fd57600080fd5b506101ea600480360360c081101561021457600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a08101608082013564010000000081111561025757600080fd5b82018360208201111561026957600080fd5b8035906020019184600183028401116401000000008311171561028b57600080fd5b9193909290916020810190356401000000008111156102a957600080fd5b8201836020820111156102bb57600080fd5b803590602001918460018302840111640100000000831117156102dd57600080fd5b509092509050610417565b3480156102f457600080fd5b506102fd610462565b604080516001600160a01b039092168252519081900360200190f35b34801561032557600080fd5b506102fd610486565b34801561033a57600080fd5b5061035e6004803603604081101561035157600080fd5b50803590602001356104aa565b60408051918252519081900360200190f35b34801561037c57600080fd5b506102fd61050c565b34801561039157600080fd5b506102fd610530565b6000806103a78585610554565b915091506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b0316146103ee5783836103f1565b82845b91509150600061040183836108ac565b905061040d8682610acc565b5050505050505050565b61042033610c22565b61040d33888787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c2592505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006107ca6104f16104be856107cd610ea8565b6104eb6104e66104d188623cda29610ea8565b6104de88623cda20610ea8565b899101610ea8565b610f08565b90610f5a565b816104f857fe5b049050806105065750600281045b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156105b357600080fd5b505afa1580156105c7573d6000803e3d6000fd5b505050506040513d60608110156105dd57600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811690881614610639578161063b565b825b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b03161461067e5783610680565b825b9050600061068e83896104aa565b90508088039550886001600160a01b031663a9059cbb7f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561070c57600080fd5b505af1158015610720573d6000803e3d6000fd5b505050506040513d602081101561073657600080fd5b506107449050818484610f9c565b96506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168b6001600160a01b03161461078a5788600061078e565b6000895b604080516000808252602082019283905263022c0d9f60e01b835260248201858152604483018590523060648401819052608060848501908152845160a486018190529799509597506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169663022c0d9f968a968a969395939493919260c48601928190849084905b8381101561083757818101518382015260200161081f565b50505050905090810190601f1680156108645780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561088657600080fd5b505af115801561089a573d6000803e3d6000fd5b50505050505050505050509250929050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb7f0000000000000000000000000000000000000000000000000000000000000000856040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561094557600080fd5b505af1158015610959573d6000803e3d6000fd5b505050506040513d602081101561096f57600080fd5b50506040805163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820185905291517f00000000000000000000000000000000000000000000000000000000000000009092169163a9059cbb916044808201926020929091908290030181600087803b158015610a0557600080fd5b505af1158015610a19573d6000803e3d6000fd5b505050506040513d6020811015610a2f57600080fd5b5050604080516335313c2160e11b815230600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691636a6278429160248083019260209291908290030181600087803b158015610a9957600080fd5b505af1158015610aad573d6000803e3d6000fd5b505050506040513d6020811015610ac357600080fd5b50519392505050565b610b7b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2857600080fd5b505afa158015610b3c573d6000803e3d6000fd5b505050506040513d6020811015610b5257600080fd5b50517f000000000000000000000000000000000000000000000000000000000000000083610fea565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632659985082846040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050602060405180830381600087803b158015610bf257600080fd5b505af1158015610c06573d6000803e3d6000fd5b505050506040513d6020811015610c1c57600080fd5b50505050565b50565b60008490506000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c6557600080fd5b505afa158015610c79573d6000803e3d6000fd5b505050506040513d6020811015610c8f57600080fd5b505160408051636f074d1f60e11b81526004810187905290519192506000916001600160a01b0385169163de0e9a3e91602480830192602092919082900301818787803b158015610cdf57600080fd5b505af1158015610cf3573d6000803e3d6000fd5b505050506040513d6020811015610d0957600080fd5b505190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169083161480610d7957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b15610d8e57610d8982828861039a565b610e9f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610e68577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166389afcb44876040518263ffffffff1660e01b815260040180826001600160a01b031681526020019150506040805180830381600087803b158015610e3657600080fd5b505af1158015610e4a573d6000803e3d6000fd5b505050506040513d6040811015610e6057600080fd5b50610e9f9050565b6040805162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b604482015290519081900360640190fd5b50505050505050565b600082610eb757506000610506565b82820282848281610ec457fe5b0414610f015760405162461bcd60e51b81526004018080602001828103825260218152602001806111e96021913960400191505060405180910390fd5b9392505050565b60006003821115610f4b575080600160028204015b81811015610f4557809150600281828581610f3457fe5b040181610f3d57fe5b049050610f1d565b50610f55565b8115610f55575060015b919050565b6000610f0183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110f7565b600080610fab856103e5610ea8565b90506000610fb98285610ea8565b90506000610fd383610fcd886103e8610ea8565b9061118e565b9050808281610fde57fe5b04979650505050505050565b60408051636eb1769f60e11b81523060048201526001600160a01b0384811660248301529151839286169163dd62ed3e916044808301926020929190829003018186803b15801561103a57600080fd5b505afa15801561104e573d6000803e3d6000fd5b505050506040513d602081101561106457600080fd5b505110156110f257826001600160a01b031663095ea7b3836000196040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156110c557600080fd5b505af11580156110d9573d6000803e3d6000fd5b505050506040513d60208110156110ef57600080fd5b50505b505050565b600081848411156111865760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561114b578181015183820152602001611133565b50505050905090810190601f1680156111785780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610f01576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220491023463fb0443a4199b027b02aca6a7d866ac5b596fe0ef480914c69231c2864736f6c634300060c0033a2646970667358221220efa48a3d64275dfb6e495bbf6ca1f4ee89ca6e96126d42c188acd272f1f0ddc764736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007c5760003560e01c80639240033a1161005b5780639240033a146101b75780639499ac54146101d1578063acf461f9146101d9578063dfbaee2e146101ff5761007c565b806223de29146100815780636f6654471461016d578063735de9f7146101af575b600080fd5b61016b600480360360c081101561009757600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a0810160808201356401000000008111156100da57600080fd5b8201836020820111156100ec57600080fd5b8035906020019184600183028401116401000000008311171561010e57600080fd5b91939092909160208101903564010000000081111561012c57600080fd5b82018360208201111561013e57600080fd5b8035906020019184600183028401116401000000008311171561016057600080fd5b509092509050610225565b005b6101936004803603602081101561018357600080fd5b50356001600160a01b031661027a565b604080516001600160a01b039092168252519081900360200190f35b610193610319565b6101bf61033d565b60408051918252519081900360200190f35b61019361036a565b61016b600480360360208110156101ef57600080fd5b50356001600160a01b0316610379565b6101936004803603602081101561021557600080fd5b50356001600160a01b0316610414565b61022e3361045d565b61027033888787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061046092505050565b5050505050505050565b6040516000906001600160f81b03199030906001600160a01b038516906102a3602082016104b3565b6020820181038252601f19601f820116604052508051906020012060405160200180856001600160f81b0319168152600101846001600160a01b031660601b81526014018381526020018281526020019450505050506040516020818303038152906040528051906020012060001c9050919050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60405161034c602082016104b3565b6020820181038252601f19601f820116604052508051906020012081565b6000546001600160a01b031690565b600080546001600160a01b0319166001600160a01b0383169081179091556040516103a3906104b3565b8190604051809103906000f59050801580156103c3573d6000803e3d6000fd5b5050600080546001600160a01b0319169055604080516001600160a01b038316815290517f26bdcb646ad71620005047421fb0169ac41ef04913ddf770ad9d6625555a4ffc9181900360200190a150565b600061041f8261027a565b9050610433816001600160a01b03166104ad565b6104585761044082610379565b610452816001600160a01b03166104ad565b61045857fe5b919050565b50565b6040805162461bcd60e51b815260206004820152601c60248201527f526563656976696e6720746f6b656e73206e6f7420616c6c6f77656400000000604482015290519081900360640190fd5b3b151590565b6116af806104c18339019056fe6101206040523480156200001257600080fd5b50604080516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b602483015260448201529051731820a4b7618bde71dce8cdc73aab6c95905fad24916329965a1d91606480830192600092919082900301818387803b1580156200009357600080fd5b505af1158015620000a8573d6000803e3d6000fd5b5050505060003390506000816001600160a01b0316639499ac546040518163ffffffff1660e01b815260040160206040518083038186803b158015620000ed57600080fd5b505afa15801562000102573d6000803e3d6000fd5b505050506040513d60208110156200011957600080fd5b50516001600160601b0319606082901b1660805260408051637e062a3560e11b815290519192506000916001600160a01b0384169163fc0c546a916004808301926020929190829003018186803b1580156200017457600080fd5b505afa15801562000189573d6000803e3d6000fd5b505050506040513d6020811015620001a057600080fd5b50516001600160601b0319606082901b1660a05260408051630dfe168160e01b815290519192506001600160a01b03831691630dfe168191600480820192602092909190829003018186803b158015620001f957600080fd5b505afa1580156200020e573d6000803e3d6000fd5b505050506040513d60208110156200022557600080fd5b505160601b6001600160601b03191660c0526040805163d21220a760e01b815290516001600160a01b0383169163d21220a7916004808301926020929190829003018186803b1580156200027857600080fd5b505afa1580156200028d573d6000803e3d6000fd5b505050506040513d6020811015620002a457600080fd5b505160601b6001600160601b03191660e0526040805163735de9f760e01b815290516001600160a01b0385169163735de9f7916004808301926020929190829003018186803b158015620002f757600080fd5b505afa1580156200030c573d6000803e3d6000fd5b505050506040513d60208110156200032357600080fd5b5051604080516315ab88c960e31b815290516001600160a01b039092169163ad5c464891600480820192602092909190829003018186803b1580156200036857600080fd5b505afa1580156200037d573d6000803e3d6000fd5b505050506040513d60208110156200039457600080fd5b50516001600160601b031960609190911b166101005250505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c61123f6200047060003980605f528060bc528061014d52806101c452508060e6528061053252806109ba5280610d45525080608952806103b0528061046452806106015280610641528061074b52806108b05280610d0f525080610488528061055c52806106a652806107e152806108df52806109895280610a515280610d905280610dca52508061050e5280610ad15280610b565280610b7d525061123f6000f3fe6080604052600436106100585760003560e01c806223de29146101f15780630dfe1681146102e857806316f0115b146103195780638d7e41a81461032e578063ac210cc714610370578063d21220a714610385576101ec565b366101ec577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161415801561011157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614155b1561014b576040805162461bcd60e51b815260206004820152600560248201526409cde8aa8960db1b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156101a657600080fd5b505af11580156101ba573d6000803e3d6000fd5b50505050506101ea7f0000000000000000000000000000000000000000000000000000000000000000343361039a565b005b600080fd5b3480156101fd57600080fd5b506101ea600480360360c081101561021457600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a08101608082013564010000000081111561025757600080fd5b82018360208201111561026957600080fd5b8035906020019184600183028401116401000000008311171561028b57600080fd5b9193909290916020810190356401000000008111156102a957600080fd5b8201836020820111156102bb57600080fd5b803590602001918460018302840111640100000000831117156102dd57600080fd5b509092509050610417565b3480156102f457600080fd5b506102fd610462565b604080516001600160a01b039092168252519081900360200190f35b34801561032557600080fd5b506102fd610486565b34801561033a57600080fd5b5061035e6004803603604081101561035157600080fd5b50803590602001356104aa565b60408051918252519081900360200190f35b34801561037c57600080fd5b506102fd61050c565b34801561039157600080fd5b506102fd610530565b6000806103a78585610554565b915091506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b0316146103ee5783836103f1565b82845b91509150600061040183836108ac565b905061040d8682610acc565b5050505050505050565b61042033610c22565b61040d33888787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c2592505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006107ca6104f16104be856107cd610ea8565b6104eb6104e66104d188623cda29610ea8565b6104de88623cda20610ea8565b899101610ea8565b610f08565b90610f5a565b816104f857fe5b049050806105065750600281045b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156105b357600080fd5b505afa1580156105c7573d6000803e3d6000fd5b505050506040513d60608110156105dd57600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811690881614610639578161063b565b825b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b03161461067e5783610680565b825b9050600061068e83896104aa565b90508088039550886001600160a01b031663a9059cbb7f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561070c57600080fd5b505af1158015610720573d6000803e3d6000fd5b505050506040513d602081101561073657600080fd5b506107449050818484610f9c565b96506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168b6001600160a01b03161461078a5788600061078e565b6000895b604080516000808252602082019283905263022c0d9f60e01b835260248201858152604483018590523060648401819052608060848501908152845160a486018190529799509597506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169663022c0d9f968a968a969395939493919260c48601928190849084905b8381101561083757818101518382015260200161081f565b50505050905090810190601f1680156108645780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561088657600080fd5b505af115801561089a573d6000803e3d6000fd5b50505050505050505050509250929050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb7f0000000000000000000000000000000000000000000000000000000000000000856040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561094557600080fd5b505af1158015610959573d6000803e3d6000fd5b505050506040513d602081101561096f57600080fd5b50506040805163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820185905291517f00000000000000000000000000000000000000000000000000000000000000009092169163a9059cbb916044808201926020929091908290030181600087803b158015610a0557600080fd5b505af1158015610a19573d6000803e3d6000fd5b505050506040513d6020811015610a2f57600080fd5b5050604080516335313c2160e11b815230600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691636a6278429160248083019260209291908290030181600087803b158015610a9957600080fd5b505af1158015610aad573d6000803e3d6000fd5b505050506040513d6020811015610ac357600080fd5b50519392505050565b610b7b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2857600080fd5b505afa158015610b3c573d6000803e3d6000fd5b505050506040513d6020811015610b5257600080fd5b50517f000000000000000000000000000000000000000000000000000000000000000083610fea565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632659985082846040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050602060405180830381600087803b158015610bf257600080fd5b505af1158015610c06573d6000803e3d6000fd5b505050506040513d6020811015610c1c57600080fd5b50505050565b50565b60008490506000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c6557600080fd5b505afa158015610c79573d6000803e3d6000fd5b505050506040513d6020811015610c8f57600080fd5b505160408051636f074d1f60e11b81526004810187905290519192506000916001600160a01b0385169163de0e9a3e91602480830192602092919082900301818787803b158015610cdf57600080fd5b505af1158015610cf3573d6000803e3d6000fd5b505050506040513d6020811015610d0957600080fd5b505190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169083161480610d7957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b15610d8e57610d8982828861039a565b610e9f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610e68577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166389afcb44876040518263ffffffff1660e01b815260040180826001600160a01b031681526020019150506040805180830381600087803b158015610e3657600080fd5b505af1158015610e4a573d6000803e3d6000fd5b505050506040513d6040811015610e6057600080fd5b50610e9f9050565b6040805162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b604482015290519081900360640190fd5b50505050505050565b600082610eb757506000610506565b82820282848281610ec457fe5b0414610f015760405162461bcd60e51b81526004018080602001828103825260218152602001806111e96021913960400191505060405180910390fd5b9392505050565b60006003821115610f4b575080600160028204015b81811015610f4557809150600281828581610f3457fe5b040181610f3d57fe5b049050610f1d565b50610f55565b8115610f55575060015b919050565b6000610f0183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110f7565b600080610fab856103e5610ea8565b90506000610fb98285610ea8565b90506000610fd383610fcd886103e8610ea8565b9061118e565b9050808281610fde57fe5b04979650505050505050565b60408051636eb1769f60e11b81523060048201526001600160a01b0384811660248301529151839286169163dd62ed3e916044808301926020929190829003018186803b15801561103a57600080fd5b505afa15801561104e573d6000803e3d6000fd5b505050506040513d602081101561106457600080fd5b505110156110f257826001600160a01b031663095ea7b3836000196040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156110c557600080fd5b505af11580156110d9573d6000803e3d6000fd5b505050506040513d60208110156110ef57600080fd5b50505b505050565b600081848411156111865760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561114b578181015183820152602001611133565b50505050905090810190601f1680156111785780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610f01576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220491023463fb0443a4199b027b02aca6a7d866ac5b596fe0ef480914c69231c2864736f6c634300060c0033a2646970667358221220efa48a3d64275dfb6e495bbf6ca1f4ee89ca6e96126d42c188acd272f1f0ddc764736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11340,
        "contract": "contracts/protocols/uniswap/UniswapPoolAdapterFactory.sol:UniswapPoolAdapterFactory",
        "label": "_nextToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}
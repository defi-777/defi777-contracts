{
  "language": "Solidity",
  "sources": {
    "contracts/FakeToken.sol": {
      "content": "pragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\n\ncontract FakeToken {\n  address immutable private owner;\n  address public token;\n\n  constructor(address innerToken) public {\n    token = innerToken;\n    owner = msg.sender;\n  }\n\n  function setToken(address newToken) external {\n    require(msg.sender == owner);\n    token = newToken;\n  }\n\n  function call(IERC777Recipient adapter) external {\n    require(owner == msg.sender);\n\n    adapter.tokensReceived(msg.sender, msg.sender, address(adapter), 1, '', '');\n  }\n\n  function send(address, uint256, bytes calldata) external {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/ERC777.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC777.sol\";\nimport \"./IERC777Recipient.sol\";\nimport \"./IERC777Sender.sol\";\nimport \"../../token/ERC20/IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../introspection/IERC1820Registry.sol\";\n\n/**\n * @dev Implementation of the {IERC777} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * Support for ERC20 is included in this contract, as specified by the EIP: both\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\n * movements.\n *\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\n * are no special restrictions in the amount of tokens that created, moved, or\n * destroyed. This makes integration with ERC20 applications seamless.\n */\ncontract ERC777 is Context, IERC777, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    mapping(address => uint256) private _balances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    // We inline the result of the following hashes because Solidity doesn't resolve them at compile time.\n    // See https://github.com/ethereum/solidity/issues/4024.\n\n    // keccak256(\"ERC777TokensSender\")\n    bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH =\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n\n    // keccak256(\"ERC777TokensRecipient\")\n    bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH =\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\n    address[] private _defaultOperatorsArray;\n\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\n    mapping(address => bool) private _defaultOperators;\n\n    // For each account, a mapping of its operators and revoked default operators.\n    mapping(address => mapping(address => bool)) private _operators;\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n\n    // ERC20-allowances\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    /**\n     * @dev `defaultOperators` may be an empty array.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        address[] memory defaultOperators\n    ) public {\n        _name = name;\n        _symbol = symbol;\n\n        _defaultOperatorsArray = defaultOperators;\n        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\n            _defaultOperators[_defaultOperatorsArray[i]] = true;\n        }\n\n        // register interfaces\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n    }\n\n    /**\n     * @dev See {IERC777-name}.\n     */\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC777-symbol}.\n     */\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {ERC20-decimals}.\n     *\n     * Always returns 18, as per the\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\n     */\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC777-granularity}.\n     *\n     * This implementation always returns `1`.\n     */\n    function granularity() public view override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @dev See {IERC777-totalSupply}.\n     */\n    function totalSupply() public view override(IERC20, IERC777) returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\n     */\n    function balanceOf(address tokenHolder) public view override(IERC20, IERC777) returns (uint256) {\n        return _balances[tokenHolder];\n    }\n\n    /**\n     * @dev See {IERC777-send}.\n     *\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n     */\n    function send(address recipient, uint256 amount, bytes memory data) public override  {\n        _send(_msgSender(), recipient, amount, data, \"\", true);\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\n     * interface if it is a contract.\n     *\n     * Also emits a {Sent} event.\n     */\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n\n        address from = _msgSender();\n\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n\n        _move(from, from, recipient, amount, \"\", \"\");\n\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n\n        return true;\n    }\n\n    /**\n     * @dev See {IERC777-burn}.\n     *\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n     */\n    function burn(uint256 amount, bytes memory data) public override  {\n        _burn(_msgSender(), amount, data, \"\");\n    }\n\n    /**\n     * @dev See {IERC777-isOperatorFor}.\n     */\n    function isOperatorFor(\n        address operator,\n        address tokenHolder\n    ) public view override returns (bool) {\n        return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n    }\n\n    /**\n     * @dev See {IERC777-authorizeOperator}.\n     */\n    function authorizeOperator(address operator) public override  {\n        require(_msgSender() != operator, \"ERC777: authorizing self as operator\");\n\n        if (_defaultOperators[operator]) {\n            delete _revokedDefaultOperators[_msgSender()][operator];\n        } else {\n            _operators[_msgSender()][operator] = true;\n        }\n\n        emit AuthorizedOperator(operator, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC777-revokeOperator}.\n     */\n    function revokeOperator(address operator) public override  {\n        require(operator != _msgSender(), \"ERC777: revoking self as operator\");\n\n        if (_defaultOperators[operator]) {\n            _revokedDefaultOperators[_msgSender()][operator] = true;\n        } else {\n            delete _operators[_msgSender()][operator];\n        }\n\n        emit RevokedOperator(operator, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC777-defaultOperators}.\n     */\n    function defaultOperators() public view override returns (address[] memory) {\n        return _defaultOperatorsArray;\n    }\n\n    /**\n     * @dev See {IERC777-operatorSend}.\n     *\n     * Emits {Sent} and {IERC20-Transfer} events.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n    public override\n    {\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n        _send(sender, recipient, amount, data, operatorData, true);\n    }\n\n    /**\n     * @dev See {IERC777-operatorBurn}.\n     *\n     * Emits {Burned} and {IERC20-Transfer} events.\n     */\n    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public override {\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n        _burn(account, amount, data, operatorData);\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     *\n     * Note that operator and allowance concepts are orthogonal: operators may\n     * not have allowance, and accounts with allowance may not be operators\n     * themselves.\n     */\n    function allowance(address holder, address spender) public view override returns (uint256) {\n        return _allowances[holder][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Note that accounts cannot have allowance issued by their operators.\n     */\n    function approve(address spender, uint256 value) public override returns (bool) {\n        address holder = _msgSender();\n        _approve(holder, spender, value);\n        return true;\n    }\n\n   /**\n    * @dev See {IERC20-transferFrom}.\n    *\n    * Note that operator and allowance concepts are orthogonal: operators cannot\n    * call `transferFrom` (unless they have allowance), and accounts with\n    * allowance cannot call `operatorSend` (unless they are operators).\n    *\n    * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\n    */\n    function transferFrom(address holder, address recipient, uint256 amount) public override returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        require(holder != address(0), \"ERC777: transfer from the zero address\");\n\n        address spender = _msgSender();\n\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n\n        _move(spender, holder, recipient, amount, \"\", \"\");\n        _approve(holder, spender, _allowances[holder][spender].sub(amount, \"ERC777: transfer amount exceeds allowance\"));\n\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n\n        return true;\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `operator`, `data` and `operatorData`.\n     *\n     * See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits {Minted} and {IERC20-Transfer} events.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function _mint(\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n    internal virtual\n    {\n        require(account != address(0), \"ERC777: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, amount);\n\n        // Update state variables\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Send tokens\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _send(\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        internal\n    {\n        require(from != address(0), \"ERC777: send from the zero address\");\n        require(to != address(0), \"ERC777: send to the zero address\");\n\n        address operator = _msgSender();\n\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n\n        _move(operator, from, to, amount, userData, operatorData);\n\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n\n    /**\n     * @dev Burn tokens\n     * @param from address token holder address\n     * @param amount uint256 amount of tokens to burn\n     * @param data bytes extra information provided by the token holder\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _burn(\n        address from,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n        internal virtual\n    {\n        require(from != address(0), \"ERC777: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), amount);\n\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n\n        // Update state variables\n        _balances[from] = _balances[from].sub(amount, \"ERC777: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n\n        emit Burned(operator, from, amount, data, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n\n    function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        _beforeTokenTransfer(operator, from, to, amount);\n\n        _balances[from] = _balances[from].sub(amount, \"ERC777: transfer amount exceeds balance\");\n        _balances[to] = _balances[to].add(amount);\n\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n\n    /**\n     * @dev See {ERC20-_approve}.\n     *\n     * Note that accounts cannot have allowance issued by their operators.\n     */\n    function _approve(address holder, address spender, uint256 value) internal {\n        require(holder != address(0), \"ERC777: approve from the zero address\");\n        require(spender != address(0), \"ERC777: approve to the zero address\");\n\n        _allowances[holder][spender] = value;\n        emit Approval(holder, spender, value);\n    }\n\n    /**\n     * @dev Call from.tokensToSend() if the interface is registered\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n\n    /**\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\n     * tokensReceived() was not registered for the recipient\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address operator, address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC777Token standard as defined in the EIP.\n *\n * This contract uses the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n * token holders and recipients react to token movements by using setting implementers\n * for the associated interfaces in said registry. See {IERC1820Registry} and\n * {ERC1820Implementer}.\n */\ninterface IERC777 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For most token contracts, this value will equal 1.\n     */\n    function granularity() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external;\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777Sender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\n *\n * {IERC777} Token holders can be notified of operations performed on their\n * tokens by having a contract implement this interface (contract holders can be\n *  their own implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Sender {\n    /**\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\n     * is conveyed by `to` being the zero address or not.\n     *\n     * This call occurs _before_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC1820Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820Registry {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     *  @param account Address of the contract for which to update the cache.\n     *  @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\n     *  If the result is not cached a direct lookup on the contract address is performed.\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     *  {updateERC165Cache} with the contract address.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n"
    },
    "contracts/protocols/curve/CurveExitAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/introspection/IERC1820Registry.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../../farming/IFarmerToken.sol\";\nimport \"../../tokens/IWrapperFactory.sol\";\nimport \"../../tokens/IWrapped777.sol\";\nimport \"../../ReverseENS.sol\";\nimport \"../../Receiver.sol\";\nimport \"./interfaces/ICurvePool.sol\";\n\n\ncontract CurveExitAdapter is Receiver, ReverseENS {\n  IWrapped777 public immutable token;\n  ERC20 public immutable innerToken;\n\n  uint256 private constant INFINITY = uint256(-1);\n\n  IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n  constructor(IWrapped777 _wrapper) public {\n    token = _wrapper;\n    innerToken = _wrapper.token();\n  }\n\n  function _tokensReceived(IERC777 _token, address from, uint256 amount, bytes memory /*data*/) internal override {\n    IWrapped777 inputWrapper = IWrapped777(address(_token));\n    ICurvePool pool = ICurvePool(address(inputWrapper.token()));\n\n    address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(address(_token), keccak256(\"Farmer777\"));\n    if (implementer != address(0) /* token is FarmerToken */) {\n      farmRewards(IFarmerToken(address(_token)), from);\n    }\n\n    uint256 poolTokens = inputWrapper.unwrap(amount);\n\n    int128 id = 0;\n    for (; id < 5; id++) {\n      if (pool.coins(id) == address(innerToken)) {\n        break;\n      }\n    }\n\n    removeLiquidity(pool, id, poolTokens);\n\n    innerToken.transfer(address(token), innerToken.balanceOf(address(this)));\n    token.gulp(from);\n  }\n\n  function farmRewards(IFarmerToken _token, address recipient) private {\n    address[] memory rewardWrappers = _token.rewardWrappers();\n    for (uint i = 0; i < rewardWrappers.length; i++) {\n      ERC20 rewardAdapter = ERC20(_token.getRewardAdapter(rewardWrappers[i]));\n      rewardAdapter.transfer(recipient, rewardAdapter.balanceOf(address(this)));\n    }\n  }\n\n  function removeLiquidity(ICurvePool pool, int128 id, uint256 amount) private {\n    uint256[4] memory fourTokens;\n    fourTokens[uint256(id)] = amount;\n    try pool.remove_liquidity_imbalance(fourTokens, 0) {} catch {\n      uint256[3] memory threeTokens;\n      threeTokens[uint256(id)] = amount;\n      try pool.remove_liquidity_imbalance(threeTokens, 0) {} catch {\n        uint256[2] memory twoTokens;\n        twoTokens[uint256(id)] = amount;\n        pool.remove_liquidity_imbalance(twoTokens, 0);\n      }\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/farming/IFarmerToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\ninterface IFarmerToken {\n  function rewardTokens() external view returns (address[] memory);\n  function rewardWrappers() external view returns (address[] memory);\n\n  function rewardBalance(address token, address user) external view returns (uint256);\n  function getRewardAdapter(address rewardToken) external view returns (address);\n\n  function withdrawFrom(address token, address from, address wrapper, uint256 amount) external;\n}\n"
    },
    "contracts/tokens/IWrapperFactory.sol": {
      "content": "pragma solidity >=0.6.2 <0.7.0;\n\ninterface IWrapperFactory {\n  function nextToken() external view returns (address);\n}\n"
    },
    "contracts/tokens/IWrapped777.sol": {
      "content": "pragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\n\ninterface IWrapped777 is IERC777 {\n  function token() external view returns (ERC20);\n\n  function wrap(uint256 amount) external returns (uint256);\n  function wrapTo(uint256 amount, address recipient) external returns (uint256);\n  function gulp(address recipient) external returns (uint256);\n\n  function unwrap(uint256 amount) external returns (uint256 unwrappedAmount);\n  function unwrapTo(uint256 amount, address recipient) external returns (uint256 unwrappedAmount);\n}\n"
    },
    "contracts/ReverseENS.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\ninterface IReverseRegistrar {\n  function claim(address owner) external returns (bytes32);\n}\n\ncontract ReverseENS {\n  constructor() internal {\n    try IReverseRegistrar(0x084b1c3C81545d370f3634392De611CaaBFf8148).claim(tx.origin) {} catch {\n      try IReverseRegistrar(0x6F628b68b30Dc3c17f345c9dbBb1E483c2b7aE5c).claim(tx.origin) {} catch {}\n    }\n  }\n}\n"
    },
    "contracts/Receiver.sol": {
      "content": "pragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\nimport \"@openzeppelin/contracts/introspection/IERC1820Registry.sol\";\n\nabstract contract Receiver is IERC777Recipient {\n  IERC1820Registry constant internal ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n  constructor() internal {\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC777TokensRecipient\"), address(this));\n  }\n\n  function _tokensReceived(IERC777 token, address from, uint256 amount, bytes memory data) internal virtual;\n\n  function _canReceive(address token) internal virtual {}\n\n  function tokensReceived(\n    address /*operator*/,\n    address from,\n    address /*to*/,\n    uint256 amount,\n    bytes calldata userData,\n    bytes calldata /*operatorData*/\n  ) external override {\n    _canReceive(msg.sender);\n\n    _tokensReceived(IERC777(msg.sender), from, amount, userData);\n  }\n}\n"
    },
    "contracts/protocols/curve/interfaces/ICurvePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\ninterface ICurvePool {\n  // function get_virtual_price() external view returns (uint);\n\n  function coins(int128 i) external view returns (address);\n\n  function add_liquidity(\n    uint256[2] calldata amounts,\n    uint256 min_mint_amount\n  ) external;\n\n  function add_liquidity(\n    uint256[3] calldata amounts,\n    uint256 min_mint_amount\n  ) external;\n\n  function add_liquidity(\n    uint256[4] calldata amounts,\n    uint256 min_mint_amount\n  ) external;\n\n  function remove_liquidity_imbalance(\n    uint256[2] calldata amounts,\n    uint256 max_burn_amount\n  ) external;\n\n  function remove_liquidity_imbalance(\n    uint256[3] calldata amounts,\n    uint256 max_burn_amount\n  ) external;\n\n  function remove_liquidity_imbalance(\n    uint256[4] calldata amounts,\n    uint256 max_burn_amount\n  ) external;\n\n  // function remove_liquidity(\n  //   uint256 _amount,\n  //   uint256[4] calldata amounts\n  // ) external;\n\n  // function exchange(\n  //   int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n  // ) external;\n}\n"
    },
    "contracts/protocols/curve/test/TestCurvePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../interfaces/ICurvePool.sol\";\n\ncontract TestCurvePool is ICurvePool, ERC20 {\n  address[] private tokens;\n\n  constructor(address[3] memory _tokens) public ERC20(\"y Curve Pool\", \"yCRV\") {\n    tokens = _tokens;\n  }\n\n  function coins(int128 i) external override view returns (address) {\n    return tokens[uint256(i)];\n  }\n\n  function add_liquidity(\n    uint256[3] calldata amounts,\n    uint256 /*min_mint_amount*/\n  ) external override {\n    uint mintAmt = 0;\n    for (uint i = 0; i < 3; i++) {\n      if (amounts[i] != 0) {\n        ERC20(tokens[uint256(i)]).transferFrom(msg.sender, address(this), amounts[uint256(i)]);\n        mintAmt += amounts[uint256(i)];\n      }\n    }\n    _mint(msg.sender, mintAmt);\n  }\n\n  function add_liquidity(\n    uint256[2] calldata /*amounts*/,\n    uint256 /*min_mint_amount*/\n  ) external override {\n    revert('Unsupported');\n  }\n\n  function add_liquidity(\n    uint256[4] calldata /*amounts*/,\n    uint256 /*min_mint_amount*/\n  ) external override {\n    revert('Unsupported');\n  }\n\n  function remove_liquidity_imbalance(\n    uint256[3] calldata amounts,\n    uint256 /*max_burn_amount*/\n  ) external override {\n    uint burnAmt = 0;\n    for (uint i = 0; i < 3; i++) {\n      if (amounts[i] != 0) {\n        ERC20(tokens[uint256(i)]).transfer(msg.sender, amounts[uint256(i)]);\n        burnAmt += amounts[uint256(i)];\n      }\n    }\n    _burn(msg.sender, burnAmt);\n  }\n\n  function remove_liquidity_imbalance(\n    uint256[2] calldata /*amounts*/,\n    uint256 /*max_burn_amount*/\n  ) external override {\n    revert('Unsupported');\n  }\n\n  function remove_liquidity_imbalance(\n    uint256[4] calldata /*amounts*/,\n    uint256 /*max_burn_amount*/\n  ) external override {\n    revert('Unsupported');\n  }\n}\n"
    },
    "contracts/tokens/WrapperFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./IWrapperFactory.sol\";\nimport \"./Wrapped777.sol\";\n\n\ncontract WrapperFactory is IWrapperFactory {\n  using Address for address;\n\n  address private _nextToken;\n\n  bytes32 public constant WRAPPER_BYTECODE_HASH = keccak256(type(Wrapped777).creationCode);\n\n  event WrapperCreated(address token);\n\n  function calculateWrapperAddress(address token) public view returns (address calculatedAddress) {\n    calculatedAddress = address(uint(keccak256(abi.encodePacked(\n      byte(0xff),\n      address(this),\n      bytes32(uint(token)),\n      WRAPPER_BYTECODE_HASH\n    ))));\n  }\n\n  function createWrapper(address token) public {\n    _nextToken = token;\n    new Wrapped777{salt: bytes32(uint(token))}();\n    _nextToken = address(0);\n\n    emit WrapperCreated(token);\n  }\n\n  function getWrapperAddress(address token) public returns (address wrapperAddress) {\n    wrapperAddress = calculateWrapperAddress(token);\n\n    if(!wrapperAddress.isContract()) {\n      createWrapper(token);\n      assert(wrapperAddress.isContract());\n    }\n  }\n\n  function nextToken() external override view returns (address) {\n    return _nextToken;\n  }\n}\n"
    },
    "contracts/tokens/Wrapped777.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\nimport \"@uniswap/lib/contracts/libraries/SafeERC20Namer.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../interfaces/IERC3126.sol\";\nimport \"../Receiver.sol\";\nimport \"./ERC777WithGranularity.sol\";\nimport \"./IWrapperFactory.sol\";\nimport \"./IWrapped777.sol\";\nimport \"./IPermit.sol\";\n\ncontract Wrapped777 is ERC777WithGranularity, Receiver, IWrapped777, IERC3126 {\n  using SafeMath for uint256;\n\n  string public constant WRAPPER_VERSION = \"0.2.0\";\n\n  ERC20 public immutable override token;\n\n  event FlashMint(address indexed target, uint256 amount);\n\n  ////////// For permit:\n  bytes32 public immutable DOMAIN_SEPARATOR;\n  // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n  bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n  mapping(address => uint) public nonces;\n\n  constructor() public {\n    address _token = IWrapperFactory(msg.sender).nextToken();\n    token = ERC20(_token);\n\n    _name = string(abi.encodePacked(SafeERC20Namer.tokenName(_token), \"-777\"));\n    _symbol = string(abi.encodePacked(SafeERC20Namer.tokenSymbol(_token), \"777\"));\n\n    setDecimals(ERC20(_token).decimals());\n\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"Wrapped777\"), address(this));\n\n    DOMAIN_SEPARATOR = keccak256(\n      abi.encode(\n        keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n        keccak256(bytes(_name)),\n        keccak256(bytes('1')),\n        chainId(),\n        address(this)\n      )\n    );\n  }\n\n  function underlyingTokens() external view virtual override returns (address[] memory) {\n    address[] memory tokens = new address[](1);\n    tokens[0] = address(token);\n    return tokens;\n  }\n\n  function balanceOfUnderlying(address _user, address _token) external view virtual override returns (uint256) {\n    return _token == address(token) ? from777to20(ERC777WithGranularity.balanceOf(_user)) : 0;\n  }\n\n  function totalSupply() public view override(ERC777WithGranularity, IERC777) returns (uint256) {\n    return ERC777WithGranularity.totalSupply();\n  }\n\n  function balanceOf(address tokenHolder) public view override(ERC777WithGranularity, IERC777) returns (uint256) {\n    return ERC777WithGranularity.balanceOf(tokenHolder);\n  }\n\n  /**\n   * @dev Wraps ERC-20 tokens from the caller and sends wrapped tokens to the caller\n   *\n   * @param amount Number of tokens to wrap\n   * @return Amount of wrapper tokens minted (same as the input amount if the token has 18 decimals)\n   */\n  function wrap(uint256 amount) external override returns (uint256) {\n    address sender = _msgSender();\n    return _wrap(sender, amount);\n  }\n\n  /**\n   * @dev Same as wrap(), but approves the token transfer using a ERC2612 permit signature\n   *\n   * @param value Number of tokens to wrap\n   * @return Amount of wrapper tokens minted (same as the input amount if the token has 18 decimals)\n   */\n  function wrapWithPermit(uint value, uint deadline, uint256 nonce, uint8 v, bytes32 r, bytes32 s) external returns (uint256) {\n    address sender = _msgSender();\n    try IPermit(address(token)).permit(sender, address(this), value, deadline, v, r, s) {\n    } catch {\n      // Dai\n      IPermit(address(token)).permit(sender, address(this), nonce, deadline, true /* allowed */, v, r, s);\n    }\n\n    return _wrap(sender, value);\n  }\n\n  function _wrap(address sender, uint256 amount) private returns (uint256 outputAmount) {\n    TransferHelper.safeTransferFrom(address(token), sender, address(this), amount);\n\n    outputAmount = from20to777(amount);\n    _mint(sender, outputAmount, \"\", \"\");\n  }\n\n  /**\n   * @dev Same as wrap(), but allows setting a recipient address\n   *\n   * @param amount Number of tokens to wrap\n   * @param recipient Address to receive tokens\n   * @return outputAmount Amount of wrapper tokens minted (same as the input amount if the token has 18 decimals)\n   */\n  function wrapTo(uint256 amount, address recipient) external override returns (uint256 outputAmount) {\n    address sender = _msgSender();\n    TransferHelper.safeTransferFrom(address(token), sender, address(this), amount);\n\n    outputAmount = from20to777(amount);\n    _mint(recipient, outputAmount, \"\", \"\");\n  }\n\n  /**\n   * @dev Same as wrap(), but allows setting a recipient address\n   *\n   * @param amount Number of tokens to wrap\n   * @param recipient Address to receive tokens\n   * @return amount Amount of wrapper tokens minted (same as the input amount if the token has 18 decimals)\n   */\n  function gulp(address recipient) external override returns (uint256 amount) {\n    amount = from20to777(token.balanceOf(address(this))).sub(ERC777WithGranularity.totalSupply());\n    _mint(recipient, amount, \"\", \"\");\n  }\n\n  /**\n   * @dev Unwraps tokens from the sender, returns them the inner ERC-20\n   *\n   * @param amount Number of tokens to unwrap\n   * @return unwrappedAmount Amount of unwrapped tokens (same as the input amount if the token has 18 decimals)\n   */\n  function unwrap(uint256 amount) external override returns (uint256 unwrappedAmount) {\n    address sender = _msgSender();\n    return _unwrap(amount, sender, sender);\n  }\n\n\n  /**\n   * @dev Same as unwrap(), but sends unwrapped tokens to separate address\n   *\n   * @param amount Number of tokens to unwrap\n   * @param recipient Address to receive the tokens\n   * @return unwrappedAmount Amount of unwrapped tokens (same as the input amount if the token has 18 decimals)\n   */\n  function unwrapTo(uint256 amount, address recipient) external override returns (uint256 unwrappedAmount) {\n    return _unwrap(amount, _msgSender(), recipient);\n  }\n\n  function _unwrap(uint256 amount, address from, address recipient) private returns (uint256 unwrappedAmount) {\n    _burn(from, amount, \"\", \"\");\n\n    unwrappedAmount = from777to20(amount);\n    TransferHelper.safeTransfer(address(token), recipient, unwrappedAmount);\n  }\n\n  function _tokensReceived(IERC777 _token, address from, uint256 amount, bytes memory) internal override {\n    if (address(_token) != address(this)) {\n      tryTokenUpgrade(address(_token), from, amount);\n      return;\n    }\n\n    _burn(address(this), amount, \"\", \"\");\n\n    uint256 adjustedAmount = from777to20(amount);\n    TransferHelper.safeTransfer(address(token), from, adjustedAmount);\n  }\n\n  /**\n   * @dev Mints an unbounded amount of wrapper tokens to the target. Tokens must be repaid by the\n   * end of the transaction, or it will revert.\n   *\n   * @param target Address to receive the tokens (must be a ERC777Recipient)\n   * @param amount Number of tokens to mint\n   * @param data Arbitrary data to pass to the receive hook\n   */\n  function flashMint(address target, uint256 amount, bytes calldata data) external {\n    _mint(target, amount, data, '');\n    _burn(target, amount, data, '');\n\n    emit FlashMint(target, amount);\n  }\n\n  function tryTokenUpgrade(address oldWrapper, address sender, uint256 amount) private {\n    if (address(Wrapped777(oldWrapper).token()) != address(token)) {\n      revert(\"INVALID\");\n    }\n\n    uint256 startingBalance = token.balanceOf(address(this));\n\n    TransferHelper.safeTransfer(oldWrapper, oldWrapper, amount);\n\n    uint256 endBalance = token.balanceOf(address(this));\n\n    uint256 numUpgradedTokens = from20to777(endBalance.sub(startingBalance));\n    require(numUpgradedTokens > 0, \"NO-UPGRADE\");\n\n    _mint(sender, numUpgradedTokens, \"\", \"\");\n  }\n\n  /**\n   * @dev ERC2612 permit\n   */\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n    require(deadline >= block.timestamp, 'EXPIRED');\n    bytes32 digest = keccak256(\n      abi.encodePacked(\n        '\\x19\\x01',\n        DOMAIN_SEPARATOR,\n        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n      )\n    );\n    address recoveredAddress = ecrecover(digest, v, r, s);\n    require(recoveredAddress != address(0) && recoveredAddress == owner, 'Permit INVALID_SIG');\n    _approve(owner, spender, value);\n  }\n\n  function chainId() private pure returns (uint _chainId) {\n    assembly {\n      _chainId := chainid()\n    }\n  }\n}\n"
    },
    "@uniswap/lib/contracts/libraries/SafeERC20Namer.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport './AddressStringUtil.sol';\n\n// produces token descriptors from inconsistent or absent ERC20 symbol implementations that can return string or bytes32\n// this library will always produce a string symbol to represent the token\nlibrary SafeERC20Namer {\n    function bytes32ToString(bytes32 x) pure private returns (string memory) {\n        bytes memory bytesString = new bytes(32);\n        uint charCount = 0;\n        for (uint j = 0; j < 32; j++) {\n            byte char = x[j];\n            if (char != 0) {\n                bytesString[charCount] = char;\n                charCount++;\n            }\n        }\n        bytes memory bytesStringTrimmed = new bytes(charCount);\n        for (uint j = 0; j < charCount; j++) {\n            bytesStringTrimmed[j] = bytesString[j];\n        }\n        return string(bytesStringTrimmed);\n    }\n\n    // assumes the data is in position 2\n    function parseStringData(bytes memory b) pure private returns (string memory) {\n        uint charCount = 0;\n        // first parse the charCount out of the data\n        for (uint i = 32; i < 64; i++) {\n            charCount <<= 8;\n            charCount += uint8(b[i]);\n        }\n\n        bytes memory bytesStringTrimmed = new bytes(charCount);\n        for (uint i = 0; i < charCount; i++) {\n            bytesStringTrimmed[i] = b[i + 64];\n        }\n\n        return string(bytesStringTrimmed);\n    }\n\n    // uses a heuristic to produce a token name from the address\n    // the heuristic returns the full hex of the address string in upper case\n    function addressToName(address token) pure private returns (string memory) {\n        return AddressStringUtil.toAsciiString(token, 40);\n    }\n\n    // uses a heuristic to produce a token symbol from the address\n    // the heuristic returns the first 6 hex of the address string in upper case\n    function addressToSymbol(address token) pure private returns (string memory) {\n        return AddressStringUtil.toAsciiString(token, 6);\n    }\n\n    // calls an external view token contract method that returns a symbol or name, and parses the output into a string\n    function callAndParseStringReturn(address token, bytes4 selector) view private returns (string memory) {\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(selector));\n        // if not implemented, or returns empty data, return empty string\n        if (!success || data.length == 0) {\n            return \"\";\n        }\n        // bytes32 data always has length 32\n        if (data.length == 32) {\n            bytes32 decoded = abi.decode(data, (bytes32));\n            return bytes32ToString(decoded);\n        } else if (data.length > 64) {\n            return abi.decode(data, (string));\n        }\n        return \"\";\n    }\n\n    // attempts to extract the token symbol. if it does not implement symbol, returns a symbol derived from the address\n    function tokenSymbol(address token) internal view returns (string memory) {\n        // 0x95d89b41 = bytes4(keccak256(\"symbol()\"))\n        string memory symbol = callAndParseStringReturn(token, 0x95d89b41);\n        if (bytes(symbol).length == 0) {\n            // fallback to 6 uppercase hex of address\n            return addressToSymbol(token);\n        }\n        return symbol;\n    }\n\n    // attempts to extract the token name. if it does not implement name, returns a name derived from the address\n    function tokenName(address token) internal view returns (string memory) {\n        // 0x06fdde03 = bytes4(keccak256(\"name()\"))\n        string memory name = callAndParseStringReturn(token, 0x06fdde03);\n        if (bytes(name).length == 0) {\n            // fallback to full hex of address\n            return addressToName(token);\n        }\n        return name;\n    }\n}\n"
    },
    "@uniswap/lib/contracts/libraries/TransferHelper.sol": {
      "content": "pragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n"
    },
    "contracts/interfaces/IERC3126.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\n/// @title Defines a standard interface for viewing the addresses and balances of underlying tokens.\ninterface IERC3126 {\n  /// @notice Should return a list of addresses for tokens that may be custodied by this contract\n  /// @return The list of token addresses.\n  function underlyingTokens() external view returns (address[] memory);\n\n  /// @notice Returns the underlying amount of a token that a user holds\n  /// @param user The user whose underlying balance should be calculated\n  /// @param token The token whose balance we want.\n  /// @return The underlying balance of the given token for the user.\n  function balanceOfUnderlying(address user, address token) external view returns (uint256);\n}\n"
    },
    "contracts/tokens/ERC777WithGranularity.sol": {
      "content": "\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/GSN/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Sender.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/introspection/IERC1820Registry.sol\";\nimport \"./Granularity.sol\";\n\n/**\n * @dev Copies the OpenZeppelin ERC777, but adds support for Granularity.\n */\ncontract ERC777WithGranularity is Context, IERC777, IERC20, Granularity {\n    using SafeMath for uint256;\n    using Address for address;\n\n    IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    mapping(address => uint256) private _balances;\n\n    uint256 private _totalSupply;\n\n    string internal _name;\n    string internal _symbol;\n\n    // We inline the result of the following hashes because Solidity doesn't resolve them at compile time.\n    // See https://github.com/ethereum/solidity/issues/4024.\n\n    // keccak256(\"ERC777TokensSender\")\n    bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH =\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n\n    // keccak256(\"ERC777TokensRecipient\")\n    bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH =\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\n    address[] private _defaultOperatorsArray;\n\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\n    // mapping(address => bool) private _defaultOperators;\n\n    // For each account, a mapping of its operators and revoked default operators.\n    mapping(address => mapping(address => bool)) private _operators;\n    // mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n\n    // ERC20-allowances\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    /**\n     * @dev `defaultOperators` may be an empty array.\n     */\n    constructor(\n        // string memory name,\n        // string memory symbol,\n        // address[] memory defaultOperators\n    ) public {\n        // _name = name;\n        // _symbol = symbol;\n\n        // _defaultOperatorsArray = defaultOperators;\n        // for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\n        //     _defaultOperators[_defaultOperatorsArray[i]] = true;\n        // }\n\n        // register interfaces\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n    }\n\n    /**\n     * @dev See {IERC777-name}.\n     */\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC777-symbol}.\n     */\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {ERC20-decimals}.\n     *\n     * Always returns 18, as per the\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\n     */\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC777-granularity}.\n     *\n     * This implementation always returns `1`.\n     */\n    function granularity() public view override returns (uint256) {\n        return getGranularity();\n    }\n\n    /**\n     * @dev See {IERC777-totalSupply}.\n     */\n    function totalSupply() public view override(IERC20, IERC777) virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\n     */\n    function balanceOf(address tokenHolder) public view override(IERC20, IERC777) virtual returns (uint256) {\n        return _balances[tokenHolder];\n    }\n\n    /**\n     * @dev See {IERC777-send}.\n     *\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n     */\n    function send(address recipient, uint256 amount, bytes memory data) public override  {\n        _send(_msgSender(), recipient, amount, data, \"\", true);\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\n     * interface if it is a contract.\n     *\n     * Also emits a {Sent} event.\n     */\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        address from = _msgSender();\n\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n\n        _move(from, from, recipient, amount, \"\", \"\");\n\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n\n        return true;\n    }\n\n    /**\n     * @dev See {IERC777-burn}.\n     *\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n     */\n    function burn(uint256 amount, bytes memory data) public override  {\n        _burn(_msgSender(), amount, data, \"\");\n    }\n\n    /**\n     * @dev See {IERC777-isOperatorFor}.\n     */\n    function isOperatorFor(\n        address operator,\n        address tokenHolder\n    ) public view override returns (bool) {\n        return operator == tokenHolder ||\n            // (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n    }\n\n    /**\n     * @dev See {IERC777-authorizeOperator}.\n     */\n    function authorizeOperator(address operator) public override  {\n        require(_msgSender() != operator, \"SELF-OPER\");\n\n        // if (_defaultOperators[operator]) {\n        //     delete _revokedDefaultOperators[_msgSender()][operator];\n        // } else {\n            _operators[_msgSender()][operator] = true;\n        // }\n\n        emit AuthorizedOperator(operator, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC777-revokeOperator}.\n     */\n    function revokeOperator(address operator) public override  {\n        require(operator != _msgSender(), \"SELF-OPER\");\n\n        // if (_defaultOperators[operator]) {\n        //     _revokedDefaultOperators[_msgSender()][operator] = true;\n        // } else {\n            delete _operators[_msgSender()][operator];\n        // }\n\n        emit RevokedOperator(operator, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC777-defaultOperators}.\n     */\n    function defaultOperators() public view override returns (address[] memory operators) {\n        // return _defaultOperatorsArray;\n    }\n\n    /**\n     * @dev See {IERC777-operatorSend}.\n     *\n     * Emits {Sent} and {IERC20-Transfer} events.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n    public override\n    {\n        require(isOperatorFor(_msgSender(), sender), \"ERC777 NO-OPER\");\n        _send(sender, recipient, amount, data, operatorData, true);\n    }\n\n    /**\n     * @dev See {IERC777-operatorBurn}.\n     *\n     * Emits {Burned} and {IERC20-Transfer} events.\n     */\n    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public override {\n        require(isOperatorFor(_msgSender(), account), \"ERC777 NO-OPER\");\n        _burn(account, amount, data, operatorData);\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     *\n     * Note that operator and allowance concepts are orthogonal: operators may\n     * not have allowance, and accounts with allowance may not be operators\n     * themselves.\n     */\n    function allowance(address holder, address spender) public view override returns (uint256) {\n        return _allowances[holder][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Note that accounts cannot have allowance issued by their operators.\n     */\n    function approve(address spender, uint256 value) public override returns (bool) {\n        address holder = _msgSender();\n        _approve(holder, spender, value);\n        return true;\n    }\n\n   /**\n    * @dev See {IERC20-transferFrom}.\n    *\n    * Note that operator and allowance concepts are orthogonal: operators cannot\n    * call `transferFrom` (unless they have allowance), and accounts with\n    * allowance cannot call `operatorSend` (unless they are operators).\n    *\n    * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\n    */\n    function transferFrom(address holder, address recipient, uint256 amount) public override returns (bool) {\n        address spender = _msgSender();\n\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n\n        _move(spender, holder, recipient, amount, \"\", \"\");\n        _approve(holder, spender, _allowances[holder][spender].sub(amount, \"ERC777: OVER-ALLOW\"));\n\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n\n        return true;\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `operator`, `data` and `operatorData`.\n     *\n     * See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits {Minted} and {IERC20-Transfer} events.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function _mint(\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n    internal virtual\n    {\n        require(account != address(0), \"ERC777: MINT-ZERO\");\n        require(amount % getGranularity() == 0, \"ERC777: BAD-GRAN\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, amount);\n\n        // Update state variables\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, false);\n\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Send tokens\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _send(\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        internal\n    {\n        address operator = _msgSender();\n\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n\n        _move(operator, from, to, amount, userData, operatorData);\n\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n\n    /**\n     * @dev Burn tokens\n     * @param from address token holder address\n     * @param amount uint256 amount of tokens to burn\n     * @param data bytes extra information provided by the token holder\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _burn(\n        address from,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n        internal virtual\n    {\n        require(from != address(0), \"ERC777: BURN-ZERO\");\n        require(amount % getGranularity() == 0, \"ERC777: BAD-GRAN\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), amount);\n\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n\n        // Update state variables\n        _balances[from] = _balances[from].sub(amount, \"ERC777: BURN-EXCESS\");\n        _totalSupply = _totalSupply.sub(amount);\n\n        emit Burned(operator, from, amount, data, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n\n    function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        internal virtual\n    {\n        require(from != address(0), \"ERC777: SEND-ZERO\");\n        require(to != address(0), \"ERC777: SEND-ZERO\");\n        require(amount % getGranularity() == 0, \"ERC777: BAD-GRAN\");\n        _beforeTokenTransfer(operator, from, to, amount);\n\n        _balances[from] = _balances[from].sub(amount, \"ERC777: SEND-EXCESS\");\n        _balances[to] = _balances[to].add(amount);\n\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n\n    function _approve(address holder, address spender, uint256 value) internal {\n        // TODO: restore this require statement if this function becomes internal, or is called at a new callsite. It is\n        // currently unnecessary.\n        //require(holder != address(0), \"ERC777: approve from the zero address\");\n\n        _allowances[holder][spender] = value;\n        emit Approval(holder, spender, value);\n    }\n\n    /**\n     * @dev Call from.tokensToSend() if the interface is registered\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n\n    /**\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\n     * tokensReceived() was not registered for the recipient\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(!to.isContract(), \"NOT ERC777TokensRecipient\");\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - when `from` is zero, `tokenId` will be minted for `to`.\n     * - when `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address operator, address from, address to, uint256 tokenId) internal virtual { }\n}\n"
    },
    "contracts/tokens/IPermit.sol": {
      "content": "pragma solidity >=0.6.2 <0.7.0;\n\ninterface IPermit {\n  // ERC-2612 permit\n  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n  // Dai Permit\n  function permit(address holder, address spender, uint256 nonce, uint256 expiry,\n                  bool allowed, uint8 v, bytes32 r, bytes32 s) external;\n}"
    },
    "@uniswap/lib/contracts/libraries/AddressStringUtil.sol": {
      "content": "pragma solidity >=0.5.0;\n\nlibrary AddressStringUtil {\n    // converts an address to the uppercase hex string, extracting only len bytes (up to 20, multiple of 2)\n    function toAsciiString(address addr, uint len) pure internal returns (string memory) {\n        require(len % 2 == 0 && len > 0 && len <= 40, \"AddressStringUtil: INVALID_LEN\");\n\n        bytes memory s = new bytes(len);\n        uint addrNum = uint(addr);\n        for (uint i = 0; i < len / 2; i++) {\n            // shift right and truncate all but the least significant byte to extract the byte at position 19-i\n            uint8 b = uint8(addrNum >> (8 * (19 - i)));\n            // first hex character is the most significant 4 bits\n            uint8 hi = b >> 4;\n            // second hex character is the least significant 4 bits\n            uint8 lo = b - (hi << 4);\n            s[2 * i] = char(hi);\n            s[2 * i + 1] = char(lo);\n        }\n        return string(s);\n    }\n\n    // hi and lo are only 4 bits and between 0 and 16\n    // this method converts those values to the unicode/ascii code point for the hex representation\n    // uses upper case for the characters\n    function char(uint8 b) pure private returns (byte c) {\n        if (b < 10) {\n            return byte(b + 0x30);\n        } else {\n            return byte(b + 0x37);\n        }\n    }\n}\n"
    },
    "contracts/tokens/Granularity.sol": {
      "content": "pragma solidity >=0.6.2 <0.7.0;\n\ncontract Granularity {\n  uint256 internal _decimals;\n\n  function setDecimals(uint decimals) internal {\n    _decimals = decimals;\n  }\n\n  function getGranularity() internal view returns (uint256) {\n    return 10 ** (18 - _decimals);\n  }\n\n  function from777to20(uint amount) internal view returns (uint256) {\n    return amount / getGranularity();\n  }\n\n  function from20to777(uint amount) internal view returns (uint256) {\n    return amount * getGranularity();\n  }\n}\n"
    },
    "contracts/test/TestFlashLoanRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\nimport \"../tokens/Wrapped777.sol\";\nimport \"../Receiver.sol\";\n\ncontract TestFlashLoanRecipient is Receiver {\n  uint256 private amount;\n  address private token;\n\n  function runFlashLoan(Wrapped777 _token, uint256 _amount) external {\n    amount = _amount;\n    token = address(_token);\n\n    _token.flashMint(address(this), _amount, bytes('test'));\n  }\n\n  function runInvalidFlashLoan(Wrapped777 _token, uint256 _amount) external {\n    token = 0x0000000000000000000000000000000000000000;\n    _token.flashMint(address(this), _amount, bytes('test'));\n  }\n\n  function _tokensReceived(IERC777 _token, address /*from*/, uint256 _amount, bytes memory data) internal override {\n    if (address(_token) == token) {\n      require(amount == _amount, 'Incorrect amount');\n      require(keccak256(data) == keccak256(bytes('test')), 'Wrong data');\n\n      require(_token.balanceOf(address(this)) == amount, 'Incorrect balance');\n    } else {\n      Wrapped777(address(_token)).transfer(0x0000000000000000000000000000000000000001, 1);\n    }\n  }\n}\n"
    },
    "contracts/tokens/Unwrapper.sol": {
      "content": "pragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./IWrapped777.sol\";\nimport \"../Receiver.sol\";\n\ncontract Unwrapper is Receiver {\n  function _tokensReceived(IERC777 _token, address from, uint256 amount, bytes memory /*data*/) internal override {\n    IWrapped777(address(_token)).unwrapTo(amount, from);\n  }\n}\n"
    },
    "contracts/protocols/yearn/YVaultAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../../tokens/IWrapped777.sol\";\nimport \"../../interfaces/IWETH.sol\";\nimport \"../../ReverseENS.sol\";\nimport \"../../Receiver.sol\";\nimport \"../../InfiniteApprove.sol\";\nimport \"./interfaces/IyVault.sol\";\n\n\ncontract YVaultAdapter is Receiver, InfiniteApprove, Ownable, ReverseENS {\n  mapping(address => address) public wrappedVaultToWrapper;\n  mapping(address => address) public tokenToWrappedVault;\n  IWETH public immutable weth;\n\n  constructor(IWETH _weth, address firstOwner) public {\n    weth = _weth;\n\n    // Needs to be explicitly set since we deploy through a Create2 proxy\n    transferOwnership(firstOwner);\n  }\n\n  receive() external payable {\n    if (msg.sender != address(weth)) {\n      weth.deposit{ value: msg.value }();\n\n      deposit(ERC20(address(weth)), msg.value, msg.sender);\n    }\n  }\n\n  function setWrappedVault(address wrappedToken, address wrappedVault) public onlyOwner {\n    wrappedVaultToWrapper[wrappedVault] = wrappedToken;\n    if (wrappedToken == address(weth)) {\n      tokenToWrappedVault[address(weth)] = wrappedVault;\n    } else {\n      tokenToWrappedVault[address(IWrapped777(wrappedToken).token())] = wrappedVault;\n    }\n  }\n\n  function _tokensReceived(IERC777 token, address from, uint256 amount, bytes memory) internal override {\n    address outputWrapper = wrappedVaultToWrapper[address(token)];\n\n    if (outputWrapper == address(weth)) {\n      withdrawETH(address(token), from, amount);\n    } else if (outputWrapper != address(0)) {\n      withdraw(address(token), IWrapped777(outputWrapper), from, amount);\n    } else {\n      ERC20 unwrappedToken = IWrapped777(address(token)).token();\n      uint256 unwrappedAmount = IWrapped777(address(token)).unwrap(amount);\n      deposit(unwrappedToken, unwrappedAmount, from);\n    }\n  }\n\n  function deposit(ERC20 token, uint256 amount, address recipient) private {\n    address outputWrapper = tokenToWrappedVault[address(token)];\n    require(outputWrapper != address(0), 'Unsupported');\n    IyVault vault = IyVault(address(IWrapped777(outputWrapper).token()));\n\n    infiniteApprove(token, address(vault), amount);\n    vault.deposit(amount);\n\n    vault.transfer(address(outputWrapper), vault.balanceOf(address(this)));\n    IWrapped777(outputWrapper).gulp(recipient);\n  }\n\n  function withdraw(address token, IWrapped777 outputWrapper, address recipient, uint256 amount) private {\n    uint256 unwrappedAmount = IWrapped777(token).unwrap(amount);\n    \n    IyVault vault = IyVault(address(IWrapped777(token).token()));\n    vault.withdraw(unwrappedAmount);\n\n    ERC20 innerToken = outputWrapper.token();\n    uint256 amountToReturn = innerToken.balanceOf(address(this));\n    innerToken.transfer(address(outputWrapper), amountToReturn);\n    outputWrapper.gulp(recipient);\n  }\n\n  function withdrawETH(address token, address recipient, uint256 amount) private {\n    uint256 unwrappedAmount = IWrapped777(token).unwrap(amount);\n\n    IyVault vault = IyVault(address(IWrapped777(token).token()));\n    vault.withdraw(unwrappedAmount);\n\n    uint256 ethAmount = weth.balanceOf(address(this));\n    weth.withdraw(ethAmount);\n    TransferHelper.safeTransferETH(recipient, ethAmount);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWETH is IERC20 {\n  function deposit() external payable;\n\n  function withdraw(uint wad) external;\n}\n"
    },
    "contracts/InfiniteApprove.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract InfiniteApprove {\n  uint256 internal constant INFINITY = uint256(-1);\n\n  function infiniteApprove(ERC20 _token, address spender, uint256 amount) internal {\n    if (_token.allowance(address(this), spender) < amount) {\n      _token.approve(spender, INFINITY);\n    }\n  }\n}\n"
    },
    "contracts/protocols/yearn/interfaces/IyVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IyVault is IERC20 {\n  function token() external view returns (address);\n  function deposit(uint _amount) external;\n  function withdraw(uint _shares) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/protocols/yearn/test/TestYVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.3 <0.7.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\ncontract TestYVault is ERC20 {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    IERC20 public token;\n\n    constructor(address _token)\n        public\n        ERC20(\n            string(abi.encodePacked(\"yearn \", ERC20(_token).name())),\n            string(abi.encodePacked(\"y\", ERC20(_token).symbol()))\n        )\n    {\n        token = IERC20(_token);\n    }\n\n    function balance() public view returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    function deposit(uint256 _amount) public {\n        uint256 _pool = balance();\n        uint256 _before = token.balanceOf(address(this));\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 _after = token.balanceOf(address(this));\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\n        uint256 shares = 0;\n        if (totalSupply() == 0) {\n            shares = _amount;\n        } else {\n            shares = (_amount.mul(totalSupply())).div(_pool);\n        }\n        _mint(msg.sender, shares);\n    }\n\n    // No rebalance implementation for lower fees and faster swaps\n    function withdraw(uint256 _shares) public {\n        uint256 r = (balance().mul(_shares)).div(totalSupply());\n        _burn(msg.sender, _shares);\n\n        token.safeTransfer(msg.sender, r);\n    }\n}\n"
    },
    "contracts/protocols/uniswap/UniswapPoolAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../../tokens/Wrapped777.sol\";\nimport \"../../interfaces/IWETH.sol\";\nimport \"../../Receiver.sol\";\nimport \"../../ReverseENS.sol\";\nimport \"./interfaces/IUniswapV2Pair.sol\";\nimport \"./interfaces/IUniswapV2Router01.sol\";\nimport \"./IUniswapAdapterFactory.sol\";\n\n\ncontract UniswapPoolAdapter is Receiver, ReverseENS {\n  using SafeMath for uint256;\n\n  Wrapped777 public immutable wrapper;\n  IUniswapV2Pair public immutable pool;\n\n  ERC20 public immutable token0;\n  ERC20 public immutable token1;\n\n  address private immutable weth;\n\n  constructor() public {\n    IUniswapAdapterFactory factory = IUniswapAdapterFactory(msg.sender);\n    Wrapped777 _wrapper = Wrapped777(factory.nextToken());\n    wrapper = _wrapper;\n\n    IUniswapV2Pair _pool = IUniswapV2Pair(address(_wrapper.token()));\n    pool = _pool;\n\n    token0 = _pool.token0();\n    token1 = _pool.token1();\n\n    weth = factory.uniswapRouter().WETH();\n  }\n\n  receive() external payable {\n    if (address(token0) != weth && address(token1) != weth) {\n      revert('NoETH');\n    }\n\n    IWETH(weth).deposit{ value: msg.value }();\n\n    swapHalfAddLiquidityAndReturn(weth, msg.value, msg.sender);\n  }\n\n  function _tokensReceived(IERC777 _token, address from, uint256 amount, bytes memory /*data*/) internal override {\n    Wrapped777 inputWrapper = Wrapped777(address(_token));\n    ERC20 unwrappedInput = inputWrapper.token();\n\n    uint unwrappedBalance = inputWrapper.unwrap(amount);\n\n    if (address(unwrappedInput) == address(token0) || address(unwrappedInput) == address(token1)) {\n      // Swap half of the token so it can add liquidity\n      swapHalfAddLiquidityAndReturn(address(unwrappedInput), unwrappedBalance, from);\n    } else if (address(unwrappedInput) == address(pool)) {\n      // If receiving an LP token wrapper, remove liquidity and send the tokens to the sender\n      // Note: this sends the unwrapped tokens\n      pool.burn(from);\n    } else {\n      revert(\"Invalid\");\n    }\n  }\n\n  function swapHalfAddLiquidityAndReturn(address token, uint256 amount, address recipient) private {\n    (uint256 outputAmount, uint256 keepAmount) = swapHalf(token, amount);\n\n    (uint256 amount0, uint256 amount1) = token == address(token0)\n      ? (keepAmount, outputAmount)\n      : (outputAmount, keepAmount);\n\n    uint256 poolTokens = addLiquidity(amount0, amount1);\n\n    pool.transfer(address(wrapper), poolTokens);\n    wrapper.gulp(recipient);\n  }\n\n  function swapHalf(address input, uint256 amount) private returns (uint256 outputAmount, uint256 keepAmount) {\n    (uint256 res0, uint256 res1, ) = pool.getReserves();\n\n    uint256 swapReserve = input == address(token0) ? res0 : res1;\n    uint256 outReserve = input == address(token0) ? res1 : res0;\n\n    uint256 swapAmount = calculateSwapInAmount(swapReserve, amount);\n    keepAmount = amount - swapAmount;\n    ERC20(input).transfer(address(pool), swapAmount);\n\n    outputAmount = getAmountOut(swapAmount, swapReserve, outReserve);\n    (uint amount0Out, uint amount1Out) = input == address(token0)\n      ? (uint(0), outputAmount)\n      : (outputAmount, uint(0));\n    pool.swap(amount0Out, amount1Out, address(this), new bytes(0));\n  }\n\n  function addLiquidity(uint256 amount0, uint256 amount1) private returns (uint256 poolTokens) {\n    token0.transfer(address(pool), amount0);\n    token1.transfer(address(pool), amount1);\n    poolTokens = pool.mint(address(this));\n  }\n\n  function calculateSwapInAmount(uint256 reserveIn, uint256 userIn) public pure returns (uint256 amount) {\n    amount = sqrt(reserveIn.mul(userIn.mul(3988000) + reserveIn.mul(3988009))).sub(reserveIn.mul(1997)) / 1994;\n\n    if (amount == 0) {\n      amount = userIn / 2;\n    }\n  }\n\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n    uint amountInWithFee = amountIn.mul(997);\n    uint numerator = amountInWithFee.mul(reserveOut);\n    uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n    amountOut = numerator / denominator;\n  }\n\n  function sqrt(uint256 y) internal pure returns (uint256 z) {\n    if (y > 3) {\n      z = y;\n      uint256 x = y / 2 + 1;\n      while (x < z) {\n        z = x;\n        x = (y / x + x) / 2;\n      }\n    } else if (y != 0) {\n      z = 1;\n    }\n    // else z = 0\n  }\n}\n"
    },
    "contracts/protocols/uniswap/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GNU\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (ERC20);\n    function token1() external view returns (ERC20);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
    },
    "contracts/protocols/uniswap/interfaces/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: GNU\npragma solidity >=0.6.2;\n\nimport './IUniswapV2Factory.sol';\n// import './IUniswapV2Library.sol';\n\ninterface IUniswapV2Router01 /*is IUniswapV2Library*/ {\n    function WETH() external view returns (address);\n    function factory() external view returns (IUniswapV2Factory);\n\n    // function addLiquidity(\n    //     address tokenA,\n    //     address tokenB,\n    //     uint amountADesired,\n    //     uint amountBDesired,\n    //     uint amountAMin,\n    //     uint amountBMin,\n    //     address to,\n    //     uint deadline\n    // ) external returns (uint amountA, uint amountB, uint liquidity);\n    // function addLiquidityETH(\n    //     address token,\n    //     uint amountTokenDesired,\n    //     uint amountTokenMin,\n    //     uint amountETHMin,\n    //     address to,\n    //     uint deadline\n    // ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    // function removeLiquidity(\n    //     address tokenA,\n    //     address tokenB,\n    //     uint liquidity,\n    //     uint amountAMin,\n    //     uint amountBMin,\n    //     address to,\n    //     uint deadline\n    // ) external returns (uint amountA, uint amountB);\n    // function removeLiquidityETH(\n    //     address token,\n    //     uint liquidity,\n    //     uint amountTokenMin,\n    //     uint amountETHMin,\n    //     address to,\n    //     uint deadline\n    // ) external returns (uint amountToken, uint amountETH);\n    // function removeLiquidityWithPermit(\n    //     address tokenA,\n    //     address tokenB,\n    //     uint liquidity,\n    //     uint amountAMin,\n    //     uint amountBMin,\n    //     address to,\n    //     uint deadline,\n    //     bool approveMax, uint8 v, bytes32 r, bytes32 s\n    // ) external returns (uint amountA, uint amountB);\n    // function removeLiquidityETHWithPermit(\n    //     address token,\n    //     uint liquidity,\n    //     uint amountTokenMin,\n    //     uint amountETHMin,\n    //     address to,\n    //     uint deadline,\n    //     bool approveMax, uint8 v, bytes32 r, bytes32 s\n    // ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    // function swapTokensForExactTokens(\n    //     uint amountOut,\n    //     uint amountInMax,\n    //     address[] calldata path,\n    //     address to,\n    //     uint deadline\n    // ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    // function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    //     external\n    //     returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    // function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    //     external\n    //     payable\n    //     returns (uint[] memory amounts);\n}\n"
    },
    "contracts/protocols/uniswap/IUniswapAdapterFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\ninterface IUniswapAdapterFactory {\n  function nextToken() external view returns (address);\n\n  function uniswapRouter() external view returns (IUniswapV2Router01);\n}\n"
    },
    "contracts/protocols/uniswap/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GNU\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    // function feeTo() external view returns (address);\n    // function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    // function allPairs(uint) external view returns (address pair);\n    // function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    // function setFeeTo(address) external;\n    // function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/protocols/uniswap/UniswapPoolAdapterFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"../../tokens/Wrapped777.sol\";\nimport \"../../Receiver.sol\";\nimport \"./interfaces/IUniswapV2Router01.sol\";\nimport \"./IUniswapAdapterFactory.sol\";\nimport \"./UniswapPoolAdapter.sol\";\n\ncontract UniswapPoolAdapterFactory is Receiver, IUniswapAdapterFactory {\n  using Address for address;\n\n  bytes32 public constant POOL_ADAPTER_BYTECODE_HASH = keccak256(type(UniswapPoolAdapter).creationCode);\n\n  address private _nextToken;\n  address private immutable _router;\n\n  event AdapterCreated(address poolWrapper);\n\n  constructor(address __router) public {\n    _router = __router;\n  }\n\n  function calculateAdapterAddress(address poolWrapper) public view returns (address calculatedAddress) {\n    calculatedAddress = address(uint(keccak256(abi.encodePacked(\n      byte(0xff),\n      address(this),\n      bytes32(uint(poolWrapper)),\n      POOL_ADAPTER_BYTECODE_HASH\n    ))));\n  }\n\n  function createAdapter(address poolWrapper) public {\n    _nextToken = poolWrapper;\n    new UniswapPoolAdapter{salt: bytes32(uint(poolWrapper))}();\n    _nextToken = address(0);\n\n    emit AdapterCreated(poolWrapper);\n  }\n\n  function getAdapterAddress(address poolWrapper) public returns (address wrapperAddress) {\n    wrapperAddress = calculateAdapterAddress(poolWrapper);\n\n    if(!wrapperAddress.isContract()) {\n      createAdapter(poolWrapper);\n      assert(wrapperAddress.isContract());\n    }\n  }\n\n  function nextToken() external override view returns (address) {\n    return _nextToken;\n  }\n\n  function uniswapRouter() external override view returns (IUniswapV2Router01) {\n    return IUniswapV2Router01(_router);\n  }\n\n  function _tokensReceived(IERC777, address, uint256, bytes memory) internal override {\n    revert('Receiving tokens not allowed');\n  }\n}\n"
    },
    "contracts/protocols/uniswap/UniswapAdapterFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"../../tokens/Wrapped777.sol\";\nimport \"../../Receiver.sol\";\nimport \"./interfaces/IUniswapV2Router01.sol\";\nimport \"./IUniswapAdapterFactory.sol\";\nimport \"./UniswapAdapter.sol\";\n\ncontract UniswapAdapterFactory is Receiver, IUniswapAdapterFactory {\n  using Address for address;\n\n  bytes32 public constant ADAPTER_BYTECODE_HASH = keccak256(type(UniswapAdapter).creationCode);\n\n  address private immutable router;\n  address private _nextToken;\n\n  event AdapterCreated(address token);\n\n  constructor(address _uniswapRouter) public {\n    router = _uniswapRouter;\n  }\n\n  function calculateAdapterAddress(address token) public view returns (address calculatedAddress) {\n    calculatedAddress = address(uint(keccak256(abi.encodePacked(\n      byte(0xff),\n      address(this),\n      bytes32(uint(token)),\n      ADAPTER_BYTECODE_HASH\n    ))));\n  }\n\n  function createAdapter(address token) public {\n    _nextToken = token;\n    new UniswapAdapter{salt: bytes32(uint(token))}();\n    _nextToken = address(0);\n\n    emit AdapterCreated(token);\n  }\n\n  function getAdapterAddress(address token) public returns (address adapterAddress) {\n    adapterAddress = calculateAdapterAddress(token);\n\n    if(!adapterAddress.isContract()) {\n      createAdapter(token);\n      assert(adapterAddress.isContract());\n    }\n  }\n\n  function uniswapRouter() external override view returns (IUniswapV2Router01) {\n    return IUniswapV2Router01(router);\n  }\n\n  function nextToken() external override view returns (address) {\n    return _nextToken;\n  }\n\n  function _tokensReceived(IERC777, address, uint256, bytes memory) internal override {\n    revert('Receiving tokens not allowed');\n  }\n}\n"
    },
    "contracts/protocols/uniswap/UniswapAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../../tokens/Wrapped777.sol\";\nimport \"../../interfaces/IWETH.sol\";\nimport \"../../Receiver.sol\";\nimport \"../../ReverseENS.sol\";\nimport \"./interfaces/IUniswapV2Router01.sol\";\nimport \"./interfaces/IUniswapV2Pair.sol\";\nimport \"./IUniswapAdapterFactory.sol\";\n\ncontract UniswapAdapter is Receiver, ReverseENS {\n  using SafeMath for uint256;\n\n  Wrapped777 public immutable wrapper;\n  IUniswapV2Router01 public immutable router;\n  IUniswapV2Factory public immutable uniswapFactory;\n  address private immutable weth;\n\n  constructor() public {\n    IUniswapAdapterFactory factory = IUniswapAdapterFactory(msg.sender);\n    Wrapped777 _wrapper = Wrapped777(factory.nextToken());\n    wrapper = _wrapper;\n    IUniswapV2Router01 _router = factory.uniswapRouter();\n    weth = _router.WETH();\n    router = _router;\n    uniswapFactory = _router.factory();\n  }\n\n  receive() external payable {\n    if (msg.sender == weth) {\n      return;\n    }\n\n    IWETH(weth).deposit{ value: msg.value }();\n\n    ERC20 outputToken = wrapper.token();\n    uint256 outputAmount = executeSwap(weth, address(outputToken), msg.value, address(wrapper));\n    require (outputAmount > 0, \"NO_PAIR\");\n\n    wrapper.gulp(msg.sender);\n  }\n\n  /**\n    * Ex: Assume this is a Dai Uniswap contract\n    * If Dai777 is sent to this, it will swap to ETH\n    * If USDC777 is sent to this, it wall swap to Dai777\n    */\n  function _tokensReceived(IERC777 _token, address from, uint256 amount, bytes memory /*data*/) internal override {\n    // Todo: support non-wrapped 777 tokens\n    Wrapped777 inputWrapper = Wrapped777(address(_token));\n    ERC20 unwrappedInput = inputWrapper.token();\n\n    if (isUniswapLPToken(address(unwrappedInput))) {\n      burnAndSwapLPToken(inputWrapper, IUniswapV2Pair(address(unwrappedInput)), from, amount);\n      return;\n    }\n\n    uint unwrappedBalance = inputWrapper.unwrap(amount);\n\n    if (address(_token) == address(wrapper)) {\n      uint256 wethAmount = executeSwap(address(unwrappedInput), weth, unwrappedBalance, address(this));\n      require(wethAmount > 0, \"NO_PAIR\");\n\n      IWETH(weth).withdraw(wethAmount);\n      TransferHelper.safeTransferETH(from, wethAmount);\n    } else {\n      ERC20 outputToken = wrapper.token();\n      uint256 outputAmount = executeSwap(address(unwrappedInput), address(outputToken), unwrappedBalance, address(wrapper));\n\n      if (outputAmount == 0) {\n        address wethOutPair = uniswapFactory.getPair(weth, address(outputToken));\n        uint256 wethAmount = executeSwap(address(unwrappedInput), weth, unwrappedBalance, wethOutPair);\n        outputAmount = executeSwap(weth, address(outputToken), wethAmount, 0, address(wrapper));\n      }\n\n      require(outputAmount > 0, \"NO_PAIR\");\n\n      wrapper.gulp(from);\n    }\n  }\n\n  function executeSwap(address input, address out, uint256 swapAmount, address to) private returns (uint256 outputAmount) {\n    return executeSwap(input, out, swapAmount, swapAmount, to);\n  }\n\n  function executeSwap(address input, address out, uint256 swapAmount, uint256 transferAmount, address to) private returns (uint256 outputAmount) {\n    IUniswapV2Pair pair = IUniswapV2Pair(uniswapFactory.getPair(input, out));\n    if (address(pair) == address(0)) {\n      return 0;\n    }\n\n    if (transferAmount > 0) {\n      TransferHelper.safeTransfer(input, address(pair), transferAmount);\n    }\n\n    address token0 = address(pair.token0());\n\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\n    (uint256 reserveIn, uint256 reserveOut) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n\n    outputAmount = getAmountOut(swapAmount, reserveIn, reserveOut);\n    (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), outputAmount) : (outputAmount, uint(0));\n\n    pair.swap(amount0Out, amount1Out, to, new bytes(0));\n  }\n\n  function isUniswapLPToken(address token) private view returns (bool) {\n    try IUniswapV2Pair(token).factory() returns (address factory) {\n      return factory == address(uniswapFactory);\n    } catch {\n      return false;\n    }\n  }\n\n  function burnAndSwapLPToken(Wrapped777 inputWrapper, IUniswapV2Pair pair, address recipient, uint256 amount) private {\n    ERC20 outputToken = wrapper.token();\n    address token0 = address(pair.token0());\n    address token1 = address(pair.token1());\n\n    inputWrapper.unwrapTo(amount, address(pair));\n\n    (uint amount0, uint amount1) = pair.burn(address(this));\n\n    (address keepToken, address swapToken) = address(outputToken) == token0\n      ? (token0, token1)\n      : (token1, token0);\n    require(keepToken == address(outputToken), 'BAD_PAIR');\n\n    (uint256 keepAmount, uint256 swapAmount) = address(outputToken) == token0\n      ? (amount0, amount1)\n      : (amount1, amount0);\n\n    executeSwap(swapToken, keepToken, swapAmount, address(wrapper));\n    outputToken.transfer(address(wrapper), keepAmount);\n\n    wrapper.gulp(recipient);\n  }\n\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n    require(amountIn > 0);\n    require(reserveIn > 0 && reserveOut > 0);\n    uint amountInWithFee = amountIn.mul(997);\n    uint numerator = amountInWithFee.mul(reserveOut);\n    uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n    amountOut = numerator / denominator;\n  }\n}\n"
    },
    "contracts/protocols/uniswap/UniswapETHAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../../tokens/Wrapped777.sol\";\nimport \"../../interfaces/IWETH.sol\";\nimport \"../../Receiver.sol\";\nimport \"../../ReverseENS.sol\";\nimport \"./interfaces/IUniswapV2Router01.sol\";\nimport \"./interfaces/IUniswapV2Pair.sol\";\n\ncontract UniswapETHAdapter is Receiver {\n  using SafeMath for uint256;\n\n  IUniswapV2Router01 public immutable router;\n  IUniswapV2Factory public immutable uniswapFactory;\n  address private immutable weth;\n\n  constructor(IUniswapV2Router01 _router) public {\n    weth = _router.WETH();\n    router = _router;\n    uniswapFactory = _router.factory();\n  }\n\n  receive() external payable {\n    require(msg.sender == weth);\n  }\n\n  function _tokensReceived(IERC777 _token, address from, uint256 amount, bytes memory /*data*/) internal override {\n    // Todo: support non-wrapped 777 tokens\n    Wrapped777 inputWrapper = Wrapped777(address(_token));\n    ERC20 unwrappedInput = inputWrapper.token();\n\n    if (isUniswapLPToken(address(unwrappedInput))) {\n      burnAndSwapLPToken(inputWrapper, IUniswapV2Pair(address(unwrappedInput)), from, amount);\n      return;\n    }\n\n    uint unwrappedBalance = inputWrapper.unwrap(amount);\n\n    uint256 wethAmount = executeSwap(address(unwrappedInput), weth, unwrappedBalance, address(this));\n    require(wethAmount > 0, \"NO_PAIR\");\n\n    IWETH(weth).withdraw(wethAmount);\n    TransferHelper.safeTransferETH(from, wethAmount);\n  }\n\n  function executeSwap(address input, address out, uint256 swapAmount, address to) private returns (uint256 outputAmount) {\n    return executeSwap(input, out, swapAmount, swapAmount, to);\n  }\n\n  function executeSwap(address input, address out, uint256 swapAmount, uint256 transferAmount, address to) private returns (uint256 outputAmount) {\n    IUniswapV2Pair pair = IUniswapV2Pair(uniswapFactory.getPair(input, out));\n    if (address(pair) == address(0)) {\n      return 0;\n    }\n\n    if (transferAmount > 0) {\n      TransferHelper.safeTransfer(input, address(pair), transferAmount);\n    }\n\n    address token0 = address(pair.token0());\n\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\n    (uint256 reserveIn, uint256 reserveOut) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n\n    outputAmount = getAmountOut(swapAmount, reserveIn, reserveOut);\n    (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), outputAmount) : (outputAmount, uint(0));\n\n    pair.swap(amount0Out, amount1Out, to, new bytes(0));\n  }\n\n  function isUniswapLPToken(address token) private view returns (bool) {\n    try IUniswapV2Pair(token).factory() returns (address factory) {\n      return factory == address(uniswapFactory);\n    } catch {\n      return false;\n    }\n  }\n\n  function burnAndSwapLPToken(Wrapped777 inputWrapper, IUniswapV2Pair pair, address recipient, uint256 amount) private {\n    address token0 = address(pair.token0());\n    address token1 = address(pair.token1());\n\n    inputWrapper.unwrapTo(amount, address(pair));\n\n    (uint amount0, uint amount1) = pair.burn(address(this));\n\n    (address keepToken, address swapToken) = weth == token0\n      ? (token0, token1)\n      : (token1, token0);\n    require(keepToken == weth, 'BAD_PAIR');\n\n    (uint256 keepAmount, uint256 swapAmount) = weth == token0\n      ? (amount0, amount1)\n      : (amount1, amount0);\n\n    uint256 outputAmount = executeSwap(swapToken, keepToken, swapAmount, address(this));\n\n    uint256 totalWETH = outputAmount + keepAmount;\n    IWETH(weth).withdraw(totalWETH);\n    TransferHelper.safeTransferETH(recipient, totalWETH);\n  }\n\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n    require(amountIn > 0);\n    require(reserveIn > 0 && reserveOut > 0);\n    uint amountInWithFee = amountIn.mul(997);\n    uint numerator = amountInWithFee.mul(reserveOut);\n    uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n    amountOut = numerator / denominator;\n  }\n}\n"
    },
    "contracts/protocols/uniswap/test/TestUniswapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/IUniswapV2Router01.sol\";\nimport \"../interfaces/IUniswapV2Factory.sol\";\nimport \"./TestUniswapFactory.sol\";\nimport \"../../../test/WETH.sol\";\n\ncontract TestUniswapRouter is IUniswapV2Router01 {\n\n  address immutable weth;\n\n  IUniswapV2Factory _factory;\n\n  constructor() public {\n    _factory = IUniswapV2Factory(new TestUniswapFactory());\n    weth = address(new WETH());\n  }\n\n  receive() external payable {}\n\n  function WETH() external override view returns (address) {\n    return weth;\n  }\n\n  function factory() external override view returns (IUniswapV2Factory) {\n    return _factory;\n  }\n\n\n  function swapExactTokensForTokens(\n      uint amountIn,\n      uint /*amountOutMin*/,\n      address[] calldata path,\n      address to,\n      uint /*deadline*/\n  ) external override returns (uint[] memory amounts) {\n    IERC20(path[0]).transferFrom(msg.sender, address(this), amountIn);\n    IERC20(path[path.length - 1]).transfer(to, amountIn);\n\n    amounts = new uint[](path.length);\n    amounts[0] = amountIn;\n    amounts[amounts.length - 1] = amountIn;\n  }\n\n  function swapExactETHForTokens(uint /*amountOutMin*/, address[] calldata path, address to, uint /*deadline*/)\n    external override\n    payable\n    returns (uint[] memory amounts)\n  {\n    IERC20(path[path.length - 1]).transfer(to, msg.value);\n\n    amounts = new uint[](path.length);\n    amounts[0] = msg.value;\n    amounts[amounts.length - 1] = msg.value;\n  }\n\n  function swapExactTokensForETH(uint amountIn, uint /*amountOutMin*/, address[] calldata path, address to, uint /*deadline*/)\n    external override\n    returns (uint[] memory amounts)\n  {\n    IERC20(path[0]).transferFrom(msg.sender, address(this), amountIn);\n    payable(to).transfer(amountIn);\n\n    amounts = new uint[](path.length);\n    amounts[0] = amountIn;\n    amounts[amounts.length - 1] = amountIn;\n  }\n}\n"
    },
    "contracts/protocols/uniswap/test/TestUniswapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"../interfaces/IUniswapV2Factory.sol\";\nimport \"./TestUniswapPair.sol\";\n\ncontract TestUniswapFactory is IUniswapV2Factory {\n\n  mapping(address => mapping(address => address)) private pairs;\n\n  function getPair(address tokenA, address tokenB) external override view returns (address pair) {\n    return pairs[tokenA][tokenB];\n  }\n\n  function createPair(address tokenA, address tokenB) external override returns (address pair) {\n    (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    require(pairs[token0][token1] == address(0), 'UniswapV2: PAIR_EXISTS'); // single check is sufficient\n\n    pair = address(new TestUniswapPair{ salt: keccak256(abi.encodePacked(token0, token1)) }(token0, token1));\n\n    pairs[token0][token1] = pair;\n    pairs[token1][token0] = pair; // populate mapping in the reverse direction\n  }\n}\n"
    },
    "contracts/test/WETH.sol": {
      "content": "// SPDX-License-Identifier: GNU\n// Copyright (C) 2015, 2016, 2017 Dapphub\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.6.0 <0.7;\n\ncontract WETH {\n    string public name     = \"Wrapped Ether\";\n    string public symbol   = \"WETH\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed src, address indexed guy, uint wad);\n    event  Transfer(address indexed src, address indexed dst, uint wad);\n    event  Deposit(address indexed dst, uint wad);\n    event  Withdrawal(address indexed src, uint wad);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    receive() external payable {\n        deposit();\n    }\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad, \"WETH: Insuficent balance\");\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n"
    },
    "contracts/protocols/uniswap/test/TestUniswapPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n\ncontract TestUniswapPair is ERC20 {\n    using SafeMath  for uint;\n    using UQ112x112 for uint224;\n\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n\n    address public factory;\n    address public token0;\n    address public token1;\n\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\n\n    uint public price0CumulativeLast;\n    uint public price1CumulativeLast;\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n    uint private unlocked = 1;\n    modifier lock() {\n        require(unlocked == 1, 'UniswapV2: LOCKED');\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    function setFactory(address _factory) external {\n        factory = _factory;\n    }\n\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n    function _safeTransfer(address token, address to, uint value) private {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');\n    }\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    constructor(address _token0, address _token1) public ERC20(\"Uniswap Pool\", \"UNI\") {\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    // update reserves and, on the first call per block, price accumulators\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n        }\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function mint(address to) external lock returns (uint liquidity) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        uint balance0 = IERC20(token0).balanceOf(address(this));\n        uint balance1 = IERC20(token1).balanceOf(address(this));\n        uint amount0 = balance0.sub(_reserve0);\n        uint amount1 = balance1.sub(_reserve1);\n\n        uint _totalSupply = totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n           _mint(address(1), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n        }\n        require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');\n        _mint(to, liquidity);\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        address _token0 = token0;                                // gas savings\n        address _token1 = token1;                                // gas savings\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\n        uint liquidity = balanceOf(address(this));\n\n        uint _totalSupply = totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata) external lock {\n        require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');\n\n        uint balance0;\n        uint balance1;\n        { // scope for _token{0,1}, avoids stack too deep errors\n        address _token0 = token0;\n        address _token1 = token1;\n        require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n        // if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n    function skim(address to) external lock {\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n    }\n\n    // force reserves to match balances\n    function sync() external lock {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n}\n"
    },
    "contracts/protocols/curve/CurveAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../../tokens/IWrapped777.sol\";\nimport \"../../Receiver.sol\";\nimport \"../../ReverseENS.sol\";\nimport \"../../InfiniteApprove.sol\";\nimport \"./interfaces/ICurvePool.sol\";\n\ncontract CurveAdapter is Receiver, InfiniteApprove, ReverseENS {\n  mapping(address => int128) private tokenID;\n\n  IWrapped777 public immutable wrapper;\n  ICurvePool public immutable pool;\n  int128 private immutable numTokens;\n\n  constructor(IWrapped777 _wrapper, int128 _numTokens) public {\n    ICurvePool _pool = ICurvePool(address(_wrapper.token()));\n    wrapper = _wrapper;\n    numTokens = _numTokens;\n    pool = _pool;\n\n    for (int128 i; i < _numTokens; i++) {\n      tokenID[_pool.coins(i)] = i + 1;\n    }\n  }\n\n  function _tokensReceived(IERC777 _token, address from, uint256 amount, bytes memory /*data*/) internal override {\n    IWrapped777 inputWrapper = IWrapped777(address(_token));\n    ERC20 wrappedToken = inputWrapper.token();\n\n    int128 id = tokenID[address(wrappedToken)];\n    if (id == 0) {\n      revert('Unsupported');\n    }\n    id--;\n\n    uint256 unwrappedAmount = inputWrapper.unwrap(amount);\n    infiniteApprove(wrappedToken, address(pool), unwrappedAmount);\n\n    addLiquidity(id, unwrappedAmount);\n\n    uint256 newTokens = ERC20(address(pool)).balanceOf(address(this));\n    ERC20(address(pool)).transfer(address(wrapper), newTokens);\n    wrapper.gulp(from);\n  }\n\n  function addLiquidity(int128 id, uint256 amount) private {\n    if (numTokens == 4) {\n      uint256[4] memory fourTokens;\n      fourTokens[uint256(id)] = amount;\n      pool.add_liquidity(fourTokens, 0);\n    } else if (numTokens == 3) {\n      uint256[3] memory threeTokens;\n      threeTokens[uint256(id)] = amount;\n      pool.add_liquidity(threeTokens, 0);\n    } else if (numTokens == 2) {\n      uint256[2] memory twoTokens;\n      twoTokens[uint256(id)] = amount;\n      pool.add_liquidity(twoTokens, 0);\n    } else {\n      revert();\n    }\n  }\n}\n"
    },
    "contracts/protocols/balancer/BalancerPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../../tokens/IWrapperFactory.sol\";\nimport \"../../tokens/IWrapped777.sol\";\nimport \"../../interfaces/IWETH.sol\";\nimport \"../../Receiver.sol\";\nimport \"../../ReverseENS.sol\";\nimport \"../../InfiniteApprove.sol\";\nimport \"./interfaces/BPool.sol\";\nimport \"./IBalancerPoolFactory.sol\";\n\ncontract BalancerPool is Receiver, InfiniteApprove, ReverseENS {\n  IWrapped777 public immutable token;\n  BPool public immutable pool;\n  IWETH private immutable weth;\n\n  constructor() public {\n    IWrapped777 _token = IWrapped777(IWrapperFactory(msg.sender).nextToken());\n    weth = IWETH(IBalancerPoolFactory(msg.sender).weth());\n    BPool _pool = BPool(address(_token.token()));\n    token = _token;\n    pool = _pool;\n  }\n\n  receive() external payable {\n    weth.deposit{value: msg.value}();\n\n    swapInToPool(ERC20(address(weth)), msg.value, msg.sender);\n  }\n\n  function _tokensReceived(IERC777 _token, address from, uint256 amount, bytes memory /*data*/) internal override {\n    uint256 unwrappedAmount = IWrapped777(address(_token)).unwrap(amount);\n\n    ERC20 innerInputToken = IWrapped777(address(_token)).token();\n\n    swapInToPool(innerInputToken, unwrappedAmount, from);\n  }\n\n  function swapInToPool(ERC20 tokenIn, uint256 amount, address recipient) private {\n    infiniteApprove(tokenIn, address(pool), amount);\n    uint256 poolTokens = pool.joinswapExternAmountIn(address(tokenIn), amount, 0);\n    \n    ERC20(address(pool)).transfer(address(token), poolTokens);\n    token.gulp(recipient);\n  }\n}\n"
    },
    "contracts/protocols/balancer/interfaces/BPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\ninterface BPool {\n  function getCurrentTokens() external view returns (address[] memory tokens);\n\n  function swapExactAmountIn(\n    address tokenIn,\n    uint tokenAmountIn,\n    address tokenOut,\n    uint minAmountOut,\n    uint maxPrice\n  ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n\n  function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\n\n  function joinswapExternAmountIn(\n    address tokenIn,\n    uint tokenAmountIn,\n    uint minPoolAmountOut\n  ) external returns (uint poolAmountOut);\n\n  function exitswapPoolAmountIn(\n    address tokenOut,\n    uint poolAmountIn,\n    uint minAmountOut\n  ) external returns (uint tokenAmountOut);\n}\n"
    },
    "contracts/protocols/balancer/IBalancerPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\ninterface IBalancerPoolFactory {\n  function nextToken() external view returns (address);\n  function weth() external view returns (address);\n}\n"
    },
    "contracts/protocols/balancer/BalancerPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.3 <0.7.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./BalancerPool.sol\";\nimport \"./IBalancerPoolFactory.sol\";\n\n\ncontract BalancerPoolFactory is IBalancerPoolFactory {\n  using Address for address;\n\n  address private _nextToken;\n  address private immutable _weth;\n\n  bytes32 public constant ADAPTER_BYTECODE_HASH = keccak256(type(BalancerPool).creationCode);\n\n  event AdapterCreated(address pool);\n\n  constructor(address __weth) public {\n    _weth = __weth;\n  }\n\n  function calculateAdapterAddress(address pool) public view returns (address calculatedAddress) {\n    calculatedAddress = address(uint(keccak256(abi.encodePacked(\n      byte(0xff),\n      address(this),\n      bytes32(uint(pool)),\n      ADAPTER_BYTECODE_HASH\n    ))));\n  }\n\n  function createAdapter(address pool) public {\n    _nextToken = pool;\n    new BalancerPool{salt: bytes32(uint(pool))}();\n    _nextToken = address(0);\n\n    emit AdapterCreated(pool);\n  }\n\n  function getAdapterAddress(address pool) public returns (address wrapperAddress) {\n    wrapperAddress = calculateAdapterAddress(pool);\n\n    if(!wrapperAddress.isContract()) {\n      createAdapter(pool);\n      assert(wrapperAddress.isContract());\n    }\n  }\n\n  function nextToken() external override view returns (address) {\n    return _nextToken;\n  }\n\n  function weth() external override view returns (address) {\n    return _weth;\n  }\n}\n"
    },
    "contracts/protocols/balancer/BalancerPoolExitFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.3 <0.7.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"../../tokens/IWrapperFactory.sol\";\nimport \"./BalancerPoolExit.sol\";\n\ncontract BalancerPoolExitFactory is IWrapperFactory {\n  using Address for address;\n\n  address private _nextToken;\n\n  bytes32 public constant ADAPTER_BYTECODE_HASH = keccak256(type(BalancerPoolExit).creationCode);\n\n  event AdapterCreated(address wrapper);\n\n  function calculateAdapterAddress(address wrapper) public view returns (address calculatedAddress) {\n    calculatedAddress = address(uint(keccak256(abi.encodePacked(\n      byte(0xff),\n      address(this),\n      bytes32(uint(wrapper)),\n      ADAPTER_BYTECODE_HASH\n    ))));\n  }\n\n  function createAdapter(address wrapper) public {\n    _nextToken = wrapper;\n    new BalancerPoolExit{salt: bytes32(uint(wrapper))}();\n    _nextToken = address(0);\n\n    emit AdapterCreated(wrapper);\n  }\n\n  function getAdapterAddress(address wrapper) public returns (address wrapperAddress) {\n    wrapperAddress = calculateAdapterAddress(wrapper);\n\n    if(!wrapperAddress.isContract()) {\n      createAdapter(wrapper);\n      assert(wrapperAddress.isContract());\n    }\n  }\n\n  function nextToken() external override view returns (address) {\n    return _nextToken;\n  }\n}\n"
    },
    "contracts/protocols/balancer/BalancerPoolExit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/introspection/IERC1820Registry.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../../farming/IFarmerToken.sol\";\nimport \"../../tokens/IWrapperFactory.sol\";\nimport \"../../tokens/IWrapped777.sol\";\nimport \"../../interfaces/IWETH.sol\";\nimport \"../../Receiver.sol\";\nimport \"../../ReverseENS.sol\";\nimport \"./interfaces/BPool.sol\";\n\n\ncontract BalancerPoolExit is Receiver, ReverseENS {\n  IWrapped777 public immutable token;\n  ERC20 public immutable innerToken;\n\n  IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n  constructor() public {\n    IWrapped777 _token = IWrapped777(IWrapperFactory(msg.sender).nextToken());\n\n    innerToken = ERC20(_token.token());\n    token = _token;\n  }\n\n  function _tokensReceived(IERC777 _token, address from, uint256 amount, bytes memory /*data*/) internal override {\n    IWrapped777 inputWrapper = IWrapped777(address(_token));\n    BPool pool = BPool(address(inputWrapper.token()));\n\n    address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(address(_token), keccak256(\"Farmer777\"));\n    if (implementer != address(0) /* token is FarmerToken */) {\n      farmRewards(IFarmerToken(address(_token)), from);\n    }\n\n    uint256 poolTokens = inputWrapper.unwrap(amount);\n\n    uint256 exitAmount = pool.exitswapPoolAmountIn(address(innerToken), poolTokens, 0);\n\n    innerToken.transfer(address(token), exitAmount);\n    token.gulp(from);\n  }\n\n  function farmRewards(IFarmerToken _token, address recipient) private {\n    address[] memory rewardWrappers = _token.rewardWrappers();\n\n    for (uint i = 0; i < rewardWrappers.length; i++) {\n      ERC20 rewardAdapter = ERC20(_token.getRewardAdapter(rewardWrappers[i]));\n      uint256 rewardBalance = rewardAdapter.balanceOf(address(this));\n      if (rewardBalance > 0) {\n        rewardAdapter.transfer(recipient, rewardBalance);\n      }\n    }\n  }\n}\n"
    },
    "contracts/protocols/balancer/test/TestBPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../interfaces/BPool.sol\";\n\ncontract TestBPool is BPool, ERC20 {\n  address[] private tokens;\n  mapping(address => bool) private hasToken;\n\n  constructor(address[] memory _tokens) public ERC20(\"Balancer Pool Token\", \"BPT\") {\n    tokens = _tokens;\n    for (uint i = 0; i < _tokens.length; i++) {\n      hasToken[_tokens[i]] = true;\n    }\n  }\n\n  function getCurrentTokens() external view override returns (address[] memory) {\n    return tokens;\n  }\n\n  function swapExactAmountIn(\n    address tokenIn,\n    uint tokenAmountIn,\n    address tokenOut,\n    uint /*minAmountOut*/,\n    uint /*maxPrice*/\n  ) external override returns (uint tokenAmountOut, uint spotPriceAfter) {\n    require(hasToken[tokenIn] && hasToken[tokenOut], 'Unsupported token');\n    ERC20(tokenIn).transferFrom(msg.sender, address(this), tokenAmountIn);\n    ERC20(tokenOut).transfer(msg.sender, tokenAmountIn);\n    return (tokenAmountIn, 1);\n  }\n\n  function getSpotPrice(address /*tokenIn*/, address /*tokenOut*/) external view override returns (uint spotPrice) {\n    this;\n    return 1;\n  }\n\n  function joinswapExternAmountIn(\n    address tokenIn,\n    uint tokenAmountIn,\n    uint /*minPoolAmountOut*/\n  ) external override returns (uint poolAmountOut) {\n    require(hasToken[tokenIn]);\n    ERC20(tokenIn).transferFrom(msg.sender, address(this), tokenAmountIn);\n    _mint(msg.sender, tokenAmountIn);\n    poolAmountOut = tokenAmountIn;\n  }\n\n  function exitswapPoolAmountIn(\n    address tokenOut,\n    uint poolAmountIn,\n    uint /*minAmountOut*/\n  ) external override returns (uint tokenAmountOut) {\n    require(hasToken[tokenOut]);\n    _burn(msg.sender, poolAmountIn);\n    ERC20(tokenOut).transfer(msg.sender, poolAmountIn);\n    tokenAmountOut = poolAmountIn;\n  }\n}\n"
    },
    "contracts/protocols/balancer/BalancerPoolETHExitAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/introspection/IERC1820Registry.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../../farming/IFarmerToken.sol\";\nimport \"../../interfaces/IWETH.sol\";\nimport \"../../tokens/IWrapped777.sol\";\nimport \"../../Receiver.sol\";\nimport \"../../ReverseENS.sol\";\nimport \"./interfaces/BPool.sol\";\n\ncontract BalancerPoolETHExitAdapter is Receiver, ReverseENS {\n  using SafeMath for uint256;\n\n  IWETH public immutable weth;\n\n  IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n  constructor(IWETH _weth) public {\n    weth = _weth;\n  }\n\n  receive() external payable {\n    require(msg.sender == address(weth));\n  }\n\n  function _tokensReceived(IERC777 _token, address from, uint256 amount, bytes memory /*data*/) internal override {\n    IWrapped777 inputWrapper = IWrapped777(address(_token));\n    BPool pool = BPool(address(inputWrapper.token()));\n\n    address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(address(_token), keccak256(\"Farmer777\"));\n    if (implementer != address(0) /* token is FarmerToken */) {\n      farmRewards(IFarmerToken(address(_token)), from);\n    }\n\n    uint256 poolTokens = inputWrapper.unwrap(amount);\n\n    uint256 exitAmount = pool.exitswapPoolAmountIn(address(weth), poolTokens, 0);\n\n    weth.withdraw(exitAmount);\n    TransferHelper.safeTransferETH(from, exitAmount);\n  }\n\n  function farmRewards(IFarmerToken _token, address recipient) private {\n    address[] memory rewardWrappers = _token.rewardWrappers();\n\n    for (uint i = 0; i < rewardWrappers.length; i++) {\n      ERC20 rewardAdapter = ERC20(_token.getRewardAdapter(rewardWrappers[i]));\n      uint256 rewardBalance = rewardAdapter.balanceOf(address(this));\n      if (rewardBalance > 0) {\n        rewardAdapter.transfer(recipient, rewardBalance);\n      }\n    }\n  }\n}\n"
    },
    "contracts/protocols/aave/AaveAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../../Receiver.sol\";\nimport \"../../ReverseENS.sol\";\nimport \"../../InfiniteApprove.sol\";\nimport \"../../tokens/IWrapped777.sol\";\nimport \"../../interfaces/IWETH.sol\";\nimport \"./interfaces/ILendingPoolAddressesProvider.sol\";\nimport \"./interfaces/ILendingPool.sol\";\n\ncontract AaveAdapter is Receiver, InfiniteApprove, Ownable, ReverseENS {\n  ILendingPoolAddressesProvider public immutable addressProvider;\n\n  mapping(address => address) public wrappedATokenToWrapper;\n  mapping(address => address) public tokenToWrappedAToken;\n  IWETH public immutable weth;\n  uint16 constant private referralCode = 45;\n\n  constructor(address _addressProvider, IWETH _weth) public {\n    addressProvider = ILendingPoolAddressesProvider(_addressProvider);\n    weth = _weth;\n\n    // Needs to be explicitly set since we deploy through a Create2 proxy\n    transferOwnership(tx.origin);\n  }\n\n  receive() external payable {\n    if (msg.sender != address(weth)) {\n      weth.deposit{ value: msg.value }();\n\n      deposit(ERC20(address(weth)), msg.value, msg.sender);\n    }\n  }\n\n  function setWrappedAToken(address wrappedToken, address wrappedAToken) public onlyOwner {\n    wrappedATokenToWrapper[wrappedAToken] = wrappedToken;\n    if (wrappedToken == address(weth)) {\n      tokenToWrappedAToken[address(weth)] = wrappedAToken;\n    } else {\n      tokenToWrappedAToken[address(IWrapped777(wrappedToken).token())] = wrappedAToken;\n    }\n  }\n\n  function _tokensReceived(IERC777 token, address from, uint256 amount, bytes memory) internal override {\n    address outputWrapper = wrappedATokenToWrapper[address(token)];\n\n    if (outputWrapper == address(weth)) {\n      withdrawETH(address(token), from, amount);\n    } else if (outputWrapper != address(0)) {\n      withdraw(address(token), IWrapped777(outputWrapper), from, amount);\n    } else {\n      ERC20 unwrappedToken = IWrapped777(address(token)).token();\n      uint256 unwrappedAmount = IWrapped777(address(token)).unwrap(amount);\n      deposit(unwrappedToken, unwrappedAmount, from);\n    }\n  }\n\n  function deposit(ERC20 token, uint256 amount, address recipient) private {\n    ILendingPool _lendingPool = lendingPool();\n\n    address outputWrapper = tokenToWrappedAToken[address(token)];\n    require(outputWrapper != address(0), 'Unsupported');\n\n    infiniteApprove(token, address(_lendingPool), amount);\n    _lendingPool.deposit(address(token), amount, outputWrapper, referralCode);\n    IWrapped777(outputWrapper).gulp(recipient);\n  }\n\n  function withdraw(address token, IWrapped777 outputWrapper, address recipient, uint256 amount) private {\n    uint256 unwrappedAmount = IWrapped777(token).unwrap(amount);\n    lendingPool().withdraw(address(outputWrapper.token()), unwrappedAmount, address(outputWrapper));\n    outputWrapper.gulp(recipient);\n  }\n\n  function withdrawETH(address token, address recipient, uint256 amount) private {\n    uint256 unwrappedAmount = IWrapped777(token).unwrap(amount);\n    lendingPool().withdraw(address(weth), unwrappedAmount, address(this));\n\n    uint256 ethAmount = weth.balanceOf(address(this));\n    weth.withdraw(ethAmount);\n    TransferHelper.safeTransferETH(recipient, ethAmount);\n  }\n\n  function lendingPool() private view returns (ILendingPool) {\n    return ILendingPool(addressProvider.getLendingPool());\n  }\n}\n"
    },
    "contracts/protocols/aave/interfaces/ILendingPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.6.8;\n\n/**\n@title ILendingPoolAddressesProvider interface\n@notice provides the interface to fetch the Aave protocol address\n */\n\ninterface ILendingPoolAddressesProvider {\n  event LendingPoolUpdated(address indexed newAddress);\n  event ConfigurationAdminUpdated(address indexed newAddress);\n  event EmergencyAdminUpdated(address indexed newAddress);\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n  event EthereumAddressUpdated(address indexed newAddress);\n  event PriceOracleUpdated(address indexed newAddress);\n  event LendingRateOracleUpdated(address indexed newAddress);\n  event ProxyCreated(bytes32 id, address indexed newAddress);\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n\n  function setAddress(\n    bytes32 id,\n    address newAddress\n  ) external;\n\n  function setAddressAsProxy(\n    bytes32 id,\n    address impl\n  ) external;\n\n  function getAddress(bytes32 id) external view returns (address);\n\n  function getLendingPool() external view returns (address);\n\n  function setLendingPoolImpl(address pool) external;\n\n  function getLendingPoolConfigurator() external view returns (address);\n\n  function setLendingPoolConfiguratorImpl(address configurator) external;\n\n  function getLendingPoolCollateralManager() external view returns (address);\n\n  function setLendingPoolCollateralManager(address manager) external;\n\n  function getPoolAdmin() external view returns (address);\n\n  function setPoolAdmin(address admin) external;\n\n  function getEmergencyAdmin() external view returns (address);\n\n  function setEmergencyAdmin(address admin) external;\n\n  function getPriceOracle() external view returns (address);\n\n  function setPriceOracle(address priceOracle) external;\n\n  function getLendingRateOracle() external view returns (address);\n\n  function setLendingRateOracle(address lendingRateOracle) external;\n}\n"
    },
    "contracts/protocols/aave/interfaces/ILendingPool.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.6.8;\n\npragma experimental ABIEncoderV2;\n\ninterface ILendingPool {\n  /**\n   * @dev emitted on deposit\n   * @param reserve the address of the reserve\n   * @param user the address of the user\n   * @param amount the amount to be deposited\n   * @param referral the referral number of the action\n   **/\n  event Deposit(\n    address indexed reserve,\n    address user,\n    address indexed onBehalfOf,\n    uint256 amount,\n    uint16 indexed referral\n  );\n\n  /**\n   * @dev emitted during a withdraw action.\n   * @param reserve the address of the reserve\n   * @param user the address of the user\n   * @param to address that will receive the underlying\n   * @param amount the amount to be withdrawn\n   **/\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n\n  /**\n   * @dev emitted on borrow\n   * @param reserve the address of the reserve\n   * @param user the address of the user\n   * @param amount the amount to be deposited\n   * @param borrowRateMode the rate mode, can be either 1-stable or 2-variable\n   * @param borrowRate the rate at which the user has borrowed\n   * @param referral the referral number of the action\n   **/\n  event Borrow(\n    address indexed reserve,\n    address user,\n    address indexed onBehalfOf,\n    uint256 amount,\n    uint256 borrowRateMode,\n    uint256 borrowRate,\n    uint16 indexed referral\n  );\n  /**\n   * @dev emitted on repay\n   * @param reserve the address of the reserve\n   * @param user the address of the user for which the repay has been executed\n   * @param repayer the address of the user that has performed the repay action\n   * @param amount the amount repaid\n   **/\n  event Repay(\n    address indexed reserve,\n    address indexed user,\n    address indexed repayer,\n    uint256 amount\n  );\n  /**\n   * @dev emitted when a user performs a rate swap\n   * @param reserve the address of the reserve\n   * @param user the address of the user executing the swap\n   **/\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\n\n  /**\n   * @dev emitted when a user enables a reserve as collateral\n   * @param reserve the address of the reserve\n   * @param user the address of the user\n   **/\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n  /**\n   * @dev emitted when a user disables a reserve as collateral\n   * @param reserve the address of the reserve\n   * @param user the address of the user\n   **/\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n\n  /**\n   * @dev emitted when the stable rate of a user gets rebalanced\n   * @param reserve the address of the reserve\n   * @param user the address of the user for which the rebalance has been executed\n   **/\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n  /**\n   * @dev emitted when a flashloan is executed\n   * @param target the address of the flashLoanReceiver\n   * @param initiator the address initiating the flash loan\n   * @param asset the address of the asset being flashborrowed\n   * @param amount the amount requested\n   * @param premium the total fee on the amount\n   * @param referralCode the referral code of the caller\n   **/\n  event FlashLoan(\n    address indexed target,\n    address indexed initiator,\n    address indexed asset,\n    uint256 amount,\n    uint256 premium,\n    uint16 referralCode\n  );\n\n  /**\n   * @dev Emitted when the pause is triggered.\n   */\n  event Paused();\n\n  /**\n   * @dev Emitted when the pause is lifted.\n   */\n  event Unpaused();\n\n  /**\n   * @dev emitted when a borrower is liquidated. Thos evemt is emitted directly by the LendingPool\n   * but it's declared here as the LendingPoolCollateralManager\n   * is executed using a delegateCall().\n   * This allows to have the events in the generated ABI for LendingPool.\n   * @param collateral the address of the collateral being liquidated\n   * @param principal the address of the reserve\n   * @param user the address of the user being liquidated\n   * @param purchaseAmount the total amount liquidated\n   * @param liquidatedCollateralAmount the amount of collateral being liquidated\n   * @param liquidator the address of the liquidator\n   * @param receiveAToken true if the liquidator wants to receive aTokens, false otherwise\n   **/\n  event LiquidationCall(\n    address indexed collateral,\n    address indexed principal,\n    address indexed user,\n    uint256 purchaseAmount,\n    uint256 liquidatedCollateralAmount,\n    address liquidator,\n    bool receiveAToken\n  );\n\n  /**\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\n   * gets added to the LendingPool ABI\n   * @param reserve the address of the reserve\n   * @param liquidityRate the new liquidity rate\n   * @param stableBorrowRate the new stable borrow rate\n   * @param variableBorrowRate the new variable borrow rate\n   * @param liquidityIndex the new liquidity index\n   * @param variableBorrowIndex the new variable borrow index\n   **/\n  event ReserveDataUpdated(\n    address indexed reserve,\n    uint256 liquidityRate,\n    uint256 stableBorrowRate,\n    uint256 variableBorrowRate,\n    uint256 liquidityIndex,\n    uint256 variableBorrowIndex\n  );\n\n  /**\n   * @dev deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens)\n   * is minted.\n   * @param reserve the address of the reserve\n   * @param amount the amount to be deposited\n   * @param referralCode integrators are assigned a referral code and can potentially receive rewards.\n   **/\n  function deposit(\n    address reserve,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @dev withdraws the assets of user.\n   * @param reserve the address of the reserve\n   * @param amount the underlying amount to be redeemed\n   * @param to address that will receive the underlying\n   **/\n  function withdraw(\n    address reserve,\n    uint256 amount,\n    address to\n  ) external;\n\n  /**\n   * @dev Allows users to borrow a specific amount of the reserve currency, provided that the borrower\n   * already deposited enough collateral.\n   * @param reserve the address of the reserve\n   * @param amount the amount to be borrowed\n   * @param interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)\n   **/\n  function borrow(\n    address reserve,\n    uint256 amount,\n    uint256 interestRateMode,\n    uint16 referralCode,\n    address onBehalfOf\n  ) external;\n\n  /**\n   * @notice repays a borrow on the specific reserve, for the specified amount (or for the whole amount, if uint256(-1) is specified).\n   * @dev the target user is defined by onBehalfOf. If there is no repayment on behalf of another account,\n   * onBehalfOf must be equal to msg.sender.\n   * @param reserve the address of the reserve on which the user borrowed\n   * @param amount the amount to repay, or uint256(-1) if the user wants to repay everything\n   * @param onBehalfOf the address for which msg.sender is repaying.\n   **/\n  function repay(\n    address reserve,\n    uint256 amount,\n    uint256 rateMode,\n    address onBehalfOf\n  ) external;\n\n  /**\n   * @dev borrowers can user this function to swap between stable and variable borrow rate modes.\n   * @param reserve the address of the reserve on which the user borrowed\n   * @param rateMode the rate mode that the user wants to swap\n   **/\n  function swapBorrowRateMode(address reserve, uint256 rateMode) external;\n\n  /**\n   * @dev rebalances the stable interest rate of a user if current liquidity rate > user stable rate.\n   * this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair\n   * rate. Anyone can call this function.\n   * @param reserve the address of the reserve\n   * @param user the address of the user to be rebalanced\n   **/\n  function rebalanceStableBorrowRate(address reserve, address user) external;\n\n  /**\n   * @dev allows depositors to enable or disable a specific deposit as collateral.\n   * @param reserve the address of the reserve\n   * @param useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.\n   **/\n  function setUserUseReserveAsCollateral(address reserve, bool useAsCollateral) external;\n\n  /**\n   * @dev users can invoke this function to liquidate an undercollateralized position.\n   * @param reserve the address of the collateral to liquidated\n   * @param reserve the address of the principal reserve\n   * @param user the address of the borrower\n   * @param purchaseAmount the amount of principal that the liquidator wants to repay\n   * @param receiveAToken true if the liquidators wants to receive the aTokens, false if\n   * he wants to receive the underlying asset directly\n   **/\n  function liquidationCall(\n    address collateral,\n    address reserve,\n    address user,\n    uint256 purchaseAmount,\n    bool receiveAToken\n  ) external;\n\n  /**\n   * @dev allows smartcontracts to access the liquidity of the pool within one transaction,\n   * as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts\n   * that must be kept into consideration. For further details please visit https://developers.aave.com\n   * @param receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.\n   * @param assets the address of the principal reserve\n   * @param amounts the amount requested for this flashloan\n   * @param modes the flashloan borrow modes\n   * @param params a bytes array to be sent to the flashloan executor\n   * @param referralCode the referral code of the caller\n   **/\n  function flashLoan(\n    address receiver,\n    address[] calldata assets,\n    uint256[] calldata amounts,\n    uint256[] calldata modes,\n    address onBehalfOf,\n    bytes calldata params,\n    uint16 referralCode\n  ) external;\n\n  function getUserAccountData(address user)\n    external\n    view\n    returns (\n      uint256 totalCollateralETH,\n      uint256 totalBorrowsETH,\n      uint256 availableBorrowsETH,\n      uint256 currentLiquidationThreshold,\n      uint256 ltv,\n      uint256 healthFactor\n    );\n\n  /**\n   * @dev initializes a reserve\n   * @param reserve the address of the reserve\n   * @param aTokenAddress the address of the overlying aToken contract\n   * @param interestRateStrategyAddress the address of the interest rate strategy contract\n   **/\n  function initReserve(\n    address reserve,\n    address aTokenAddress,\n    address stableDebtAddress,\n    address variableDebtAddress,\n    address interestRateStrategyAddress\n  ) external;\n\n  /**\n   * @dev updates the address of the interest rate strategy contract\n   * @param reserve the address of the reserve\n   * @param rateStrategyAddress the address of the interest rate strategy contract\n   **/\n\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\n    external;\n\n  function setConfiguration(address reserve, uint256 configuration) external;\n\n  // function getConfiguration(address reserve)\n  //   external\n  //   view\n  //   returns (ReserveConfiguration.Map memory);\n\n  // function getUserConfiguration(address user) external view returns (UserConfiguration.Map memory);\n\n  function getReserveNormalizedIncome(address reserve) external view returns (uint256);\n\n  function getReserveNormalizedVariableDebt(address reserve) external view returns (uint256);\n\n  // function getReserveData(address asset) external view returns (ReserveLogic.ReserveData memory);\n\n  function finalizeTransfer(\n    address asset,\n    address from,\n    address to,\n    uint256 amount,\n    uint256 balanceFromAfter,\n    uint256 balanceToBefore\n  ) external;\n\n  function getReservesList() external view returns (address[] memory);\n\n  function getAddressesProvider() external view returns (address);\n\n  /**\n   * @dev Set the _pause state\n   * @param val the boolean value to set the current pause state of LendingPool\n   */\n  function setPause(bool val) external;\n\n  /**\n   * @dev Returns if the LendingPool is paused\n   */\n  function paused() external view returns (bool);\n}\n"
    },
    "contracts/farming/YieldAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.5 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/GSN/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/introspection/IERC1820Registry.sol\";\nimport \"@uniswap/lib/contracts/libraries/SafeERC20Namer.sol\";\nimport \"../interfaces/IERC3126.sol\";\nimport \"../tokens/Granularity.sol\";\nimport \"../tokens/IWrapped777.sol\";\nimport \"./IFarmerToken.sol\";\nimport \"./IYieldAdapterFactory.sol\";\n\ncontract YieldAdapter is Context, IERC777, IERC20, Granularity, IERC3126 {\n  using SafeMath for uint256;\n  using Address for address;\n\n  IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n  IFarmerToken public immutable farmer;\n  address public immutable token;\n  IWrapped777 public immutable wrapper;\n\n  string internal _name;\n  string internal _symbol;\n\n  mapping(address => mapping(address => bool)) private _operators;\n\n  // ERC20-allowances\n  mapping (address => mapping (address => uint256)) private _allowances;\n\n\n  // keccak256(\"ERC777TokensRecipient\")\n  bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n\n  constructor() public {\n    IYieldAdapterFactory factory = IYieldAdapterFactory(msg.sender);\n    farmer = IFarmerToken(factory.nextToken());\n    IWrapped777 _wrapper = IWrapped777(factory.nextReward());\n    ERC20 _token = _wrapper.token();\n    token = address(_token);\n    wrapper = _wrapper;\n\n    _name = string(abi.encodePacked(SafeERC20Namer.tokenName(address(_token)), \"-777 Yield\"));\n    _symbol = string(abi.encodePacked(SafeERC20Namer.tokenSymbol(address(_token)), \"777y\"));\n\n    setDecimals(_token.decimals());\n\n    // register interfaces\n    _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n    _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n  }\n\n  /**\n   * @dev See {IERC777-name}.\n   */\n  function name() public view override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {IERC777-symbol}.\n   */\n  function symbol() public view override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev See {ERC20-decimals}.\n   *\n   * Always returns 18, as per the\n   * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\n   */\n  function decimals() public pure returns (uint8) {\n    return 18;\n  }\n\n  /**\n   * @dev See {IERC777-granularity}.\n   *\n   * This implementation always returns `1`.\n   */\n  function granularity() public view override returns (uint256) {\n    return getGranularity();\n  }\n\n  /**\n   * @dev See {IERC777-totalSupply}.\n   */\n  function totalSupply() public view override(IERC20, IERC777) virtual returns (uint256) {\n    return from20to777(IERC20(token).balanceOf(address(farmer)));\n  }\n\n  function balanceOf(address account) external view override(IERC20, IERC777) virtual returns (uint256) {\n    return from20to777(farmer.rewardBalance(token, account));\n  }\n\n  function underlyingTokens() external view override returns (address[] memory) {\n    address[] memory tokens = new address[](1);\n    tokens[0] = address(token);\n    return tokens;\n  }\n\n  function balanceOfUnderlying(address _user, address _token) external view override returns (uint256) {\n    return _token == address(token) ? farmer.rewardBalance(_token, _user) : 0;\n  }\n\n  /**\n   * @dev See {IERC777-send}.\n   *\n   * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n   */\n  function send(address recipient, uint256 amount, bytes memory data) public override  {\n    _send(_msgSender(), recipient, amount, data, \"\", true);\n  }\n\n  /**\n   * @dev See {IERC20-transfer}.\n   *\n   * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\n   * interface if it is a contract.\n   *\n   * Also emits a {Sent} event.\n   */\n  function transfer(address recipient, uint256 amount) public override returns (bool) {\n    require(recipient != address(0), \"ERC777: transfer to the zero address\");\n\n    address from = _msgSender();\n\n    _move(from, from, recipient, amount, \"\", \"\");\n\n    return true;\n  }\n\n  /**\n   * @dev See {IERC777-burn}.\n   *\n   * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n   */\n  function burn(uint256, bytes memory) public override {\n    revert(\"Not supported\");\n  }\n\n  /**\n   * @dev See {IERC777-isOperatorFor}.\n   */\n  function isOperatorFor(\n    address operator,\n    address tokenHolder\n  ) public view override returns (bool) {\n    return operator == tokenHolder ||\n      _operators[tokenHolder][operator];\n  }\n\n  /**\n   * @dev See {IERC777-authorizeOperator}.\n   */\n  function authorizeOperator(address operator) public override  {\n    require(_msgSender() != operator, \"ERC777: authorizing self as operator\");\n    _operators[_msgSender()][operator] = true;\n\n    emit AuthorizedOperator(operator, _msgSender());\n  }\n\n  /**\n   * @dev See {IERC777-revokeOperator}.\n   */\n  function revokeOperator(address operator) public override  {\n    require(operator != _msgSender(), \"ERC777: revoking self as operator\");\n    delete _operators[_msgSender()][operator];\n\n    emit RevokedOperator(operator, _msgSender());\n  }\n\n  /**\n   * @dev See {IERC777-defaultOperators}.\n   */\n  function defaultOperators() public view override returns (address[] memory) {}\n\n  /**\n   * @dev See {IERC777-operatorSend}.\n   *\n   * Emits {Sent} and {IERC20-Transfer} events.\n   */\n  function operatorSend(\n      address sender,\n      address recipient,\n      uint256 amount,\n      bytes memory data,\n      bytes memory operatorData\n  ) public override {\n    require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n    _send(sender, recipient, amount, data, operatorData, true);\n  }\n\n  /**\n   * @dev See {IERC777-operatorBurn}.\n   *\n   * Emits {Burned} and {IERC20-Transfer} events.\n   */\n  function operatorBurn(address, uint256, bytes memory, bytes memory) public override {\n    revert(\"Not supported\");\n  }\n\n  /**\n   * @dev See {IERC20-allowance}.\n   *\n   * Note that operator and allowance concepts are orthogonal: operators may\n   * not have allowance, and accounts with allowance may not be operators\n   * themselves.\n   */\n  function allowance(address holder, address spender) public view override returns (uint256) {\n    return _allowances[holder][spender];\n  }\n\n  /**\n   * @dev See {IERC20-approve}.\n   *\n   * Note that accounts cannot have allowance issued by their operators.\n   */\n  function approve(address spender, uint256 value) public override returns (bool) {\n    address holder = _msgSender();\n    _approve(holder, spender, value);\n    return true;\n  }\n\n /**\n  * @dev See {IERC20-transferFrom}.\n  *\n  * Note that operator and allowance concepts are orthogonal: operators cannot\n  * call `transferFrom` (unless they have allowance), and accounts with\n  * allowance cannot call `operatorSend` (unless they are operators).\n  *\n  * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\n  */\n  function transferFrom(address holder, address recipient, uint256 amount) public override returns (bool) {\n    require(recipient != address(0), \"ERC777: transfer to the zero address\");\n    require(holder != address(0), \"ERC777: transfer from the zero address\");\n\n    address spender = _msgSender();\n\n    _move(spender, holder, recipient, amount, \"\", \"\");\n    _approve(holder, spender, _allowances[holder][spender].sub(amount, \"ERC777: transfer amount exceeds allowance\"));\n\n    return true;\n  }\n\n  /**\n   * @dev Send tokens\n   * @param from address token holder address\n   * @param to address recipient address\n   * @param amount uint256 amount of tokens to transfer\n   * @param userData bytes extra information provided by the token holder (if any)\n   * @param operatorData bytes extra information provided by the operator (if any)\n   */\n  function _send(\n    address from,\n    address to,\n    uint256 amount,\n    bytes memory userData,\n    bytes memory operatorData,\n    bool /*requireReceptionAck*/\n  ) internal {\n    require(from != address(0), \"ERC777: send from the zero address\");\n    require(to != address(0), \"ERC777: send to the zero address\");\n\n    address operator = _msgSender();\n\n    _move(operator, from, to, amount, userData, operatorData);\n  }\n\n  function _move(\n    address operator,\n    address from,\n    address to,\n    uint256 amount,\n    bytes memory userData,\n    bytes memory operatorData\n  ) internal virtual {\n    require(amount % getGranularity() == 0, \"ERC777: Invalid granularity\");\n\n    uint256 adjustedAmount = from777to20(amount);\n    farmer.withdrawFrom(token, from, address(wrapper), adjustedAmount);\n\n    uint wrappedAmount = wrapper.gulp(to);\n    require(wrappedAmount >= amount);\n\n    emit Sent(operator, from, to, amount, userData, operatorData);\n    emit Transfer(from, to, amount);\n  }\n\n  function _approve(address holder, address spender, uint256 value) internal {\n    // TODO: restore this require statement if this function becomes internal, or is called at a new callsite. It is\n    // currently unnecessary.\n    //require(holder != address(0), \"ERC777: approve from the zero address\");\n    require(spender != address(0), \"ERC777: approve to the zero address\");\n\n    _allowances[holder][spender] = value;\n    emit Approval(holder, spender, value);\n  }\n}\n"
    },
    "contracts/farming/IYieldAdapterFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\ninterface IYieldAdapterFactory {\n  function nextToken() external view returns (address);\n  function nextReward() external view returns (address);\n\n  function calculateWrapperAddress(address farmerToken, address rewardToken) external view returns (address calculatedAddress);\n  function createWrapper(address farmerToken, address rewardToken) external;\n  function getWrapperAddress(address farmerToken, address rewardToken) external returns (address wrapperAddress);\n}\n"
    },
    "contracts/farming/YieldAdapterFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./YieldAdapter.sol\";\nimport \"./IYieldAdapterFactory.sol\";\n\n\ncontract YieldAdapterFactory is IYieldAdapterFactory {\n  using Address for address;\n\n  address private _nextToken;\n  address private _nextReward;\n\n  bytes32 public constant ADAPTER_HASH = keccak256(type(YieldAdapter).creationCode);\n\n  event WrapperCreated(address farmerToken, address rewardWrapper);\n\n  function calculateWrapperAddress(address farmerToken, address rewardWrapper) external view override returns (address calculatedAddress) {\n    calculatedAddress = _calculateWrapperAddress(farmerToken, rewardWrapper);\n  }\n\n  function _calculateWrapperAddress(address farmerToken, address rewardWrapper) private view returns (address calculatedAddress) {\n    calculatedAddress = address(uint(keccak256(abi.encodePacked(\n      byte(0xff),\n      address(this),\n      keccak256(abi.encodePacked(farmerToken, rewardWrapper)),\n      ADAPTER_HASH\n    ))));\n  }\n\n  function createWrapper(address farmerToken, address rewardWrapper) external override {\n    _createWrapper(farmerToken, rewardWrapper);\n  }\n\n  function _createWrapper(address farmerToken, address rewardWrapper) private {\n    _nextToken = farmerToken;\n    _nextReward = rewardWrapper;\n    new YieldAdapter{salt: keccak256(abi.encodePacked(farmerToken, rewardWrapper))}();\n    _nextToken = address(0);\n    _nextReward = address(0);\n\n    emit WrapperCreated(farmerToken, rewardWrapper);\n  }\n\n  function getWrapperAddress(address farmerToken, address rewardWrapper) external override returns (address wrapperAddress) {\n    wrapperAddress = _calculateWrapperAddress(farmerToken, rewardWrapper);\n\n    if(!wrapperAddress.isContract()) {\n      _createWrapper(farmerToken, rewardWrapper);\n      assert(wrapperAddress.isContract());\n    }\n  }\n\n  function nextToken() external override view returns (address) {\n    return _nextToken;\n  }\n\n  function nextReward() external override view returns (address) {\n    return _nextReward;\n  }\n}\n"
    },
    "contracts/farming/FarmerToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.5 <0.7.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../tokens/AddressBook.sol\";\nimport \"../tokens/Wrapped777.sol\";\nimport \"./IFarmerToken.sol\";\nimport \"./IFarmerTokenFactory.sol\";\nimport \"./IYieldAdapterFactory.sol\";\n\ncontract FarmerToken is Wrapped777, IFarmerToken {\n  using SafeMath for uint256;\n  using SignedSafeMath for int256;\n\n  uint256 private constant SCALE = uint256(10) ** 8;\n\n  address[] private _rewardTokens;\n  address[] private _rewardWrappers;\n  mapping(address => uint256) private scaledRewardPerToken;\n  mapping(address => uint256) private scaledRemainder;\n  mapping(address => uint256) private totalRewardBalance;\n\n  mapping(address => mapping(address => int256)) private rewardOffset;\n\n  IYieldAdapterFactory private immutable adapterFactory;\n\n  constructor() public {\n    address yieldAdapterFactory;\n    address[] memory rewardWrappers;\n    (yieldAdapterFactory, rewardWrappers) = IFarmerTokenFactory(msg.sender).yieldAdapterFactoryAndRewards();\n\n    IYieldAdapterFactory _adapterFactory = IYieldAdapterFactory(yieldAdapterFactory);\n    adapterFactory = _adapterFactory;\n\n    address[] memory tmpRewardTokens = new address[](rewardWrappers.length);\n    for (uint8 i = 0; i < rewardWrappers.length; i++) {\n      address wrapper = rewardWrappers[i];\n      address token = address(Wrapped777(wrapper).token());\n      tmpRewardTokens[i] = token;\n\n      _adapterFactory.createWrapper(address(this), rewardWrappers[i]);\n    }\n\n    _rewardTokens = tmpRewardTokens;\n    _rewardWrappers = rewardWrappers;\n\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"Farmer777\"), address(this));\n  }\n\n  /**\n   * @return List of ERC20 token addresses handled by the contract\n   */\n  function rewardTokens() external view override returns (address[] memory) {\n    return _rewardTokens;\n  }\n\n  function underlyingTokens() external view override returns (address[] memory) {\n    address[] memory tokens = new address[](_rewardTokens.length + 1);\n    tokens[0] = address(token);\n    for (uint8 i = 0; i < _rewardTokens.length; i++) {\n      tokens[i + 1] = _rewardTokens[i];\n    }\n    return tokens;\n  }\n\n  function balanceOfUnderlying(address _user, address _token) external view override returns (uint256) {\n    return _token == address(token)\n      ? from777to20(ERC777WithGranularity.balanceOf(_user))\n      : scaledRewardBalance(_token, _user).div(SCALE);\n  }\n\n  /**\n   * @return List of ERC777 wrappers for the reward tokens\n   */\n  function rewardWrappers() external view override returns (address[] memory) {\n    return _rewardWrappers;\n  }\n\n  function getRewardAdapter(address rewardWrapper) external view override returns (address) {\n    return adapterFactory.calculateWrapperAddress(address(this), rewardWrapper);\n  }\n\n  function _mint(\n    address account,\n    uint256 amount,\n    bytes memory userData,\n    bytes memory operatorData\n  ) internal override {\n    preMint(amount);\n\n    ERC777WithGranularity._mint(account, amount, userData, operatorData);\n\n    for (uint i = 0; i < _rewardTokens.length; i++) {\n      address token = _rewardTokens[i];\n      int256 baseOffset = int256(amount.mul(scaledRewardPerToken[token]));\n      rewardOffset[token][account] = rewardOffset[token][account].add(baseOffset);\n    }\n  }\n\n  /**\n   * @dev Read the balance of a reward token and credit all token holders' reward balance.\n   *\n   * @param token Address of an ERC20 reward token contract\n   */\n  function harvest(address token) public {\n    uint256 newTotal = IERC20(token).balanceOf(address(this));\n    uint256 harvestedTokens = newTotal - totalRewardBalance[token];\n    totalRewardBalance[token] = newTotal;\n\n    uint256 scaledReward = harvestedTokens.mul(SCALE).add(scaledRemainder[token]);\n\n    uint256 supply = totalSupply();\n    scaledRewardPerToken[token] = scaledRewardPerToken[token].add(scaledReward.div(supply));\n    scaledRemainder[token] = scaledReward.mod(supply);\n  }\n\n  /**\n   * @dev Unclaimed balance of a reward token, allocated to a token holder\n   *\n   * @param token Address of an ERC20 reward token contract\n   * @param user Token holder\n   */\n  function rewardBalance(address token, address user) external view override returns (uint256) {\n    return scaledRewardBalance(token, user).div(SCALE);\n  }\n\n  function scaledRewardBalance(address token, address user) private view returns (uint256) {\n    return uint256(int256(scaledRewardPerToken[token].mul(balanceOf(user))).sub(rewardOffset[token][user]));\n  }\n\n  function _move(\n    address operator,\n    address from,\n    address to,\n    uint256 amount,\n    bytes memory userData,\n    bytes memory operatorData\n  ) internal override {\n    uint256 startBalance = balanceOf(from);\n\n    for (uint i = 0; i < _rewardTokens.length; i++) {\n      address token = _rewardTokens[i];\n\n      int256 scaledRewardToTransfer = int256(scaledRewardBalance(token, from).mul(amount).div(startBalance));\n      int256 offset = scaledRewardToTransfer.sub(int256(amount.mul(scaledRewardPerToken[token])));\n\n      rewardOffset[token][from] = rewardOffset[token][from].add(offset);\n      rewardOffset[token][to] = rewardOffset[token][to].sub(offset);\n    }\n\n    ERC777WithGranularity._move(operator, from, to, amount, userData, operatorData);\n  }\n\n  /**\n   * @dev Withdraws reward tokens allocated to a token holder\n   *\n   * @param token Address of an ERC20 reward token contract\n   * @param amount Amount of tokens to withdraw\n   */\n  function withdraw(address token, uint amount) external {\n    _withdraw(token, msg.sender, msg.sender, amount);\n  }\n\n  /**\n   * @dev Allows a yieldAdapter to withdraw tokens on a user's behalf\n   */\n  function withdrawFrom(address token, address from, address wrapper, uint256 amount) external override {\n    require(msg.sender == adapterFactory.calculateWrapperAddress(address(this), wrapper));\n    _withdraw(token, from, wrapper, amount);\n  }\n\n  function _withdraw(address token, address from, address to, uint amount) private {\n    uint256 scaledAmount = amount.mul(SCALE);\n    require(scaledAmount <= scaledRewardBalance(token, from)/*, \"Insuficent reward\"*/);\n\n    rewardOffset[token][from] = rewardOffset[token][from].add(int256(scaledAmount));\n\n    totalRewardBalance[token] = totalRewardBalance[token].sub(amount);\n\n    IERC20(token).transfer(to, amount);\n  }\n\n  function _burn(\n    address from,\n    uint256 amount,\n    bytes memory data,\n    bytes memory operatorData\n  ) internal override {\n    preBurn(amount);\n\n    uint256 startingBalance = balanceOf(from);\n    uint256 newSupply = totalSupply() - amount;\n\n    for (uint i = 0; i < _rewardTokens.length; i++) {\n      address token = _rewardTokens[i];\n\n      if (newSupply > 0) {\n        uint rewardToRedistribute = scaledRewardBalance(token, from).mul(amount).div(startingBalance);\n        scaledRewardPerToken[token] = scaledRewardPerToken[token].add(rewardToRedistribute.div(newSupply));\n      } else {\n        scaledRewardPerToken[token] = 0;\n        totalRewardBalance[token] = 0;\n      }\n    }\n\n    ERC777WithGranularity._burn(from, amount, data, operatorData);\n  }\n\n  function preMint(uint256 amount) internal virtual {}\n\n  function preBurn(uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/math/SignedSafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 constant private _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n"
    },
    "contracts/tokens/AddressBook.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./IAddressBook.sol\";\n\ncontract AddressBook is Ownable, IAddressBook {\n  IAddressBook public defaultFactory;\n\n  mapping(address => address) public entries;\n\n  event EntrySet(address token, address wrapper);\n  event DefaultFactorySet(address factory);\n\n  constructor(IAddressBook _defaultFactory) public {\n    defaultFactory = _defaultFactory;\n    emit DefaultFactorySet(address(defaultFactory));\n  }\n\n  function calculateWrapperAddress(address token) external view override returns (address calculatedAddress) {\n    if (entries[token] != address(0)) {\n      return entries[token];\n    }\n\n    return defaultFactory.calculateWrapperAddress(token);\n  }\n\n  function getWrapperAddress(address token) external override returns (address wrapperAddress) {\n    if (entries[token] != address(0)) {\n      return entries[token];\n    }\n\n    return defaultFactory.getWrapperAddress(token);\n  }\n\n  function setEntry(address token, address wrapper) external onlyOwner {\n    entries[token] = wrapper;\n    emit EntrySet(token, wrapper);\n  }\n\n  function setDefaultFactory(address newFactory) external onlyOwner {\n    defaultFactory = IAddressBook(newFactory);\n    emit DefaultFactorySet(newFactory);\n  }\n}\n"
    },
    "contracts/farming/IFarmerTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\ninterface IFarmerTokenFactory {\n  function nextToken() external view returns (address);\n  function yieldAdapterFactoryAndRewards() external view returns(address, address[] memory);\n}\n"
    },
    "contracts/tokens/IAddressBook.sol": {
      "content": "pragma solidity >=0.6.2 <0.7.0;\n\ninterface IAddressBook {\n  function getWrapperAddress(address token) external returns (address wrapperAddress);\n\n  function calculateWrapperAddress(address token) external view returns (address calculatedAddress);\n}\n"
    },
    "contracts/protocols/curve/CRVFarmerToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../../farming/FarmerToken.sol\";\nimport \"../../Receiver.sol\";\nimport \"./interfaces/ICurveGague.sol\";\nimport \"./interfaces/ICurveMinter.sol\";\nimport \"./ICRVFarmerFactory.sol\";\n\ncontract CRVFarmerToken is FarmerToken {\n  ICurveGague private immutable gague;\n\n  constructor() public {\n    gague = ICurveGague(ICRVFarmerFactory(msg.sender).nextGague());\n  }\n\n  function preMint(uint256 amount) internal override {\n    if (token.allowance(address(this), address(gague)) < amount) {\n      token.approve(address(gague), uint(-1));\n    }\n\n    gague.deposit(amount);\n  }\n\n  function preBurn(uint256 amount) internal override {\n    gague.withdraw(amount);\n  }\n\n  function farm(ICurveMinter minter) external {\n    minter.mint(address(gague));\n    harvest(minter.token());\n  }\n}\n"
    },
    "contracts/protocols/curve/interfaces/ICurveGague.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\ninterface ICurveGague {\n  function deposit(uint256 amount) external;\n\n  function withdraw(uint256 amount) external;\n}\n"
    },
    "contracts/protocols/curve/interfaces/ICurveMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\ninterface ICurveMinter {\n  function token() external view returns (address);\n\n  function mint(address gague) external;\n}\n"
    },
    "contracts/protocols/curve/ICRVFarmerFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\ninterface ICRVFarmerFactory {\n  function nextToken() external view returns (address);\n  function nextGague() external view returns (address);\n  function yieldAdapterFactoryAndRewards() external view returns(address, address[] memory);\n}\n"
    },
    "contracts/protocols/curve/CRVFarmerTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./CRVFarmerToken.sol\";\nimport \"./ICRVFarmerFactory.sol\";\n\n\ncontract CRVFarmerTokenFactory is ICRVFarmerFactory {\n  using Address for address;\n\n  address private _nextToken;\n  address private _nextGague;\n  address private immutable _crvWrapper;\n  address private immutable _adapterFactory;\n\n  bytes32 public constant WRAPPER_BYTECODE_HASH = keccak256(type(CRVFarmerToken).creationCode);\n\n  event WrapperCreated(address indexed token, address gague);\n\n  constructor(address crvWrapper, address __adapterFactory) public {\n    _crvWrapper = crvWrapper;\n    _adapterFactory = __adapterFactory;\n  }\n\n  function calculateWrapperAddress(address token, address gague) public view returns (address calculatedAddress) {\n    calculatedAddress = address(uint(keccak256(abi.encodePacked(\n      byte(0xff),\n      address(this),\n      keccak256(abi.encodePacked(token, gague)),\n      WRAPPER_BYTECODE_HASH\n    ))));\n  }\n\n  function createWrapper(address token, address gague) public {\n    _nextToken = token;\n    _nextGague = gague;\n\n    new CRVFarmerToken{salt: keccak256(abi.encodePacked(token, gague))}();\n\n    _nextToken = address(0);\n    _nextGague = address(0);\n\n    emit WrapperCreated(token, gague);\n  }\n\n  function getWrapperAddress(address token, address gague) public returns (address wrapperAddress) {\n    wrapperAddress = calculateWrapperAddress(token, gague);\n\n    if(!wrapperAddress.isContract()) {\n      createWrapper(token, gague);\n      assert(wrapperAddress.isContract());\n    }\n  }\n\n  function nextToken() external override view returns (address) {\n    return _nextToken;\n  }\n\n  function nextGague() external override view returns (address) {\n    return _nextGague;\n  }\n\n  function yieldAdapterFactoryAndRewards() external override view returns(address, address[] memory) {\n    address[] memory _rewards = new address[](1);\n    _rewards[0] = _crvWrapper;\n    return (_adapterFactory, _rewards);\n  }\n}\n"
    },
    "contracts/protocols/curve/test/TestCurveMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"../../../test/TestERC20.sol\";\nimport \"../interfaces/ICurveMinter.sol\";\nimport \"./TestCurveGague.sol\";\n\ncontract TestCurveMinter is ICurveMinter {\n  TestERC20 private _token;\n\n  constructor() public {\n    _token = new TestERC20();\n  }\n\n  function mint(address gague) external override {\n    _token.transfer(msg.sender, TestCurveGague(gague).balance(msg.sender));\n  }\n\n  function token() external override view returns (address) {\n    return address(_token);\n  }\n}\n"
    },
    "contracts/test/TestERC20.sol": {
      "content": "pragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestERC20 is ERC20 {\n  constructor() public ERC20(\"Test\", \"TST\") {\n    _mint(msg.sender, 10000 ether);\n  }\n}\n"
    },
    "contracts/protocols/curve/test/TestCurveGague.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/ICurveGague.sol\";\n\ncontract TestCurveGague is ICurveGague {\n  address public poolToken;\n\n  mapping(address => uint256) public balance;\n\n  constructor(address _poolToken) public {\n    poolToken = _poolToken;\n  }\n\n  function deposit(uint256 amount) external override {\n    balance[msg.sender] += amount;\n    IERC20(poolToken).transferFrom(msg.sender, address(this), amount);\n  }\n\n  function withdraw(uint256 amount) external override {\n    balance[msg.sender] -= amount;\n    IERC20(poolToken).transfer(msg.sender, amount);\n  }\n}\n"
    },
    "contracts/farming/FarmerTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./FarmerToken.sol\";\nimport \"./IFarmerTokenFactory.sol\";\n\n\ncontract FarmerTokenFactory is IFarmerTokenFactory {\n  using Address for address;\n\n  address private _nextToken;\n  address[] private _rewards;\n  address private immutable _adapterFactory;\n\n  bytes32 public constant WRAPPER_BYTECODE_HASH = keccak256(type(FarmerToken).creationCode);\n\n  event WrapperCreated(address indexed token, address wrapper);\n\n  constructor(address __adapterFactory) public {\n    _adapterFactory = __adapterFactory;\n  }\n\n  function calculateWrapperAddress(address token, address[] memory rewards)\n    public view returns (address calculatedAddress) {\n    calculatedAddress = address(uint(keccak256(abi.encodePacked(\n      byte(0xff),\n      address(this),\n      keccak256(abi.encodePacked(token, rewards)),\n      WRAPPER_BYTECODE_HASH\n    ))));\n  }\n\n  function createWrapper(address token, address[] memory rewards) public {\n    _nextToken = token;\n    _rewards = rewards;\n\n    FarmerToken wrapper = new FarmerToken{salt: keccak256(abi.encodePacked(token, rewards))}();\n\n    _nextToken = address(0);\n    _rewards = new address[](0);\n\n    emit WrapperCreated(token, address(wrapper));\n  }\n\n  function getWrapperAddress(address token, address[] memory rewards)\n    public returns (address wrapperAddress) {\n    wrapperAddress = calculateWrapperAddress(token, rewards);\n\n    if(!wrapperAddress.isContract()) {\n      createWrapper(token, rewards);\n      assert(wrapperAddress.isContract());\n    }\n  }\n\n  function nextToken() external override view returns (address) {\n    return _nextToken;\n  }\n\n  function yieldAdapterFactoryAndRewards() external override view returns(address, address[] memory) {\n    return (_adapterFactory, _rewards);\n  }\n}\n"
    },
    "contracts/test/TestGranularity.sol": {
      "content": "pragma solidity >=0.6.2 <0.7.0;\n\nimport \"../tokens/Granularity.sol\";\n\ncontract TestGranularity is Granularity {\n  constructor(uint decimals) public {\n    setDecimals(decimals);\n  }\n\n  function granularity() external view returns (uint256) {\n    return Granularity.getGranularity();\n  }\n\n  function test777to20(uint amount) external view returns (uint256) {\n    return Granularity.from777to20(amount);\n  }\n\n  function test20to777(uint amount) external view returns (uint256) {\n    return Granularity.from20to777(amount);\n  }\n}\n"
    },
    "contracts/protocols/aave/test/TestAaveLendingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./TestAToken.sol\";\n\ncontract TestAaveLendingPool {\n  mapping(address => address) public getAToken;\n\n  function createAToken(address token) external {\n    getAToken[token] = address(new TestAToken());\n  }\n\n  function deposit(\n    address reserve,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 /*referralCode*/\n  ) external {\n    IERC20(reserve).transferFrom(msg.sender, address(this), amount);\n    TestAToken(getAToken[reserve]).mint(onBehalfOf, amount);\n  }\n\n  function withdraw(\n    address reserve,\n    uint256 amount,\n    address to\n  ) external {\n    TestAToken(getAToken[reserve]).burn(msg.sender, amount);\n    IERC20(reserve).transfer(to, amount);\n  }\n}\n"
    },
    "contracts/protocols/aave/test/TestAToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestAToken is ERC20(\"AToken\", \"ATKN\") {\n  function mint(address to, uint256 amount) external {\n    _mint(to, amount);\n  }\n\n  function burn(address from, uint256 amount) external {\n    _burn(from, amount);\n  }\n}\n"
    },
    "contracts/protocols/aave/test/TestAaveLendingPoolAddressProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"./TestAaveLendingPool.sol\";\n\ncontract TestAaveLendingPoolAddressProvider {\n  address private lendingPool;\n\n  constructor() public {\n    lendingPool = address(new TestAaveLendingPool());\n  }\n\n  function getLendingPool() external view returns (address) {\n    return lendingPool;\n  }\n}\n"
    },
    "contracts/GuardedReceiver.sol": {
      "content": "pragma solidity >=0.6.2 <0.7.0;\n\nimport \"./Receiver.sol\";\n\nabstract contract GuardedReceiver is Receiver {\n  mapping(address => bool) private whitelistedTokens;\n\n  function whitelistReceiveToken(address token) internal {\n    whitelistedTokens[token] = true;\n  }\n\n  function _canReceive(address token) internal override {\n    require(whitelistedTokens[token], 'NOT-ALLOWED');\n  }\n}\n"
    },
    "contracts/test/TestUSDC.sol": {
      "content": "pragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestUSDC is ERC20 {\n  constructor() public ERC20(\"USDC\", \"USDC\") {\n    _mint(msg.sender, 100 * 1000000);\n    _setupDecimals(6);\n  }\n}\n"
    },
    "contracts/test/TestERC2612.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestERC2612 is ERC20(\"Uniswap token\", \"UNI\") {\n  bytes32 public DOMAIN_SEPARATOR;\n  // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n  bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n  mapping(address => uint) public nonces;\n\n  constructor() public {\n    _mint(msg.sender, 100 ether);\n\n    DOMAIN_SEPARATOR = keccak256(\n      abi.encode(\n        keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n        keccak256(bytes(name())),\n        keccak256(bytes('1')),\n        chainId(),\n        address(this)\n      )\n    );\n  }\n\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n    require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\n    bytes32 digest = keccak256(\n      abi.encodePacked(\n        '\\x19\\x01',\n        DOMAIN_SEPARATOR,\n        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n      )\n    );\n    address recoveredAddress = ecrecover(digest, v, r, s);\n    require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');\n    _approve(owner, spender, value);\n  }\n\n  function chainId() private pure returns (uint _chainId) {\n    assembly {\n      _chainId := chainid()\n    }\n  }\n}\n"
    },
    "contracts/test/TestDai.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestDai is ERC20(\"Dai Stablecoin\", \"Dai\") {\n  mapping (address => uint) public nonces;\n\n  bytes32 public DOMAIN_SEPARATOR;\n  // bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\");\n  bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\n\n\n  constructor() public {\n    _mint(msg.sender, 100 ether);\n\n    DOMAIN_SEPARATOR = keccak256(abi.encode(\n            keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n            keccak256(bytes(\"Dai Stablecoin\")),\n            keccak256(bytes(\"1\")),\n            chainId(),\n            address(this)\n        ));\n  }\n\n  function permit(address holder, address spender, uint256 nonce, uint256 expiry,\n                  bool allowed, uint8 v, bytes32 r, bytes32 s) external\n  {\n    bytes32 digest =\n      keccak256(abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        keccak256(abi.encode(PERMIT_TYPEHASH,\n                             holder,\n                             spender,\n                             nonce,\n                             expiry,\n                             allowed))\n    ));\n\n    require(holder != address(0), \"Dai/invalid-address-0\");\n    require(holder == ecrecover(digest, v, r, s), \"Dai/invalid-permit\");\n    require(expiry == 0 || now <= expiry, \"Dai/permit-expired\");\n    require(nonce == nonces[holder]++, \"Dai/invalid-nonce\");\n    uint wad = allowed ? uint(-1) : 0;\n\n    _approve(holder, spender, wad);\n  }\n\n  function chainId() private pure returns (uint _chainId) {\n    assembly {\n      _chainId := chainid()\n    }\n  }\n}\n"
    },
    "contracts/test/TestERC777.sol": {
      "content": "pragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC777/ERC777.sol\";\n\ncontract TestERC777 is ERC777 {\n  constructor() public ERC777(\"Test\", \"TST\", new address[](0)) {\n    _mint(msg.sender, 100 ether, '', '');\n  }\n}\n"
    },
    "contracts/test/MaliciousUpgradeToken.sol": {
      "content": "pragma solidity >=0.6.2 <0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\n\ncontract MaliciousUpgradeToken {\n  address public token;\n\n  constructor(address _token) public {\n    token = _token;\n  }\n\n  function callReceiveHook(IERC777Recipient recipient) external {\n    recipient.tokensReceived(msg.sender, msg.sender, address(recipient), 1 ether, \"\", \"\");\n  } \n\n  function transfer(address, uint256) external returns (bool success) {\n    token = token;\n    success = true;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}